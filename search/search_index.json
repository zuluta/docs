{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mi configuraci\u00f3n de MkDocs v1.6.1","text":""},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#mkdocsyml-config","title":"mkdocs.yml config","text":"<p><pre><code># informaci\u00f3n del proyecto\nsite_name: zuluta.dev\nsite_url: https://zuluta.github.io/docs/\n\nsite_author: zuluta\nsite_description: mkdocs\n\nextra:\n  homepage: https://zuluta.github.io/docs/\n\n# repositorio\nrepo_name: docs\nrepo_url: https://github.com/zuluta/docs/\n\n# navegaci\u00f3n\nnav:\n  - Manual de programaci\u00f3n:\n    - Inicio: index.md\n    - Ruta de aprendizaje:\n      - Desarrollador Full Stack: ruta_aprendizaje/desarrollador_full_stack.md\n    - Programaci\u00f3n:\n      - Comandos GIT: programacion/comandos_git.md\n    - Instalaci\u00f3n:\n      - MkDocs + virtualenv: instalacion/mkdocs.md\n      - Despliegue a GitHub Pages: instalacion/gh_deploy.md\n    - DevCamp documentaci\u00f3n:\n      - Checkpoint 06:\n        - \u00cdndice: devcamp/checkpoint-06/index.md\n        - 1. Introducci\u00f3n al uso de clases: devcamp/checkpoint-06/introduccion-clases-py.md\n        - 2. \u00bfQu\u00e9 es un m\u00e9todo dunder?: devcamp/checkpoint-06/metodo-dunder-py.md\n        - 3. \u00bfQu\u00e9 es un decorador?: devcamp/checkpoint-06/que-es-un-decorador-py.md\n        - 4. \u00bfQu\u00e9 es el polimorfismo?: devcamp/checkpoint-06/que-es-polimorfismo-py.md\n        - 5. \u00bfQue es una API?: devcamp/checkpoint-06/que-es-una-api-py.md\n        - 6. \u00bfEs MongoDB una base de datos SQL o NoSQL?: devcamp/checkpoint-06/que-es-mongodb-py.md\n      - Checkpoint 07:\n        - \u00cdndice: devcamp/checkpoint-07/index.md\n        - 1. \u00bfQue diferencia a JavaScript de cualquier otro lenguaje de programaci\u00f3n?: devcamp/checkpoint-07/introduccion-js.md\n        - 2. \u00bfCu\u00e1les son algunos tipos de datos JS?: devcamp/checkpoint-07/tipos-de-datos-js.md\n        - 3. \u00bfCu\u00e1les son las tres funciones de String en JS?: devcamp/checkpoint-07/tres-funciones-de-string-js.md\n        - 4. \u00bfQu\u00e9 es un condicional?: devcamp/checkpoint-07/condicionales-js.md\n        - 5. \u00bfQu\u00e9 es un operador ternario?: devcamp/checkpoint-07/operador-ternario-js.md\n        - 6. \u00bfCu\u00e1l es la diferencia entre una declaraci\u00f3n de funci\u00f3n y una expresi\u00f3n de funci\u00f3n?: devcamp/checkpoint-07/declaracion-de-funcion-vs-expresion-de-funcion-js.md\n        - 7. \u00bfQu\u00e9 es la palabra clave \"this\" en JS?: devcamp/checkpoint-07/que-es-this-js.md\n      - Checkpoint 08: \n        - \u00cdndice: devcamp/checkpoint-08/index.md\n        - 1. \u00bfQu\u00e9 tipo de bucles hay en JS?: devcamp/checkpoint-08/bucles-js.md\n        - 2. \u00bfCu\u00e1les son las diferencias entre const, let y var?: devcamp/checkpoint-08/variables-js.md\n        - 3. \u00bfQu\u00e9 es una funci\u00f3n de flecha?: devcamp/checkpoint-08/funcion-flecha-js.md\n        - 4. \u00bfQu\u00e9 es la deconstrucci\u00f3n de variables?: devcamp/checkpoint-08/deconstruccion-de-variables-js.md\n        - 5. \u00bfQu\u00e9 hace el operador de extensi\u00f3n en JS?: devcamp/checkpoint-08/operador-de-extension-js.md\n        - 6. \u00bfQu\u00e9 es la programaci\u00f3n orientada a objetos?: devcamp/checkpoint-08/que-es-poo-js.md\n        - 7. \u00bfQu\u00e9 es una promesa en JS?: devcamp/checkpoint-08/promesa-js.md\n        - 8. \u00bfQu\u00e9 hacen async y await por nosotros?: devcamp/checkpoint-08/async-await-js.md\n\n# configuraci\u00f3n\ntheme:\n  name: material\n  language: es\n  #favicon: images/favicon.png\n  icon:\n    logo: fontawesome/solid/hat-cowboy\n\n  font:\n    text: Roboto\n    code: Roboto Mono\n\n  features:\n    - navigation.tabs\n    - navigation.top\n    - search.suggest\n    - search.highlight\n    - content.code.copy\n\n  palette:\n    # modo diurno\n    - scheme: default\n      primary: indigo\n      accent: indigo\n      toggle:\n        icon: material/weather-sunny\n        name: Light Mode\n\n    # modo nocturno\n    - scheme: slate\n      primary: indigo\n      accent: indigo\n      toggle:\n        icon: material/weather-night\n        name: Dark Mode\n\nmarkdown_extensions:\n  # extension para sintaxis de codigo\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.superfences\n\n  # extension para emojis\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n\n  # extension para crear note, abstract, info, tip, success, question, warning, failure, danger, bug, example, quote\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n\n  # extension para el resaltado de texto\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n\n  # extensi\u00f3n para escapar car\u00e1cteres de c\u00f3digo con la barra invertida\n  - pymdownx.escapeall\n\n# css personalizado\nextra_css:\n  - stylesheets/highlight/11.11.1/atom-one-dark.min.css # libreria para resaltado de c\u00f3digo\n  - stylesheets/extra.css\n\n# js personalizado\nextra_javascript:\n  - javascripts/highlight/11.11.1/highlight.min.js # libreria para resaltado de c\u00f3digo\n  - javascripts/extra.js\n\n# plugin instalados\nplugins:\n  - search # activa la caja de b\u00fasqueda\n  - glightbox # plugin para redimensionar imagenes\n\ncopyright:\n  Copyright &amp;copy; 2025 &lt;a href=\"https://github.com/zuluta\"  target=\"_blank\" rel=\"noopener\"&gt;zuluta&lt;/a&gt;\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/","title":"\u00cdndice","text":"Checkpoint 06"},{"location":"devcamp/checkpoint-06/#documentacion-python","title":"Documentaci\u00f3n Python","text":"<p>\u00cdNDICE DE CONTENIDOS</p> <ol> <li>Introducci\u00f3n al uso de clases</li> <li>\u00bfQu\u00e9 es un m\u00e9todo dunder?</li> <li>\u00bfQu\u00e9 es un decorador?</li> <li>\u00bfQu\u00e9 es el polimorfismo?</li> <li>\u00bfQu\u00e9 es una API?</li> <li>\u00bfEs MongoDB una base de datos SQL o NoSQL?  </li> </ol>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/","title":"1. Introducci\u00f3n al uso de clases","text":"<p>Python es un lenguaje orientado a objetos, no es necesario hacer uso de ellas para poder crear un programa. De hecho, hemos estado trabajando hasta ahora sin hacer menci\u00f3n a ellas ni emplearlas.</p> <p>Hasta ahora, hemos construido aplicaciones peque\u00f1as de manera secuenciada y desorganizada. Esto no significa que lo hayamos hecho mal, lo que quiero decir es, que cuando empecemos a crear aplicaciones di\u00e1micas y sean mas complejas, necesitaremos mejorar la estructura del c\u00f3digo, la organizaci\u00f3n y crear c\u00f3digo reutilizable y facilitar su mantenimiento.</p> <p></p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#11-clase-estatica","title":"1.1. Clase est\u00e1tica:","text":"<p>PRECAUCI\u00d3N</p> <p>Hay que evitar el mal uso de las clases, en este ejemplo, vemos que las variables no son reutilizables, tampoco podemos pasarle argumentos.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <pre><code>class Cliente:\n\n    dni = '88521596P'\n    nombre = 'Luis'\n    apellido = 'Mendoza'\n\n    def __init__(self):\n        print(f'DNI: {self.dni}\\nNombre: {self.nombre}\\nApellido: {self.apellido}')\n\n\nCliente()\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n</code></pre> <ul> <li>\u274c Estructurado.</li> <li>\u274c Organizado.</li> <li>\u274c Escalable.</li> <li>\u274c Reutilizable. </li> </ul>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#12-clase-dinamica","title":"1.2. Clase din\u00e1mica:","text":"<p>La manera recomendada de contruir aplicaci\u00f3nes con c\u00f3digo reutilizable y organizada, es con el uso de las clases. Al principio, es normal que te sientas perdido con todo esto de las clases, pero no te preocupes, todos hemos pasado por esta etapa.</p> <p>Para crear una clase, vamos a emplear la palabra reservada <code>class</code> seguido de un nombre escrito en PascalCase, primera letra de cada palabra se escribe en may\u00fascula, y sin guiones bajos. Sabemos que las clases pueden contener funciones, a las que llamamos m\u00e9todos. Una clase tambi\u00e9n puede contener variables, a las que se conoce con el nombre de atributos. Para crear atributos, primero definimos un m\u00e9todo especial llamado <code>__init__()</code>, que es invocado por Python autom\u00e1ticamente siempre que se crea una instancia de la clase (conocido tambi\u00e9n como constructor o inicializador).</p> <p>Los clientes que vayamos a crear, no tendr\u00e1n el mismo <code>dni</code>, <code>nombre</code> ni <code>apellido</code>. Por ello ser\u00eda conveniente permitir que, al definir una instancia, se pase como argumento el dni del cliente y \u00e9ste se almacene en el atributo <code>self.dni</code>, nombre del cliente en el atributo <code>self.nombre</code> y apellido del cliente en el atributo <code>self.apellido</code>.</p> <p></p> <p>IMPORTANTE</p> <p>Dentro de la clase, las variables pasan a llamarse atributos, el primer atributo obligatorio siempre sera <code>self</code>, las funciones pasan a llamarse m\u00e9todos, nos permite pasarle argumentos y eso hace que el c\u00f3digo sea reutilizable. Estas son las razones por el cual se crearon las clases en programaci\u00f3n.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n        print(f'DNI: {self.dni}\\nNombre: {self.nombre}\\nApellido: {self.apellido}')\n\nCliente('88521596P', 'Luis', 'Mendoza')\nCliente('96452178K', 'Maribel', '')\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n    # DNI: 96452178K\n    # Nombre: Maribel\n    # Apellido:\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#13-crear-objetos-con-clase","title":"1.3. Crear objetos con clase:","text":"<p>TIP</p> <p>Antes del auge de la POO, la programaci\u00f3n estaba dominada por el paradigma procedimental. Este enfoque estructuraba los programas como una serie de instrucciones secuenciales y depend\u00eda en gran medida de funciones y datos globales. Si bien este modelo era efectivo para problemas simples, se volvi\u00f3 dif\u00edcil de manejar a medida que los sistemas se hicieron m\u00e1s complejos debido a la falta de separaci\u00f3n clara entre los datos y las operaciones.</p> <p></p> <p>Python es un lenguaje multiparadigma:   - Soporta la programaci\u00f3n imperativa y funcional.   - Soporta la programaci\u00f3n orientada a objetos (POO). </p> <p>En este ejemplo, vamos a crear 2 objetos que se van a llamar <code>cli_1</code> y <code>cli_2</code>. <code>cli_1</code> va tener DNI, Nombre, Apellido y el <code>cli_2</code> va tener solamente DNI, Nombre. La ventaja de poder crear estos objetos de una forma tan simplificada, es impresionante.</p> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', '')\n\nprint(f'DNI: {cli_1.dni}\\nNombre: {cli_1.nombre}\\nApelllido: {cli_1.apellido}')\nprint(f'DNI: {cli_2.dni}\\nNombre: {cli_2.nombre}')\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n    # DNI: 96452178K\n    # Nombre: Maribel\n    # Apellido:\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#14-metodos-dentro-de-una-clase","title":"1.4. M\u00e9todos dentro de una clase:","text":"<p>En este ejemplo, vamos a crear un m\u00e9todo normal llamado <code>cuenta</code>, el primer atributo obligatorio se llama <code>self</code>, seguido pondremos nuestros atributos opcionales separadas por una <code>,</code>coma y cerramos la linea con <code>:</code> dos puntos.</p> <p>Dentro del m\u00e9todo, indentamos con 4 espacios para empezar a escribir nuestro c\u00f3digo de ejecuci\u00f3n. En este caso, vamos a emplear <code>return</code> para retornar un mensaje que ponga Cuenta: El cliente ????????? tiene cuenta. Con esto, ya tendriamos nuestra clase completado.</p> <p>Utilizaremos los mismos objetos <code>cli_1</code> y <code>cli_2</code> creados en el ejercicio anterior. La forma de acceder a ello es, llamamos primero al objeto <code>cli_1</code> y ponemos un <code>.</code> punto y llamamos al metodo <code>cuenta</code>. Al tratarse de un m\u00e9todo, como toda funci\u00f3n, devemos cerrarla con <code>()</code>parentesis. El c\u00f3digo quedaria de la siguiente manera <code>cli_1.cuenta()</code></p> <p>Finalizamos el ejemplo con la funci\u00f3n <code>print()</code> para imprimir en pantalla lo que hemos programado en esta clase, <code>print(cli_1.cuenta())</code> y <code>print(cli_2.cuenta())</code></p> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n    def cuenta(self):\n        return f'Cuenta: El cliente {self.dni} tiene cuenta'\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', '')\n\nprint(cli_1.cuenta())\nprint(cli_2.cuenta())\n\n# salida:\n    # Cuenta: El cliente 88521596P tiene cuenta\n    # Cuenta: El cliente 96452178K tiene cuenta\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#15-estructura-basica-de-una-clase","title":"1.5. Estructura b\u00e1sica de una clase:","text":"<p>Llegados aqui, aprenderemos los conceptos b\u00e1sicos que construyen una clase. Trata de leer el c\u00f3digo y entender lo que sucede en cada paso.</p> <p></p> <p>Descripci\u00f3n de conceptos:</p> <ol> <li><code>class</code> Declara una clase.</li> <li><code>Cliente</code> Asigna un nombre a la clase, siempre en PascalCase y sin guiones bajos.</li> <li><code>password = '1234'</code> Declara una variable de clase.</li> <li><code>def</code> Declara un m\u00e9todo.</li> <li><code>__init__</code> Lleva dos guiones al principio y al final del nombre, se le conoce como m\u00e9todo dunder, especial o m\u00e1gico.</li> <li><code>self</code> Es el primer atributo obligatorio siempre.</li> <li><code>dni</code>,<code>nombre</code>, <code>apellido</code> Se llaman atributos del m\u00e9todo y van separados por una <code>,</code> coma.</li> <li><code>self.dni</code> Declara una variable de instancia.</li> <li><code>dni</code> Guarda el valor de la variable de instancia.</li> <li><code>cuenta</code> Asigna un nombre al m\u00e9todo.</li> <li><code>self.password</code> Hace referencia a la variable de instancia para retornar su valor.</li> <li><code>cli_1</code> Crea un objeto.</li> <li><code>Cliente</code> Invoca a la clase desde cualquier parte de la aplicaci\u00f3n.</li> <li><code>'88521596P'</code>, <code>'Luis'</code>, <code>'Mendoza'</code> Se llaman argumentos.</li> <li><code>Print</code> Es una funci\u00f3n para imprimir en pantalla.</li> <li><code>cli_1.cuenta</code> hace referencia al objeto <code>cli_1</code> para acceder a la clase y ejecutar el m\u00e9todo <code>cuenta</code>.</li> <li>Visualizamos los datos en la pantalla.</li> </ol> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <pre><code>class Cliente:\n    password = '1234'\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n    def cuenta(self):\n        return f'{self.nombre} {self.apellido}:\\nUsuario: {self.dni}\\nContrase\u00f1a: {self.password}'\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', 'Garcia')\n\nprint(cli_1.cuenta())\nprint(cli_2.cuenta())\n\n# salida:\n    # Luis Mendoza:\n    # Usuario: 88521596P\n    # Contrase\u00f1a: 1234\n    # Maribel Garcia:\n    # Usuario: 96452178K\n    # Contrase\u00f1a: 1234\n</code></pre> <ul> <li>\u2705 Facil de estructurar.</li> <li>\u2705 Facil de organizar.</li> <li>\u2705 Facil de leer.</li> <li>\u2705 Facil de escalar.</li> <li>\u2705 C\u00f3digo reutilizable.</li> </ul> <p>IMPORTANTE</p> <p>Las variables de clase son \u00fatiles cuando queremos utilizar un mismo valor en cualquiera de los metodos. Son accesibles desde cualquier m\u00e9todo. Dentro de las clases, no se recomienda el uso de las condicionales. Su uso est\u00e1 enfocado en gestionar datos y m\u00e9todos.</p> <p>\ud83d\udcac Es fundamental entender bien la estructura y la l\u00f3gica de las clases para poder seguir avanzando y evitar estancamientos en el futuro.  </p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/","title":"2. \u00bfQu\u00e9 es un m\u00e9todo dunder?","text":"<p>En programaci\u00f3n orientada a objetos, los m\u00e9todos dunder o m\u00e9todos m\u00e1gicos son funciones especiales que permiten definir comportamientos espec\u00edficos para las clases. Estos m\u00e9todos se llaman \u201cm\u00e1gicos\u201d porque su nombre comienza y termina con dos guiones bajos (__).</p> <p>TIP</p> <p>Los m\u00e9todos m\u00e1gicos son una herramienta poderosa que permite definir comportamientos espec\u00edficos para las clases en Python. Utilizarlos de forma adecuada puede hacer que nuestro c\u00f3digo sea m\u00e1s f\u00e1cil de entender y mantener.</p> <p></p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/#21-tipos-de-metodos-dunder","title":"2.1. Tipos de m\u00e9todos dunder:","text":"<ul> <li><code>__init__</code>: Se utiliza para inicializar objetos y es invocado autom\u00e1ticamente cuando se crea una instancia de la clase.</li> <li><code>__str__</code>: Se utiliza para representar el objeto en forma de cadena de texto.</li> <li><code>__len__</code>: Permite determinar la longitud de un objeto.</li> </ul> <p>Existen muchos otros m\u00e9todos m\u00e1gicos que pueden ser \u00fatiles, como <code>__add__</code> (para sumar objetos), <code>__eq__</code> (para comparar igualdad), <code>__lt__</code> (para comparar menor que), entre otros. Sin embargo, es importante tener en cuenta que no siempre es necesario utilizar estos m\u00e9todos y que su uso variar\u00e1 dependiendo de cada caso espec\u00edfico.</p> <p></p> <ul> <li> <p>Ejemplo <code>__init__</code>: <pre><code>class Persona:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\np = Persona('Juan')\nprint(p.nombre)\n</code></pre></p> </li> <li> <p>Ejemplo <code>__init__</code> con <code>__str_</code>: <pre><code>class Persona:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\n    def __str__(self):\n        return f'Mi nombre es {self.nombre}'\n\np = Persona('Juan')\nprint(p)\n</code></pre></p> </li> <li> <p>Ejemplo <code>__init__</code> con <code>__len__</code>: <pre><code>class Lista:\n    def __init__(self, elementos):\n        self.elementos = elementos\n\n    def __len__(self):\n        return len(self.elementos)\n\nl = Lista([1,2,3,4,5])\nprint(len(l)) # Imprime 5\n</code></pre></p> </li> </ul> <p>IMPORTANTE</p> <p>El primer ejemplo y el segundo ejemplo tienen el mismo resultado, lo que hace el m\u00e9todo dunder <code>__str__</code> es convertir el objeto en una cadena de texto.</p> <p></p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/#22-que-metodo-dunder-se-ejecuta-automaticamente","title":"2.2. \u00bfQu\u00e9 m\u00e9todo dunder se ejecuta autom\u00e1ticamente?","text":"<p>El m\u00e9todo <code>__init__</code>, es un m\u00e9todo especial que se ejecuta autom\u00e1ticamente al invocar la clase e inicializara los atributos del objeto que le ayamos creado. Es decir, es imposible de olvidarse llamarlo ya que se llamar\u00e1 autom\u00e1ticamente.</p> <p>IMPORTANTE</p> <p>El m\u00e9todo <code>__init__</code> es el primer m\u00e9todo que se ejecuta dentro de una clase.</p> <p></p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/#caracteristicas","title":"\ud83d\udcdd Caracter\u00edsticas:","text":"<ul> <li>El m\u00e9todo <code>__init__</code> no puede retornar <code>return</code> datos, no devuelve nada.</li> <li>El m\u00e9todo <code>__init__</code> puede recibir par\u00e1metros que se utilizan para inicializar atributos de forma autom\u00e1tica.</li> <li>El m\u00e9todo <code>__init__</code> es un constructor de instancias.</li> <li>El m\u00e9todo <code>__init__</code> es un m\u00e9todo opcional, de todos modos es muy com\u00fan declararlo.  </li> </ul>"},{"location":"devcamp/checkpoint-06/que-es-mongodb-py/","title":"6. \u00bfEs MongoDB una base de datos SQL o NoSQL?","text":"<p>MongoDB es una base de datos NoSQL orientada a documentos que apareci\u00f3 el a\u00f1o 2007. Se utiliza para almacenar vol\u00famenes masivos de datos.</p>"},{"location":"devcamp/checkpoint-06/que-es-mongodb-py/#61-como-se-almacenan-los-datos","title":"6.1. \u00bfComo se almacenan los datos?","text":"<p>A diferencia de una base de datos relacional SQL tradicional, MongoDB no se basa en tablas y columnas. Los datos se almacenan como colecciones y documentos.</p> <p>La arquitectura de MongoDB se basa en varios componentes principales. En primer lugar, la clave _id es un campo obligatorio para cada documento que se genera de forma autom\u00e1tica. Representa un valor \u00fanico y puede considerarse como la clave principal del documento para identificar al objeto dentro de la colecci\u00f3n.</p> <p></p> <p>IMPORTANTE</p> <ul> <li>Colecciones: Se refiere a un diccionario <code>{...}</code> o lista <code>[...]</code>.</li> <li>Documentos: Se refiere a la <code>\"clave\": \"valor\"</code> dentro de un diccionario. </li> </ul> <p></p> <p></p> <pre><code>{\n    \"_id\": ObjectId(\"5cf0029caff5056591b0ce7d\"),\n    \"nombre\": \"Juan\",\n    \"apellido\": \"Garcia\",\n},\n{\n    \"_id\": ObjectId(\"6sh5930rdee4058890b0ae5c\"),\n    \"nombre\": \"Nerea\",\n    \"apellido\": \"Larralde\",\n    \"telefono\": \"666-666-444\",\n    \"direccion\":  {\n        \"codigo_postal\": \"22222\",\n        \"provincia\": \"Gipuzkoa\",\n        \"pais\": \"Espa\u00f1a\"\n    }\n}\n</code></pre> <p>IMPORTANTE</p> <p>MongoDB almacena los datos en documentos flexibles al estilo JSON pero los reconoce como BSON, esto vendria a ser un JSON binario.</p> <p></p>"},{"location":"devcamp/checkpoint-06/que-es-mongodb-py/#61-comandos-para-interactuar-con-la-base-de-datos-desde-la-terminal","title":"\ud83d\udc68\u200d\ud83d\udcbb 6.1. Comandos para interactuar con la base de datos desde la terminal:","text":"<p>MQL es el lenguaje de consulta y manipulaci\u00f3n de informaci\u00f3n que MongoDB nos provee por defecto (MongoDB Query Language). Las consultas de MongoDB se basan en el lenguaje de programaci\u00f3n JavaScript con algunas diferencias leves.</p> <p></p> <ul> <li>Consultar todos los documentos que tenemos en la base de datos sin formatear la estructura:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find()</code>.</li> </ul> </li> <li>Consultar todos los documentos que tenemos en la base de datos con la estructura formateada:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find().pretty()</code>.</li> </ul> </li> <li>Consultar todos los documentos que coincidan con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: \"Larralde\"}).pretty()</code>.</li> </ul> </li> <li>Consultar cuantos documentos coinciden con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: \"Larralde\"}).length()</code>.</li> </ul> </li> <li>Consultar cuantos documentos coinciden con el valor del apellido utilizando Regex:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: /.*Larralde.*/i})</code>.</li> </ul> </li> <li>Consultar en el documento si existe una clave o no:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: $exists: true})</code>.</li> </ul> </li> <li>Eliminar todos los documentos que coincidan con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.remove({apellido: \"Larralde\"})</code>.</li> </ul> </li> <li> <p>Eliminar un documento que coincida con el valor del apellido:</p> <ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.remove({apellido: \"Larralde\"}, 1)</code>. </li> </ul> </li> <li> <p>Insertar un nuevo documento \ud83d\udc47 <pre><code>db.nombre_de_tu_base_de_datos.insert({\n    \"nombre\": \"Carlos\",\n    \"apellido\": \"Garrido\",\n    \"direccion\": {\n        \"codigo_postal\": \"45210\",\n        \"provincia\": \"Gipuzkoa\",\n        \"pais\": \"Espa\u00f1a\"\n    }\n});\n</code></pre> </p> </li> </ul> <p>TIP</p> <p>Descargar MongoDB desde https://www.mongodb.com/try/download/community.</p> <p>Para m\u00e1s informaci\u00f3n, consulte en su p\u00e1gina oficial.</p> <p> </p>"},{"location":"devcamp/checkpoint-06/que-es-polimorfismo-py/","title":"4. \u00bfQu\u00e9 es el polimorfismo?","text":"<p>El polimorfismo tiene como objetivo cambiar la funcionalidad entre los m\u00e9todos con el mismo nombre, en este ejemplo, tenemos tres clases, a los m\u00e9todos les hemos asignado el mismo nombre <code>desplazamiento</code>. A pesar de que lleven el mismo nombre, los podemos diferenciar creando una nueva funci\u00f3n y pasandole como atributo, por ejemplo <code>vehiculo</code>. El <code>vehiculo</code> tomara el valor de <code>mi_vehiculo</code> para hacer la m\u00e1gia del polimorfismo. A la variable <code>mi_vehiculo</code>, podemos pasarle cualquiera de las tres clases, <code>Moto()</code>, <code>Coche()</code>, <code>Camion()</code>.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Moto():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 2 ruedas')\n\nclass Coche():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 4 ruedas')\n\nclass Camion():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 6 ruedas')\n\ndef desplazamiento_vehiculo(vehiculo):\n    vehiculo.desplazamiento()\n\nmi_vehiculo = Coche()\ndesplazamiento_vehiculo(mi_vehiculo)\n\n# salida:\n    # Me desplazo utilizando 4 ruedas\n</code></pre> </p> <p>IMPORTANTE</p> <p>El polimorfismo puede acceder a cualquiera de las clases y ejecutar m\u00e9todos independientemente del nombre que tengan.</p> <p> </p>"},{"location":"devcamp/checkpoint-06/que-es-un-decorador-py/","title":"3. \u00bfQu\u00e9 es un decorador?","text":"<p>Los decoradores son funciones que toman otra funci\u00f3n como argumento y anidan una nueva funci\u00f3n para agregarle c\u00f3digo extra sin alterar la existente.</p> <p>En el siguiente ejemplo, puedes ver la estructura general de una funci\u00f3n decoradora.</p> <p>TIP</p> <p>Si alguna vez has visto <code>@</code>, est\u00e1s ante un decorador.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>def decorador(f):\n\n    def funcion_nueva():\n        print('Funcionalidad extra')\n        f()\n    return funcion_nueva\n\n@decorador\ndef funcion_inicial():\n    print('Funcionalidad inicial')\n\nfuncion_inicial()\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/que-es-un-decorador-py/#analicemos-estos-elementos-en-mas-detalle","title":"\ud83d\udd75\ufe0f Analicemos estos elementos en m\u00e1s detalle:","text":"<ul> <li> <p>Esta es la <code>funci\u00f3n_inicial</code> que el <code>@decorador</code> va tomar como referencia. <pre><code>@decorador\ndef funcion_inicial():\n    print('Funcionalidad inicial')\n\nfuncion_inicial()\n</code></pre></p> </li> <li> <p>Esta es una funci\u00f3n intermediaria que va hacer la decoradoraci\u00f3n <code>def decorador</code>. El nombre de la funci\u00f3n hace referencia a <code>@decorador</code>. Toma <code>(f)</code> como argumento para invocar <code>f()</code> m\u00e1s adelante dentro de la <code>funci\u00f3n_nueva()</code> que va ir anidada.</p> </li> </ul> <pre><code>def decorador(f):\n    def funcion_nueva():\n        print('Funcionalidad extra')\n        f()\n    return funcion_nueva\n</code></pre> <ul> <li>Si ejecutamos el c\u00f3digo, podemos ver el siguiente resultado:</li> </ul> <p><pre><code>Funcionalidad extra\nFuncionalidad inicial\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/","title":"5. \u00bfQue es una API?","text":"<p>Una API es una (interfaz de programaci\u00f3n de aplicaciones) que sigue un conjunto de restricciones arquitecturales basadas en HTTP. Esto significa que se puede acceder a los recursos a trav\u00e9s de URLs, lo que hace que la API sea f\u00e1cil de entender y utilizar. Podemos crear una API que haga literalmente cualquier cosa, desde dar clima hasta un cat\u00e1logo completo de una tienda en l\u00ednea. Casi todas las aplicaciones utilizan APIs para conectarse con fuentes de datos corporativas, servicios de datos de terceros u otras aplicaciones.</p> <p>TIP</p> <p>El formato de intercambio de datos normalmente es JSON o XML, lo que permite que la API sea compatible con una amplia variedad de aplicaciones.</p> <p></p> <p> </p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#51-una-api-tiene-dos-componentes-principales","title":"5.1. Una API tiene dos componentes principales:","text":"<ul> <li> <p>Recursos:</p> <ul> <li>Datos o informaci\u00f3n.</li> </ul> </li> <li> <p>Verbos HTTP:</p> <ul> <li><code>GET</code> para consultar y leer.</li> <li><code>POST</code> para crear.</li> <li><code>PUT</code> para editar.</li> <li><code>DELETE</code> para eliminar.</li> </ul> </li> </ul> <p>IMPORTANTE</p> <p>Los recursos son los datos o informaci\u00f3n que se pueden acceder a trav\u00e9s de la API. Los verbos HTTP son las operaciones que se pueden realizar en esos recursos, como obtener <code>GET</code> un recurso, crear <code>POST</code> un recurso, actualizar <code>PUT</code> un recurso o eliminar <code>DELETE</code> un recurso.</p> <p></p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#52-de-donde-obtiene-la-api-toda-la-informacion","title":"5.2. \u00bfDe donde obtiene la API toda la informaci\u00f3n?","text":"<p>La informaci\u00f3n de la api no sale de la nada, necesita ser construido por alguien en formato diccionario. Se puede construir de manera manual o cargarle la informaci\u00f3n desde una base de datos. Cuando abrimos la url donde esta alojado el API, veremos un monton de datos en formato diccionario <code>{...}</code>. Puede contener anidamientos tanto de diccionarios como de listas en su interior.</p> <p>Formato de una API \ud83d\udc47 <pre><code>{\n  \"id\": 1,\n  \"nombre\": \"Juan\",\n  \"apellido\": \"Garcia\",\n  \"pais\": \"Espa\u00f1a\"\n},\n{\n  \"id\": 2,\n  \"nombre\": \"Nerea\",\n  \"apellido\": \"Larralde\",\n  \"pais\": \"Espa\u00f1a\"\n}\n</code></pre></p> <p>TIP</p> <p>Puedes practicar con esta API de Rick and Morty https://rickandmortyapi.com/api/character/ utilizando la aplicaci\u00f3n Postman https://www.postman.com/ para testear con APIs.</p> <p>Si accede a <code>https://rickandmortyapi.com/api/character/131</code> por numero de id al personaje, nos devolvera un json con toda la informaci\u00f3n.</p> <p></p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#53-que-es-postman","title":"5.3. \u00bfQu\u00e9 es Postman?","text":"<p>Se trata de una herramienta dirigida a desarrolladores web que permite realizar peticiones HTTP a cualquier API. Postman es muy \u00fatil a la hora de programar y hacer pruebas, puesto que nos ofrece la posibilidad de comprobar el correcto funcionamiento de nuestros desarrollos.</p> <p>Con esto no queremos decir que Postman sea una herramienta exclusiva para profesionales del entorno web, de hecho va a ser muy \u00fatil para todo aquel que tenga que interactuar con una API.</p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li> <p>Env\u00edo de solicitudes:</p> <ul> <li>Postman permite enviar solicitudes HTTP y HTTPS utilizando m\u00e9todos como GET, POST, PUT y DELETE, entre otros. Los desarrolladores pueden especificar par\u00e1metros, encabezados y el cuerpo de la solicitud para simular diversas interacciones con una API.</li> </ul> </li> <li> <p>Pruebas automatizadas:</p> <ul> <li>Con Postman, los desarrolladores pueden crear y ejecutar pruebas automatizadas para verificar el comportamiento de una API. Esto ayuda a detectar errores de manera temprana y a garantizar que el software cumpla con los est\u00e1ndares de calidad. </li> </ul> </li> </ul> <p>TIP</p> <p>API de testeo https://rickandmortyapi.com</p> <p> </p>"},{"location":"devcamp/checkpoint-07/","title":"\u00cdndice","text":"Checkpoint 07"},{"location":"devcamp/checkpoint-07/#documentacion-javascript","title":"Documentaci\u00f3n JavaScript","text":"<p>\u00cdNDICE DE CONTENIDOS</p> <ol> <li>\u00bfQu\u00e9 diferencia a Javascript de cualquier otro lenguaje de programaci\u00f3n?</li> <li>\u00bfCu\u00e1les son algunos tipos de datos JS?</li> <li>\u00bfCu\u00e1les son las tres funciones de String en JS?</li> <li>\u00bfQu\u00e9 es un condicional?</li> <li>\u00bfQu\u00e9 es un operador ternario?</li> <li>\u00bfCu\u00e1l es la diferencia entre una declaraci\u00f3n de funci\u00f3n y una expresi\u00f3n de funci\u00f3n?</li> <li>\u00bfQu\u00e9 es la palabra clave \"this\" en JS?  </li> </ol>"},{"location":"devcamp/checkpoint-07/condicionales-js/","title":"4. \u00bfQu\u00e9 es un condicional?","text":"<p>Hasta ahora, hemos visto c\u00f3mo resolver los problemas m\u00e1s sencillos pero no podemos resolver todo utilizando estructuras secuenciales. Cuando tenemos que tomar una decisi\u00f3n aparecen las estructuras condicionales. Por ejemplo, en nuestra vida diaria hay momentos donde tenemos que decidir entre un pantal\u00f3n u otro, un camino u otro. En estos casos es com\u00fan resolver un problema combinando estructuras secuenciales y condicionales.</p> <p>JavaScript cuenta con 4 tipos de condicionales:</p> <ul> <li>Condicional if</li> <li>Condicional else</li> <li>Condicional else if</li> <li>Condicional switch </li> </ul>"},{"location":"devcamp/checkpoint-07/condicionales-js/#41-condicional-simple-con-if","title":"4.1. Condicional simple con if","text":"<p>Podemos ver un ejemplo de una estructura condicional simple con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>Puedes usar if solo una vez por bloque y no es obligatorio complementarlo con else.</p> <p> </p> <p>Podemos observar en el esquema que el rombo representa la condici\u00f3n y tenemos dos opciones que podemos tomar. Si la condici\u00f3n devuelve un resultado verdadero, ejecutar\u00e1 las opciones que se encuentren en su interior, si por el contrario es falso, no realizar\u00e1 dicha acci\u00f3n.</p> <p>Vamos a ver el primer ejemplo y el mas simple con el if, le pasamos por variable <code>edad = 20</code>, si tiene 18 o mas a\u00f1os, muestra un mensaje <code>Soy mayor de edad porque tengo 18 o mas a\u00f1os.</code> y si tiene menos de 18 a\u00f1os, no nos muestra ningun mensaje.</p> ejemplo.js<pre><code>let edad = 20;\nif (edad &gt;= 18) {\n    console.log(`Soy mayor de edad porque tengo ${edad} o mas a\u00f1os.`)\n}\n</code></pre> <p>La palabra clave <code>if</code> implica el inicio de una condici\u00f3n, seguidamente incluimos la condici\u00f3n entre <code>()</code> par\u00e9ntesis y finalizamos la l\u00ednea con el car\u00e1cter <code>{</code> apertura de llave.</p> <p>Una de las caracter\u00edsticas de JavaScript que adem\u00e1s ayuda a tener una estructura organizada es la indentaci\u00f3n o sangrado de texto con dos o cuatro espacios. Es decir, si queremos incluir una condici\u00f3n, el texto que deba ir en su interior debe ir con cuatro espacios con respecto al inicio de la palabra <code>if</code>.</p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#42-condicional-alternativa-con-if-else","title":"4.2. Condicional alternativa con if else","text":"<p>Podemos ver un ejemplo de una estructura condicional compuesta con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>Puedes usar else solo una vez por condici\u00f3n if.</p> <p> </p> <p>Cuando se presenta una elecci\u00f3n entre if o else, tenemos la opci\u00f3n de realizar una acci\u00f3n u otra, es decir, tenemos operaciones diferentes a ejecutar si la condici\u00f3n es verdadera o es falsa. Es decir, se tomara una de las 2 elecciones de la bifurcaci\u00f3n.</p> <p>Vamos a volver a realizar el ejercicio anterior pero, con la diferencia, de que si la edad es menor a 18 a\u00f1os, nos muestre un mensaje <code>Soy menor de edad porque tengo menos de 18 a\u00f1os.</code>.</p> ejemplo.js<pre><code>edad = 16;\nif (edad &gt;= 18) {\n    console.log(`Soy mayor de edad porque tengo ${edad} o mas a\u00f1os.`)\n}\nelse {\n    console.log(`Soy menor de edad porque tengo menos de ${edad} a\u00f1os.`);\n}\n</code></pre> <p>Como podemos ver, si la condici\u00f3n es falsa, y queremos que realice una operaci\u00f3n, la forma ser\u00eda incluyendo la palabra <code>else</code> en una l\u00ednea nueva seguida del car\u00e1cter <code>{</code> apertura de llave. Despu\u00e9s las operaciones necesarias que queramos ejecutar separadas con 4 espacios con respecto a la l\u00ednea de la palabra <code>else</code>. Despues de la operaci\u00f3n y en una nueva l\u00ednea, toca cerrar <code>}</code> la llave y con eso, finaliza el bloque <code>else</code>.</p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#43-condicional-encadenada-con-if-else-if-else","title":"4.3. Condicional encadenada con if else if else","text":"<p>Podemos ver un ejemplo de una estructura condicional encadenada con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>El flujo de ejecucci\u00f3n se prioriza siempre de arriba hacia abajo y puedes crear tantas else if que desees.</p> <p> </p> <p>Cuando se presentan mas de dos elecci\u00f3nes a elegir entre <code>if</code> <code>else if</code> y <code>else</code>, se tomara como v\u00e1lida, solamente una de las 3 elecciones de la bifurcaci\u00f3n. El flujo de ejecuci\u00f3n se priorizara siempre de arriba hacia abajo.</p> <p>Vamos a volver a realizar el ejercicio anterior con una condici\u00f3nal mas, que sera la condicional <code>else if</code>, pero con la diferencia, de que si la edad es mayor o igual a 67 a\u00f1os, nos muestre un mensaje <code>Tengo 70 a\u00f1os y estoy jubilado.</code>. El resto de las condicionales se mantienen igual.</p> ejemplo.js<pre><code>let edad = 36;\n\nif (edad &gt;= 67) {\n    console.log(`Tengo ${edad} a\u00f1os y estoy jubilado.`);\n}\nelse if (edad &gt;= 18) {\n    console.log(`Soy mayor de edad porque tengo ${edad} o mas a\u00f1os.`)\n}\nelse {\n    console.log(`Soy menor de edad porque tengo menos de ${edad} a\u00f1os.`);\n}\n</code></pre> <p>Como vemos en el ejempo anterior, el uso de la condicional else if, nos da la posibilidad de crear muchas condiciones sobre un mismo if ya que su uso no esta limitado. Recuerda que cuanto mas corto y menos condicionales tenga el bloque, mas legible sera el c\u00f3digo.</p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#44-condicionales-anidadas","title":"4.4. Condicionales anidadas","text":"<p>Podemos ver un ejemplo de una estructura condicional anidado con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>Podemos tener infinidad de condiciones anidadas pero en la medida de lo posible, procuraremos anidar lo menos posible.</p> <p> </p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#45-condicional-switch","title":"4.5. Condicional switch","text":"<p>La estructura de control switch permite definir casos espec\u00edficos a realizar cuando la variable expuesta como condici\u00f3n sea igual a los valores que se especifican a continuaci\u00f3n mediante cada case:.</p> <p>Las sentencias switch no ser\u00e1n apropiadas para usar en todas las situaciones. Pero si sientes que las sentencias else if son largas y complicadas, entonces una sentencia switch podr\u00eda ser una opci\u00f3n alternativa. Aunque, mucha gente opina que en lugar de mejorar la legibilidad, normalmente la empeora.</p> <p>Veamos un ejemplo de c\u00f3mo se utiliza:</p> ejemplo.js<pre><code>let numero = 88734;\n\nswitch (numero) {\n    case 00003:\n        console.log('\u00a1Primer premio!');\n        break;\n    case 00012:\n        console.log('\u00a1Segundo premio!');\n        break;\n    case 88734:\n        console.log('\u00a1Tercer premio!');\n        break;\n    // con default, toma la salida de cualquier otra opci\u00f3n\n    default:\n        console.log(`El n\u00famero ${numero} no tiene premio`);\n        break;\n}\n</code></pre> <p>El valor de la variable (<code>numero</code>) es 88734, toma la salida (<code>case 88734</code>) con el mensaje \u00a1Tercer premio!</p> <ul> <li>switch: Se define el tipo de condici\u00f3n que debe cumplir, en este caso, compara el valor de la variable con la opci\u00f3n.</li> <li>case 00003: Es la primera opci\u00f3n, si cumple la condici\u00f3n, toma la salida y sale con el break, si no cumple, continua</li> <li>case 00012: Es la segunda opci\u00f3n, si cumple la condici\u00f3n, toma la salida y sale con el break, si no cumple, continua</li> <li>case 88734: Es la tercera opcion, si cumple la condici\u00f3n, toma la salida y sale con el break, si no cumple, continua</li> <li>default: Si no cumple con ninguna condicion anterior, toma la salida con el mensaje (<code>El n\u00famero (?) no tiene premio</code>) y sale con el break</li> </ul> <p> </p>"},{"location":"devcamp/checkpoint-07/declaracion-de-funcion-vs-expresion-de-funcion-js/","title":"6. \u00bfCu\u00e1l es la diferencia entre una declaraci\u00f3n de funci\u00f3n y una expresi\u00f3n de funci\u00f3n?","text":"<p>JavaScript al ser un lenguaje din\u00e1mico, tiene ciertos mecanismos para garantizar que la ejecuci\u00f3n de nuestro c\u00f3digo sea la m\u00e1s \u00f3ptima y correcta.</p> <p>Tenemos dos maneras principales de definir funciones:</p> <ul> <li>Podemos definir una funci\u00f3n declarando </li> <li>Podemos definir una funci\u00f3n como una expresi\u00f3n</li> </ul> <p>Veamos un ejemplo para compararlos:</p> ejemplo.js<pre><code>// Declaracion de funcion\nfunction saludar() {\n    console.log('Hola');\n}\n\n// Expresion de funcion\nlet saludar = function() {\n    console.log('Hola');\n};\n</code></pre>"},{"location":"devcamp/checkpoint-07/declaracion-de-funcion-vs-expresion-de-funcion-js/#analicemos-las-diferencias","title":"\ud83d\udd75\ufe0f Analicemos las diferencias","text":"<p>Declaraci\u00f3n de funci\u00f3n:</p> <ul> <li>S\u00f3lo es visible dentro del bloque de c\u00f3digo en el que reside, por ejemplo dentro de un <code>if</code></li> <li>JavaScript precarga todas las funciones declaradas al inicio y puede llamarse antes o despues de la funci\u00f3n</li> </ul> <p>Expresi\u00f3n de funci\u00f3n:</p> <ul> <li>Es visible dentro y fuera del bloque de c\u00f3digo en el que reside pudiendo declarar una variable fuera del bloque</li> <li>Se define dentro de una variable como una expresi\u00f3n normal, por eso lleva <code>;</code> punto y coma al final de la funci\u00f3n</li> <li>Solo puede llamarse despues de la funci\u00f3n, si se llama antes de la funci\u00f3n tira error de (variable no est\u00e1 definida)</li> </ul> <p>Las diferencias de sintaxis son claras.</p> <p>Veamos el mismo ejemplo anterior, agregando una llamada antes de la funci\u00f3n:</p> ejemplo.js<pre><code>// Declaracion de funcion\nsaludar() // Salida: Hola\n\nfunction saludar() {\n    console.log('Hola');\n}\n\n// Expresion de funcion\nsaludar(); // Error: saludar no est\u00e1 definida\n\nlet saludar = function() {\n    console.log('Hola');\n};\n</code></pre> <p>En el caso de expresi\u00f3n de funci\u00f3n nos da el error de (variable no est\u00e1 definida), cosa que en la declaraci\u00f3n de funci\u00f3n no ocurre gracias a la precarga de las declaraciones al inicio.</p> <p>IMPORTANTE</p> <p>En las expresiones de funciones darle nombre a la funci\u00f3n es opcional. En cambio para las declaraciones es obligatorio.</p> <p>No hay una forma mejor o peor de declarar funciones, lo bueno es conocer las herramientas que tenemos, sus implicaciones y saber cuando podemos usarlas para crear c\u00f3digo legible y limpio.</p> <p>Veamos un ejemplo mas completo:</p> ejemplo.js<pre><code>// Expresion de funcion\nlet edad = 32;\nlet entradaCasino;\n\nif (edad &gt;= 18) {\n    entradaCasino = function() {\n        console.log('Puedes entrar al casino');\n    };\n}\nelse {\n    entradaCasino = function() {\n        console.log('No puedes entrar al casino');\n    };\n}\n\nentradaCasino(); // Salida: Puedes entrar al casino\n</code></pre> <p>Con la expresion de funcion, podemos llamar a cualquier funci\u00f3n este donde este. Gracias a la variable entradaCasino, nos permite ver la funci\u00f3n an\u00f3nima dentro del bloque if desde el exterior.  </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/","title":"1. \u00bfQu\u00e9 diferencia a Javascript de cualquier otro lenguaje de programaci\u00f3n?","text":"<p>JavaScript es un lenguaje de programaci\u00f3n b\u00e1sico para la creaci\u00f3n de sitios web din\u00e1micos e interactivos. Se usa en navegadores, servidores y aplicaciones para mejorar la experiencia del usuario. Aunque se llama JavaScript, no debe confundirse con Java.</p> <p>Su principal ventaja es que se ejecuta directamente en el navegador del usuario, sin necesidad de compilar el c\u00f3digo previamente.</p> <p>El flujo de ejecuci\u00f3n es la siguiente:</p> <ol> <li>El navegador carga el c\u00f3digo JavaScript en una web</li> <li>El motor de JavaScript lo interpreta y ejecuta</li> <li>Interact\u00faa con el DOM (Document Object Model), que modifica elementos HTML en tiempo real</li> <li>Puede comunicarse con servidores mediante AJAX o Fetch API para obtener y enviar datos sin recargar la p\u00e1gina</li> <li>Maneja eventos como clics de botones para mejorar la interactividad  </li> </ol> <p>Veamos el siguiente ejemplo:</p> <ol> <li>Pulsa el bot\u00f3n</li> <li>Escucha el evento click</li> <li>Ejecuta la funci\u00f3n</li> <li>Cambia el texto del bot\u00f3n</li> </ol> ejemplo.html<pre><code>&lt;!-- crea un boton que pone Start --&gt;\n&lt;button class=\"btn-start\"&gt;Start&lt;/button&gt;\n</code></pre> ejemplo.js<pre><code>// captura el elemento DOM\nconst btnStart = document.querySelector('.btn-start');\n\n// captura el evento\nbtnStart.addEventListener('click', changeText);\n\n// funci\u00f3n para cambiar el texto del boton\nfunction changeText() {\n    btnStart.innerHTML = 'Texto cambiado';\n}\n</code></pre> <p>An\u00e1lisis del c\u00f3digo:</p> <p>Revisa lo que hace el c\u00f3digo, desde ejemplo.js captura el objeto DOM del ejemplo.html y para ello, hace referencia a la clase \"btn-start\". Una vez capturado el objeto DOM, lo guarda en una variable llamada btnStart para luego poner en escucha y capturar el evento 'click', para llamar a la funci\u00f3n changeText.  </p> <p>Cuando se aprende JavaScript, es esencial entender la relaci\u00f3n entre HTML, CSS y JavaScript, y c\u00f3mo se unen para mostrar un sitio web. Aunque la mayor\u00eda de las aplicaciones de JavaScript son del lado del cliente (FRONTEND), este lenguaje tambi\u00e9n es \u00fatil en aplicaciones del lado del servidor (BACKEND), como la creaci\u00f3n de servidores web.</p> <p>Caracter\u00edsticas de JavaScript:</p> <ul> <li>Multiparadigma: Soporta programaci\u00f3n orientada a objetos, funcional e imperativa</li> <li>Din\u00e1mico y flexible: No requiere declaraci\u00f3n expl\u00edcita de tipos de datos</li> <li>Basado en eventos: Responde a interacciones del usuario</li> <li>Compatible con todos los navegadores: Funciona en cualquier navegador moderno</li> <li>As\u00edncrono y concurrente: Permite manejar tareas en paralelo con promesas y async/await</li> </ul> <p>Ventajas</p> <ul> <li>Es f\u00e1cil de aprender y usar.</li> <li>Se ejecuta en el navegador, sin necesidad de compilaci\u00f3n</li> <li>Amplia compatibilidad con diferentes plataformas</li> <li>Ecosistema extenso con miles de librer\u00edas y frameworks</li> <li>Soporte para desarrollo full-stack con Node.js</li> </ul> <p>Desventajas</p> <ul> <li>Manejo de errores menos estricto comparado con otros lenguajes</li> <li>Uso excesivo puede afectar el rendimiento de una p\u00e1gina web</li> </ul> <p></p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#11-sintaxis-de-javascript","title":"1.1. Sintaxis de JavaScript","text":"<p>JavaScript tiene una serie de normas b\u00e1sicas de sintaxis que debemos seguir.</p> <p>Variables:</p> <p>puedes declarar variables usando las palabras clave <code>var</code>, <code>const</code> o <code>let</code>.</p> <ul> <li><code>let</code> Permite declarar variables limitando su alcance al bloque, fuera de ella no tiene efecto</li> <li><code>const</code> Son como las <code>let</code>, solo que su valor no cambiara a lo largo del programa</li> <li><code>var</code> Permite declarar variables con alcance dentro y fuera del bloque, se entienden como globales.</li> </ul> <p>IMPORTANTE</p> <p>No se recomienda el uso de <code>var</code> en Javascript, porque puede dar lugar a problemas y confusiones.</p> <p>Punto y coma para finalizar sentencias:</p> <p>En JavaScript, cada instrucci\u00f3n generalmente termina con un <code>;</code> punto y coma. Es una buena pr\u00e1ctica usar el punto y coma siempre. De lo contrario, puede dar errores.</p> <p>Instrucciones y ejecuci\u00f3n secuencial:</p> <p>En JavaScript, el c\u00f3digo est\u00e1 compuesto por instrucciones que se ejecutan de forma secuencial. Esto significa que las instrucciones se ejecutan una tras otra, de arriba hacia abajo, en el orden en que aparecen.</p> <p>Llaves para delimitar bloques de c\u00f3digo:</p> <p>Las llaves <code>{}</code> en JavaScript se utilizan para definir bloques de c\u00f3digo, especialmente en estructuras de control como funciones, bucles o condiciones.</p> <p>Sensibilidad a may\u00fasculas y min\u00fasculas:</p> <p>JavaScript es un lenguaje que diferencia entre may\u00fasculas y min\u00fasculas (case-sensitive). Esto significa que distingue entre nombre, Nombre y NOMBRE, consider\u00e1ndolos variables diferentes.</p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#buenas-practicas-al-nombrar-variables","title":"<p>Buenas pr\u00e1cticas al nombrar variables:</p>","text":"<ul> <li>Aunque JavaScript no lo exige, es de buena pr\u00e1ctica utilizar camelCase para nombrar variables</li> <li>Una variable no puede comenzar con un n\u00famero.</li> <li>Un nombre de variable no puede contener espacios.</li> <li>No pueden incluir s\u00edmbolos especiales como (!, @, #, %) a excepci\u00f3n del guion bajo (_) y el s\u00edmbolo de d\u00f3lar ($).</li> </ul>"},{"location":"devcamp/checkpoint-07/introduccion-js/#algunas-palabras-reservadas","title":"<p>Algunas palabras reservadas:</p>","text":"<ul> <li>Control de flujo: if, else, switch, case, default</li> <li>Ciclos: for, while, do, break, continue</li> <li>Declaraci\u00f3n de variables y funciones: var, let, const, function, return</li> <li>Manipulaci\u00f3n de objetos y clases: class, extends, constructor, super</li> <li>Valores especiales: null, undefined, true, false</li> <li>Operaciones asincr\u00f3nicas: async, await</li> <li>Operadores de importaci\u00f3n/exportaci\u00f3n: import, export</li> <li>Operadores l\u00f3gicos y aritm\u00e9ticos: new, delete, typeof, instanceof</li> </ul> <p>PRECAUCI\u00d3N</p> <p>Estas palabras son utilizadas por el lenguaje para funciones espec\u00edficas y su uso como nombres provocar\u00e1 errores.</p> <p></p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#12-comentarios-en-javascript","title":"1.2. Comentarios en JavaScript","text":"<p>Su prop\u00f3sito es proporcionar explicaciones o notas para los desarrolladores que leen el c\u00f3digo. En JavaScript, los comentarios pueden ser de dos tipos.</p> <ul> <li>Comentarios de una sola l\u00ednea</li> <li>Comentarios de varias l\u00edneas </li> </ul>"},{"location":"devcamp/checkpoint-07/introduccion-js/#comentarios-de-una-sola-linea","title":"Comentarios de una sola l\u00ednea:","text":"<p>Los comentarios de una sola l\u00ednea comienzan con dos barras inclinadas (<code>//</code>). Todo el texto que sigue a estas barras en la misma l\u00ednea es considerado un comentario y es ignorado por el int\u00e9rprete de JavaScript.</p> ejemplo.js<pre><code>// Este es un comentario de una sola l\u00ednea\nlet nombre = \"Roberto\"; // Tambi\u00e9n se puede usar al final de una l\u00ednea de c\u00f3digo\n</code></pre>"},{"location":"devcamp/checkpoint-07/introduccion-js/#comentarios-de-varias-lineas","title":"Comentarios de varias l\u00edneas:","text":"<p>Los comentarios de varias l\u00edneas se encierran entre <code>/*</code> y <code>*/</code>. Todo el texto dentro de estos delimitadores es considerado un comentario y es ignorado por el int\u00e9rprete.</p> <p>ejemplo.js<pre><code>/*\nEste es un comentario de varias l\u00edneas.\nPuede abarcar m\u00faltiples l\u00edneas.\nEs \u00fatil para explicaciones m\u00e1s largas o para desactivar bloques de c\u00f3digo.\n*/\nlet edad = 36;\n</code></pre> </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#13-como-usar-la-consola-en-javascript","title":"1.3. C\u00f3mo usar la consola en JavaScript","text":"<p>En JavaScript la consola se usa cont\u00ednuamente. El m\u00e9todo mas utilizado es <code>console.log</code>. Su prop\u00f3sito principal es imprimir informaci\u00f3n en la consola.</p> <p>Veamos el siguiente ejemplo:</p> ejemplo.js<pre><code>let mensaje = '\u00a1Hola mundo!';\n\n// varios ejemplos de salida:\nconsole.log(mensaje); // \u00a1Hola mundo!\nconsole.log(`Este es mi primer ${mensaje}`); // Este es mi primer \u00a1Hola mundo!\n</code></pre> <p>Esto es \u00fatil para verificar que las variables contienen los valores esperados y que el flujo de ejecuci\u00f3n es el correcto. </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#14-como-usar-la-ventana-emergente-en-javascript","title":"1.4. C\u00f3mo usar la ventana emergente en JavaScript","text":"<p>En JavaScript la ventana emergente se usa cont\u00ednuamente. El m\u00e9todo mas utilizado es <code>alert</code>. Su prop\u00f3sito principal es imprimir informaci\u00f3n en la ventana emergente.</p> <p>Veamos el siguiente ejemplo:</p> ejemplo.js<pre><code>let mensaje = '\u00a1Hola mundo!';\n\n// varios ejemplos de salida:\nalert(mensaje) // \u00a1Hola mundo!\nalert(`Este es mi primer ${mensaje}`); // Este es mi primer \u00a1Hola mundo!\n</code></pre> <p>Esto es \u00fatil para verificar que las variables contienen los valores esperados y que el flujo de ejecuci\u00f3n es el correcto. </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#15-indentacion-de-codigo","title":"1.5. Indentaci\u00f3n de c\u00f3digo","text":"<p>A medida que escribimos l\u00edneas de c\u00f3digo en nuestro programa, este se ir\u00e1 complicando y nos tomar\u00e1 m\u00e1s tiempo leer lo que hemos hecho y comprobar si hay errores o buscar como solucionarlos. Sin embargo, para mejorar la rapidez con la que leemos y entendemos el c\u00f3digo, una buena pr\u00e1ctica es usar la indentaci\u00f3n.</p> <p>A la hora de indentar c\u00f3digo hay dos opciones:</p> <ul> <li>Usar espacios</li> <li>Usar tabuladores</li> </ul> <p>Utilizar una u otra estrategia de tabulaci\u00f3n depende del programador, pero lo importante es siempre utilizar la misma. En mis ejemplos, suelo utilizar indentaci\u00f3n a 4 espacios porque me resulta m\u00e1s pr\u00e1ctico leer.  </p>"},{"location":"devcamp/checkpoint-07/operador-ternario-js/","title":"5. \u00bfQu\u00e9 es un operador ternario?","text":"<p>El operador ternario es una forma abreviada de la estructura if...else y es \u00fatil cuando queremos tomar decisiones basadas en una condici\u00f3n.</p> <p>Se compone de tres partes:</p> <ul> <li>Una expresi\u00f3n condicional</li> <li>Una expresi\u00f3n que se eval\u00faa si la condici\u00f3n es verdadera</li> <li>Una expresi\u00f3n que se eval\u00faa si la condici\u00f3n es falsa</li> </ul> <p>La sintaxis b\u00e1sica del operador ternario es la siguiente:</p> ejemplo.js<pre><code>condicion ? expresion_verdadera : expresion_falsa\n</code></pre> <ul> <li>condicion: Una expresi\u00f3n que se eval\u00faa como verdadera o falsa</li> <li>expresion_verdadera: La expresi\u00f3n que se ejecutar\u00e1 si condicion es verdadera</li> <li>expresion_falsa: La expresi\u00f3n que se ejecutar\u00e1 si condicion es falsa</li> </ul> ejemplo.js<pre><code>const edad = 36;\n\nconst mensaje = edad &gt;= 18 ? 'Eres mayor de edad' : 'Eres menor de edad';\n\nconsole.log(mensaje); // Salida: Eres mayor de edad\n</code></pre>"},{"location":"devcamp/checkpoint-07/operador-ternario-js/#51-anidamiento-de-operadores-ternarios","title":"5.1. Anidamiento de operadores ternarios","text":"<p>Es posible anidar operadores ternarios para expresiones condicionales m\u00e1s complejas. Los operadores ternarios encadenados (o anidados) hacen que el c\u00f3digo sea imposible de leer en algunos casos. Lo ideal seria usar switch/case o if/else en su lugar.</p> <p>Veamos un ejemplo:</p> ejemplo.js<pre><code>const calificacion = 8;\n\nconst resultado = calificacion &lt;   5 ? 'Suspenso' :\n                  calificacion &lt;   7 ? 'Aprobado' :\n                  calificacion &lt;   9 ? 'Notable' :\n                  calificacion &lt;  10 ? 'sobresaliente' :\n                  calificacion == 10 ? 'Matr\u00edcula de honor' :\n                                       'Introduzca un n\u00famero del 0 al 10';\n\nconsole.log(resultado); // Salida: Notable\n</code></pre> <p>IMPORTANTE</p> <p>Es importante mantener la legibilidad del c\u00f3digo al hacerlo.</p> <p> </p>"},{"location":"devcamp/checkpoint-07/que-es-this-js/","title":"7. \u00bfQu\u00e9 es la palabra clave \"this\" en JS?","text":"<p>Una de las caracter\u00edsticas de JavaScript que m\u00e1s confusi\u00f3n genera es la palabra clave this. M\u00e1s concretamente a qu\u00e9 o qui\u00e9n hace referencia y en qu\u00e9 circunstancias.</p> <p>this es una palabra clave que se utiliza mucho dentro de las clases para hacer referencia al objeto instanciado. Cuando se crea una funci\u00f3n dentro de una clase, esta funci\u00f3n  pasa a llamarse m\u00e9todo. El primer m\u00e9todo siempre sera el constructor, se encarga de declarar atributos, el this hace referencia a cualquier atributo que se le pase dentro de esa misma clase. si se utilizara fuera de \u00e9sta clase, ar\u00eda referencia a otra cosa.</p> <p>Veamos un ejemplo de clase:</p> <p>ejemplo.js<pre><code>class Cliente {\n\n    provincia = 'Guipuzcoa'; // atributo global / variable de clase\n\n    constructor(nombre, apellido, telefono) {\n        this.nombre = nombre;\n        this.apellido = apellido;\n        this.telefono = telefono;\n    }\n\n    datos() {\n        return 'Nombre: ' + this.nombre + '\\n' +\n               'Apellido: ' + this.apellido + '\\n' +\n               'Tel\u00e9fono: ' + this.telefono + '\\n' +\n               'Provincia: ' + this.provincia;\n    }\n}\n\nconst cli_1 = new Cliente('Nerea', 'Zelaieta', '666-666-666');\nconst cli_2 = new Cliente('Roberto', 'Mendiburu', '333-666-666');\n\nconsole.log(cli_1.datos());\nconsole.log(cli_2.datos());\n\n/*\nSalida: Nombre: Nerea\n        Apellido: Zelaieta\n        Tel\u00e9fono: 666-666-666\n        Provincia: Guipuzcoa\n        Nombre: Roberto\n        Apellido: Mendiburu\n        Tel\u00e9fono: 333-666-666\n        Provincia: Guipuzcoa\n*/\n</code></pre> </p> <p>Veamos un ejemplo de objeto:</p> ejemplo.js<pre><code>const usuario = {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu',\n    telefono: '333-666-666',\n\n    mostrar() {\n        console.log(this);\n    }\n};\n\nusuario.mostrar();\n\n/*\nSalida: Nombre: Roberto\n        Apellido: Mendiburu\n        Tel\u00e9fono: 333-666-666\n        mostrar: [Function: mostrar]\n*/\n</code></pre> <p>Cuando se crea una funci\u00f3n dentro de un objeto, esta funci\u00f3n  pasa a llamarse m\u00e9todo. El this hace referencia al objeto que lo envuelve. La ejecuci\u00f3n de este c\u00f3digo nos imprime el objeto completo que el this hace referencia.  </p> <p>Veamos un ejemplo simple:</p> ejemplo.js<pre><code>function usuario() {\n    console.log(this);\n}\n\nconsole.log(usuario()); // Object [global]\n\n/*\nSalida: Object [global]\n*/\n</code></pre> <p>Hace referencia al objeto global.</p> <p> </p>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/","title":"2. \u00bfCu\u00e1les son algunos tipos de datos JS?","text":"<p>Los tipos de datos en JavaScript son atributos que determinan el tipo de valor que puede contener una variable. Estos tipos de datos son utilizados para representar diferentes tipos de informaci\u00f3n.</p> <p>JavaScript es un lenguaje de programaci\u00f3n de tipado din\u00e1mico, lo que significa que no es necesario declarar expl\u00edcitamente el tipo de una variable al momento de su creaci\u00f3n. Pero eso no significa que JavaScript no tenga tipos. Simplemente el tipo se determina autom\u00e1ticamente cuando se asigna un valor. </p>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#21-tipos-de-datos-primitivos","title":"2.1. Tipos de datos primitivos","text":"<p>Los tipos de datos primitivos son aquellos que representan valores individuales y no tienen m\u00e9todos o propiedades. Son inmutables, lo que significa que no se pueden cambiar una vez que se han creado.</p> <ul> <li>Cadena de texto (string)</li> <li>N\u00fameros (number)</li> <li>Booleano (boolean)</li> <li>Valor null</li> <li>Valor undefined </li> </ul>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#string","title":"string:","text":"<p>El tipo de datos <code>string</code> representa una secuencia de caracteres, como texto o palabras. Las cadenas se deben encerrar entre comillas simples <code>' '</code> o dobles <code>\" \"</code>.</p> <pre><code>let nombre = 'Roberto';\nlet mensaje = \"\u00a1Hola mundo!\";\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#number","title":"number:","text":"<p>El tipo de datos <code>number</code> en JavaScript representa tanto n\u00fameros enteros como de punto flotante.</p> <pre><code>let edad = 36;\nlet precio = 99.95;\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#boolean","title":"boolean:","text":"<p>El tipo de datos <code>boolean</code> representa un valor de verdad, que puede ser <code>true</code> (verdadero) o <code>false</code> (falso). Es \u00fatil en expresiones condicionales y l\u00f3gicas.</p> <pre><code>let esHombre = true;\nlet esMujer = false;\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#null","title":"null:","text":"<p>En JavaScript, <code>null</code> es un valor especial que representa la ausencia intencional de cualquier objeto o valor.</p> <pre><code>let Unidades = null;\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#undefined","title":"undefined:","text":"<p>El valor <code>undefined</code> indica que una variable ha sido declarada pero a\u00fan no se le ha asignado ning\u00fan valor.</p> <p><pre><code>let unidades;\nconsole.log(unidades); // Salida: undefined\n</code></pre> </p>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#22-tipos-de-datos-compuestos","title":"2.2. Tipos de datos compuestos","text":"<p>Los tipos de datos compuestos en JavaScript son aquellos que pueden contener m\u00faltiples valores y tienen m\u00e9todos y propiedades. Son mutables, lo que significa que pueden cambiar despu\u00e9s de su creaci\u00f3n.</p> <ul> <li>Arrays (array)</li> <li>Objetos (object) </li> </ul>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#array","title":"array:","text":"<p>Los arrays en JavaScript son objetos especiales que permiten almacenar m\u00faltiples valores en una sola variable, indexados num\u00e9ricamente.</p> <pre><code>let animales = ['perro', 'oveja', 'caballo'];\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#object","title":"object:","text":"<p>Los objetos en JavaScript son colecciones de pares clave-valor, donde la clave es una cadena (o s\u00edmbolo) y el valor puede ser cualquier tipo de dato, incluidos otros objetos.</p> <p><pre><code>let persona = {\n    nombre: 'Roberto',\n    edad: 36,\n    casado: true\n};\n</code></pre> </p>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/","title":"3. \u00bfCu\u00e1les son las tres funciones de String en JS?","text":"<p>JavaScript ofrece numerosas funciones predefinidas que facilitan el trabajo con cadenas de texto (string). Entre las posibilidades que ofrecen estas funciones tenemos el <code>replace()</code>, <code>toLowerCase()</code>, <code>toUpperCase()</code>, etc.</p>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/#replace","title":"replace():","text":"<p>El m\u00e9todo .replace acepta dos argumentos: la cadena que se reemplazar\u00e1 y con qu\u00e9 se reemplazar\u00e1 la cadena. Las cadenas en JavaScript son inmutables, el m\u00e9todo <code>replace()</code> no cambia el valor de la cadena especificada, nos devuelve un nuevo valor.</p> ejemplo.js<pre><code>let nombre = 'Roberto@gmail.com';\n\nlet resultado = nombre.replace('@gmail.com', '');\n\nconsole.log(resultado); // Salida: Roberto\nconsole.log(nombre); // Salida: Roberto@gmail.com\n</code></pre>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/#tolowercase","title":"toLowerCase():","text":"<p>Las cadenas en JavaScript son inmutables, el m\u00e9todo <code>toLowerCase()</code> no cambia el valor de la cadena especificada, nos devuelve un nuevo valor.</p> ejemplo.js<pre><code>let nombre = 'Roberto';\n\nlet resultado = nombre.toLowerCase();\n\nconsole.log(resultado); // Salida: roberto\nconsole.log(nombre); // Salida: Roberto\n</code></pre>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/#touppercase","title":"toUpperCase():","text":"<p>Las cadenas en JavaScript son inmutables, el m\u00e9todo <code>toUpperCase()</code> no cambia el valor de la cadena especificada, nos devuelve un nuevo valor.</p> <p>ejemplo.js<pre><code>let nombre = 'Roberto';\n\nlet resultado = nombre.toUpperCase();\n\nconsole.log(resultado); // Salida: ROBERTO\nconsole.log(nombre); // Salida: Roberto\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/","title":"\u00cdndice","text":"Checkpoint 08"},{"location":"devcamp/checkpoint-08/#documentacion-javascript","title":"Documentaci\u00f3n JavaScript","text":"<p>\u00cdNDICE DE CONTENIDOS</p> <ol> <li>\u00bfQu\u00e9 tipo de bucles hay en JS?</li> <li>\u00bfCu\u00e1les son las diferencias entre const, let y var?</li> <li>\u00bfQu\u00e9 es una funci\u00f3n de flecha?</li> <li>\u00bfQu\u00e9 es la deconstrucci\u00f3n de variables?</li> <li>\u00bfQu\u00e9 hace el operador de extensi\u00f3n en JS?</li> <li>\u00bfQu\u00e9 es la programaci\u00f3n orientada a objetos?</li> <li>\u00bfQu\u00e9 es una promesa en JS?</li> <li>\u00bfQu\u00e9 hacen async y await por nosotros? </li> </ol>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/","title":"3. \u00bfQu\u00e9 es una funci\u00f3n de flecha?","text":"<p>Las funciones flecha permiten escribir funciones de manera m\u00e1s concisa y legible, especialmente cuando se trata de funciones cortas o funciones de una sola l\u00ednea.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#sintaxis-de-una-funcion-flecha","title":"Sintaxis de una funci\u00f3n flecha:","text":"<ul> <li> <p>La sintaxis b\u00e1sica de una funci\u00f3n flecha es la siguiente: () =&gt; {}</p> <ul> <li>() Se utiliza para pasarle atributos a una funci\u00f3n</li> <li>=&gt; Se define como funci\u00f3n flecha, es una funci\u00f3n an\u00f3nima sin nombre</li> <li>{} Se utiliza para envolver el cuerpo de la funci\u00f3n  </li> </ul> </li> <li> <p>Las funci\u00f3nes flecha, pueden ser de varios tipos:</p> <ul> <li>Multil\u00ednea</li> <li>Monol\u00ednea</li> </ul> </li> </ul> <p> Una funci\u00f3n flecha es simplemente una expresi\u00f3n de funci\u00f3n compacta frente a una expresi\u00f3n de funci\u00f3n tradicional. A diferencia de una declaraci\u00f3n de funci\u00f3n, las de expresi\u00f3n de funci\u00f3n siempre deben acabar en punto y coma.</p> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#31-tipos-de-funciones","title":"3.1. Tipos de funci\u00f3nes:","text":"<p>Antes de nada, veamos una comparaci\u00f3n entre diferentes tipos de funciones, esto es de vital importancia para entender como funciona cada uno, en que se relacionan y en que situaciones es conveniente utilizar uno u otro.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-1","title":"Ejemplo 1","text":"<p>En este ejemplo, vamos a comparar 4 tipos de funci\u00f3n equivalentes y ver en que se diferencian. Para ello, hemos utilizado una declaraci\u00f3n de funci\u00f3n, una expresi\u00f3n de funci\u00f3n, una expresi\u00f3n de funci\u00f3n flecha y una expresi\u00f3n de funci\u00f3n flecha conciso. Ninguno incluye atributos.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#declaracion-de-funcion-multilinea-llamada","title":"Declaraci\u00f3n de funci\u00f3n (multil\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una declaraci\u00f3n de funci\u00f3n, no lleva punto y coma al final.</li> </ul> <pre><code>function cliente() {\n    console.log('\u00a1Bienvenido!');\n}\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-multilinea-llamada","title":"Expresi\u00f3n de funci\u00f3n (multil\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = function() {\n    console.log('\u00a1Bienvenido!');\n};\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-multilinea-llamada","title":"Expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = () =&gt; {\n    console.log('\u00a1Bienvenido!');\n};\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-conciso-monolinea-llamada","title":"Expresi\u00f3n de funci\u00f3n flecha conciso (monol\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = () =&gt; console.log('\u00a1Bienvenido!');\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-2","title":"Ejemplo 2","text":"<p>Veamos el segundo ejemplo, esta vez, le pasamos 1 atributo en la funci\u00f3n:</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-multilinea-1-atributo","title":"funci\u00f3n flecha (multil\u00ednea) + 1 atributo:","text":"<ul> <li>Las funciones flecha con un solo atributo, los par\u00e9ntesis pueden omitirse.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre) =&gt; { // antes\n    console.log(`${nombre}`);\n};\n\nconst cliente = nombre =&gt; { // despues\n    console.log(`${nombre}`);\n};\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-monolinea-1-atributo","title":"funci\u00f3n flecha conciso (monol\u00ednea) + 1 atributo:","text":"<ul> <li>Las funciones flecha con un solo atributo, los par\u00e9ntesis pueden omitirse.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre) =&gt; { console.log(`${nombre}`) }; // antes\n\nconst cliente = nombre =&gt; console.log(`${nombre}`); // despues\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-3","title":"Ejemplo 3","text":"<p>Veamos el tercer ejemplo, esta vez, le pasamos 1 argumento en la llamada:</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-multilinea-1-argumento-en-la-llamada","title":"funci\u00f3n flecha (multil\u00ednea) + 1 argumento en la llamada:","text":"<pre><code>const cliente = nombre =&gt; {\n    console.log(`${nombre}`);\n};\n\ncliente('Roberto'); // Salida: Roberto\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-monolinea-1-argumento-en-la-llamada","title":"funci\u00f3n flecha conciso (monol\u00ednea) + 1 argumento en la llamada:","text":"<pre><code>const cliente = nombre =&gt; console.log(`${nombre}`);\n\ncliente('Roberto'); // Salida: Roberto\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-4","title":"Ejemplo 4","text":"<p>Veamos el cuarto ejemplo, a diferencia del segundo ejemplo, aqui le pasamos 2 atributos en la funci\u00f3n y 2 argumentos en la llamada a la funci\u00f3n.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-2-atributos-2-argumentos","title":"funci\u00f3n flecha + 2 atributos + 2 argumentos:","text":"<ul> <li>Las funciones flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre, apellido) =&gt; {\n    console.log(`${nombre} ${apellido}`);\n};\n\ncliente('Roberto', 'Mendiburu'); // Salida: Roberto Mendiburu\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-2-atributos-2-argumentos","title":"funci\u00f3n flecha conciso + 2 atributos + 2 argumentos:","text":"<ul> <li>Las funciones flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre, apellido) =&gt; console.log(`${nombre} ${apellido}`);\n\ncliente('Roberto', 'Mendiburu'); // Salida: Roberto Mendiburu\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#32-tipos-de-funciones-flecha","title":"3.2. Tipos de funci\u00f3nes flecha:","text":"<p>Las funciones flecha (arrow functions) son indudablemente una de las caracter\u00edsticas m\u00e1s populares de ES6 (EcmaScript 6). Ellas introducen una nueva forma de escribir funciones concisas. Es importante notar que las funciones flecha son an\u00f3nimas, lo que significa que no tienen nombre y no se pueden utilizar como metodos ni constructores dentro de una clase.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#caracteristicas","title":"Caracter\u00edsticas:","text":"<ul> <li>Siempre son expresiones.</li> <li>Siempre deberemos asignar la expresi\u00f3n a una variable.</li> <li>Pueden ser de varios tipos:<ul> <li>Expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea)</li> <li>Expresi\u00f3n de funci\u00f3n flecha conciso (monol\u00ednea) </li> </ul> </li> </ul>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-multilinea","title":"Expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea):","text":"<p>Esta funci\u00f3n, esta construido en bloque. Al no estar toda la funci\u00f3n en una misma l\u00ednea, se trataria de una expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea) y no obtendria las caracter\u00edsticas de un (monol\u00ednea).</p> <ul> <li>Al ser una expresi\u00f3n de funci\u00f3n, debe asignarse a una variable.</li> <li>La expresi\u00f3n de funci\u00f3n flecha elimina la palabra clave function.</li> <li>Una funci\u00f3n flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, el return debe estar presente.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <p><pre><code>const sumar = (a, b) =&gt; {\n    return a + b;\n};\n\nconst resultado = sumar(2, 6);\nconsole.log(resultado); // Salida: 8\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-de-funcion-flecha-3-atributos-3-argumentos","title":"Ejemplo de funci\u00f3n flecha + 3 atributos + 3 argumentos:","text":"<p><pre><code>const cliente = (nombre, apellido, telefono) =&gt; {\n    return `${nombre} ${apellido} ${telefono}`;\n};\n\nconst resultado = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado); // Salida: Roberto Mendiburu 666-666-666\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-conciso-monolinea","title":"Expresi\u00f3n de funci\u00f3n flecha conciso (monol\u00ednea):","text":"<p>En este ejemplo, podemos observar c\u00f3mo la expresi\u00f3n de funci\u00f3n flecha conciso elimina la necesidad de escribir la palabra clave function, las llaves {} y la declaraci\u00f3n return, resultando en una expresi\u00f3n m\u00e1s compacta.</p> <ul> <li>Al ser una expresi\u00f3n de funci\u00f3n, debe asignarse a una variable.</li> <li>La expresi\u00f3n de funci\u00f3n flecha elimina la palabra clave function.</li> <li>Una funci\u00f3n flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una funci\u00f3n monol\u00ednea, el return puede omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <p><pre><code>const sumar = (a, b) =&gt; a + b;\n\nconst resultado = sumar(2, 6);\nconsole.log(resultado); // Salida: 8\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-de-funcion-flecha-conciso-3-atributos-3-argumentos","title":"Ejemplo de funci\u00f3n flecha conciso + 3 atributos + 3 argumentos:","text":"<pre><code>const cliente = (nombre, apellido, telefono) =&gt; `${nombre} ${apellido} ${telefono}`;\n\nconst resultado = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado); // Salida: Roberto Mendiburu 666-666-666\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#33-analisis-de-funciones","title":"3.3. An\u00e1lisis de funciones:","text":"<p>Veamos un ejemplo con las 3 opciones \ud83d\udc47</p> <ul> <li>Opci\u00f3n 1: Funci\u00f3n tradicional</li> <li>Opci\u00f3n 2: Funci\u00f3n flecha</li> <li>Opci\u00f3n 3: Funci\u00f3n flecha conciso</li> </ul> ejemplo.js<pre><code>// Opci\u00f3n 1:\n// Declaraci\u00f3n de funci\u00f3n + 3 atributos - multil\u00ednea\nfunction cliente(nombre, apellido, telefono) {\n    return `${nombre} ${apellido} ${telefono}`;\n}\n\nconst resultado_1 = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado_1); // Salida: Roberto Mendiburu 666-666-666\n\n\n\n// Opci\u00f3n 2:\n// Expresi\u00f3n de funci\u00f3n flecha + 3 atributos - multil\u00ednea\nconst cliente = (nombre, apellido, telefono) =&gt; {\n    return `${nombre} ${apellido} ${telefono}`;\n};\n\nconst resultado_2 = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado_2); // Salida: Roberto Mendiburu 666-666-666\n\n\n\n// Opci\u00f3n 3:\n// Expresi\u00f3n de funci\u00f3n flecha conciso + 3 atributos - monol\u00ednea\nconst cliente = (nombre, apellido, telefono) =&gt; `${nombre} ${apellido} ${telefono}`;\n\nconst resultado_3 = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado_3); // Salida: Roberto Mendiburu 666-666-666\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#analicemos-las-diferencias","title":"\ud83d\udd75\ufe0f Analicemos las diferencias:","text":"<p> Las funciones flecha pueden componerse de m\u00e1s de una l\u00ednea, lo cual ya nos obligar\u00e1 a emplear las llaves y el return.</p> <p> </p>"},{"location":"instalacion/gh_deploy/","title":"Despliegue de proyecto local a GitHub Pages","text":"<p>01. Accede a GitHub y crea un repositorio nuevo.</p> <p> </p> <p>02. Escribe el mismo nombre del proyecto local, deja en p\u00fablico y pulsa el bot\u00f3n crear repositorio.</p> <p> </p> <p>03. Muestra los comandos y la URL remota del repositorio creado.</p> <p> </p> <p>04. Comandos para sincrinizar por primera vez GIT con GitHub desde la terminal de VSCode.</p> <ul> <li>(git init) Inicia el GIT</li> <li>(git config --global user.name \"nombre_usuario\") Usuario de GitHub</li> <li>(git config --global user.email \"micorreo@ejemplo.com\") Email de GitHub </li> </ul> <p>05. Comandos de terminal mas utilizados en GIT.</p> <ul> <li>(git init) Inicia el GIT</li> <li>(git add .) Agrega todos los archivos al GIT</li> <li>(git add ejemplo.html) Agrega los archivos indibidualmente al GIT</li> <li>(git commit -m \"inserta el mensaje aqui\") Agrega un commit al GIT</li> <li>(git branch -M main) Fuerza a renombrar la rama local actual por (main) actual main</li> <li>(git remote add origin https://github.com/usuario/mi_repositorio.git) Agrega la url remota del repositorio GitHub</li> <li>(git remote -v) Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>(git status) Muestra el estado de los procesos GIT</li> <li>(git push -u origin main) Sube los archivos a la rama main del repositorio GitHub</li> </ul> <p>El orden de ejecuci\u00f3n</p> <p>El orden de ejecuci\u00f3n, variara en funci\u00f3n de lo que quieras hacer. Por l\u00f3gica, primero se inicia el GIT, se agregan los archivos, se envia un commit, la verificaci\u00f3n de estado y la comunicaci\u00f3n con el repositorio solo nos da informaci\u00f3n, no hace ningun cambio en el repositorio.</p> <p></p> <p>06. Entra en VSCode y abre una terminal nueva.</p> <ul> <li>Desde la carpeta de trabajo \"proyecto_docs\", activa el entorno virtual (.envscriptsactivate)</li> <li>Accede a la carpeta del proyecto \"docs\" y lanza el comando (mkdocs build) para compilar, \u00e9sto creara una nueva carpeta llamada site donde compilara todo el proyecto.</li> </ul> <p> </p> <p>07. Desde la carpeta del proyecto \"docs\", abre la terminal y prepara el repositorio GIT para subir al repositorio GitHub.</p> <ul> <li>Ejecuta el comando (git init)</li> <li>Ejecuta el comando (git add .)</li> <li>Ejecuta el comando (git commit -m \"despliegue\")</li> <li>Ejecuta el comando (git branch -M main)</li> <li>Ejecuta el comando (git remote add origin https://github.com/zuluta/docs.git)</li> <li>Ejecuta el comando (git remote -v)</li> <li>Ejecuta el comando (git status)</li> <li>Ejecuta el comando (git push -u origin main)</li> </ul> <p>NOTA</p> <p>La rama \"master\" y \"main\" son lo mismo. Hace unos a\u00f1os, la comunidad de software decidi\u00f3 cambiar el nombre de la rama principal de master a main. Verifica con el comando (git branch) las ramas existentes en tu repositorio local y si existe la rama master, pasa a la rama master con el comando (git switch master) y cambia el nombre de la rama con el comando (git branch -m main) o (git branch -M main) para forzarlo. De este modo, solo se dejara una rama principal con el nombre \"main\" por repositorio.</p> <p> </p> <p>08. Entra al repositorio y verifica si se subieron bien los archivos a GitHub en la rama main.</p> <p> </p> <p>09. GitHub permite crear una pagina web gratis desde el repositorio.</p> <ul> <li>Ejecuta el comando (mkdocs gh-deploy)</li> </ul> <p>Este comando es espec\u00edfico de mkdocs para GitHub. Este comando creara de forma autom\u00e1tica una nueva rama gh_pages en el mismo repositorio del proyecto para poder desplegar GitHub Pages.</p> <p>10. Entra al repositorio de GitHub y verifica si se creo la rama \"gh-pages\".</p> <p> </p> <p>11. Entra en Settings, luego en Pages, donde pone Branch, selecciona la rama \"gh-pages\" y la carpeta \"(root)\". Pulsa el bot\u00f3n de guardar y espera unos segundos a que se active la p\u00e1gina.</p> <p> </p> <p>12. Entra en Settings, luego en Pages, donde pone GitHub Pages, verifica que la p\u00e1gina este operativa.</p> <p> </p> <p>13. Si necesitas actualizar GitHub Pages por nuevos cambios, ejecuta lo siguiente.</p> <ul> <li>Desde la carpeta de trabajo \"proyecto_docs\", activa el entorno virtual (.envscriptsactivate)</li> <li>Accede a la carpeta del proyecto \"docs\" y lanza el comando (mkdocs build)</li> <li>Ejecuta el comando (git init)</li> <li>Ejecuta el comando (git add .)</li> <li>Ejecuta el comando (git commit -m \"actualizar contenido\")</li> <li>Ejecuta el comando (git branch)</li> <li>Ejecuta el comando (git switch main)</li> <li>Ejecuta el comando (git remote add origin https://github.com/zuluta/docs.git)</li> <li>Ejecuta el comando (git remote -v)</li> <li>Ejecuta el comando (git status)</li> <li>Ejecuta el comando (git push -u origin main) Se sube a la rama \"main\" del repositorio donde se guarda el proyecto</li> <li>Ejecuta el comando (mkdocs gh-deploy) Compila y despliega a la rama \"gh-pages\" del repositorio. \u00c9sta rama, va enlazado al sitio web de GitHub Pages</li> <li>Verifica los cambios en la p\u00e1gina  </li> </ul>"},{"location":"instalacion/mkdocs/","title":"Instalar MkDocs con Python y virtualenv","text":"<p>01. Verifica si Python y virtualenv est\u00e1n instalados de forma global y si no aparecen, instalalos.</p> <p> </p> <p>02. Entra en \u201cescritorio\u201d y crea una carpeta de trabajo que se llame (proyecto_docs) con el comando (mkdir proyecto_docs).</p> <p>03. Entra en \u201cproyecto_docs\u201d y crea una carpeta virtual que se llame (env).</p> <p>04. Act\u00edva la carpeta \u201cenv\u201d en modo virtual con el comando (.\\env\\scripts\\activate).</p> <p>05. Instala la librer\u00eda dentro de la carpeta \u201cenv\u201d con el comando (pip install mkdocs).</p> <p> </p> <p>06. Verifica si la librer\u00eda mkdocs se instal\u00f3 bien.</p> <p> </p> <p>07. Crea nuevo proyecto de mkdocs que se llame (mi-documentacion).</p> <p>08. Verifica si el proyecto se cre\u00f3 bien y desactiva el entorno virtual con el comando (deactivate). Cierra la terminal.</p> <p> </p> <p>09. Abre VSCode y carga la carpeta del escritorio \u201cproyecto_docs\u201d desde el menu superior (Archivo / Abrir carpeta\u2026).</p> <p> </p> <p>10. Dentro del proyecto \u201cmi_documentacion\u201d, abre el archivo que pone index.md.</p> <p>11. Abre una nueva terminal desde el menu superior (... / Terminal / Nuevo terminal) para ejecutar el servidor en local. Recordar que la librer\u00eda mkdocs se instal\u00f3 en un entorno virtual por lo que sera necesario primero activar el entorno virtual desde la carpeta de trabajo \u201cproyecto_docs\u201d con el comando (.\\env\\Scripts\\activate). Luego entra en la carpeta del proyecto \u201cmi-documentaci\u00f3n\u201d y desde ah\u00ed, ejecutar el siguiente comando (mkdocs serve), esto ejecutara el servidor local.</p> <p> </p> <p>12. Para verificar, copia la URL del servidor y abre en el navegador, le aparecer\u00e1 la p\u00e1gina de bienvenida por defecto.</p> <p> </p> <p>13. Con esto, ya tendrias instalado la librer\u00eda mkdocs en un entorno virtual y creado el proyecto para empezar a editar tu propia documentaci\u00f3n, porfolio, o lo que quieras de forma local.</p> <p>14. Ahora que ya tenemos mkdocs en marcha, toca instalar un tema desarrollado para mkdocs que le va dar un dise\u00f1o mucho mas moderno. Abre la terminal de VSCode, pulsa (ctrl + c) para detener el servidor, activa el entorno virtual, accede a la carpeta \u201cmi-documentaci\u00f3n\u201d y desde ah\u00ed ejecuta el comando (pip install mkdocs-material). Una vez terminada la instalaci\u00f3n, abre el archivo \u201cmkdocs.yml\u201d y modifica el nombre del tema. En este caso, se llama material. El tema que viene instalado por defecto se llama \u201creadthedocs\u201d.</p> <p> </p> <p>15. Para finalizar, recarga la p\u00e1gina y veras un aspecto mucho mas moderno de tu sitio web.</p> <p> </p>"},{"location":"programacion/comandos_git/","title":"GIT desde la l\u00ednea de comandos","text":""},{"location":"programacion/comandos_git/#comandos-basicos-para-trabajar-en-localhost","title":"Comandos b\u00e1sicos para trabajar en localhost:","text":"<ul> <li>git init Iniciar GIT</li> <li>git add . Agrega todos los archivos al GIT</li> <li>git commit -m \"primer commit\" Agrega un commit al GIT</li> </ul>"},{"location":"programacion/comandos_git/#comandos-para-sincrinizar-por-primera-vez-git-con-github-desde-terminal-de-vscode","title":"Comandos para sincrinizar por primera vez GIT con GitHub desde terminal de VSCode:","text":"<ul> <li>git init Iniciar GIT</li> <li>git config --global user.name \"nombre_usuario\" Usuario de GitHub</li> <li>git config --global user.email \"micorreo@ejemplo.com\" Email de GitHub</li> </ul>"},{"location":"programacion/comandos_git/#comandos-basicos-para-subir-nuestro-proyecto-localhost-al-repositorio-de-github","title":"Comandos basicos para subir nuestro proyecto localhost al repositorio de GitHub:","text":"<ul> <li>git init Iniciar GIT</li> <li>git add . Agrega todos los archivos al GIT</li> <li>git commit -m \"primer commit\" Agrega un commit al GIT</li> <li>git branch -M main Fuerza a renombrar la rama local actual por (main) actual main</li> <li>git remote add origin https://github.com/usuario/mi_repositorio.git Crea una conexi\u00f3n remota llamada origin con el repositorio de GitHub</li> <li>git remote -v Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>git status Muestra el estado de los procesos GIT</li> <li>git push -u origin main Sube los archivos a la rama main remoto de GitHub</li> </ul>"},{"location":"programacion/comandos_git/#comandos-utiles","title":"Comandos \u00fatiles:","text":"<ul> <li>git status Muestra el estado de los procesos GIT</li> <li>git add ejemplo.html Agrega los archivos indibidualmente al GIT</li> <li>git remote -v Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>git log Muestra el hist\u00f3rico de commits</li> <li>git log -n 2 Muestra los \u00faltimos 2 commits</li> <li>git log prueba.html Muestra los commits del archivo (prueba.html)</li> <li>git switch main Cambia de la rama actual a la rama (main)</li> <li>git branch branch-test Crea una nueva rama (branch-test) a partir de la rama actual</li> <li>git branch -m branch-test Renombra la rama local actual por (branch-test) actual branch-test</li> <li>git branch -M branch-test Fuerza a renombrar la rama local actual por (branch-test) actual branch-test</li> <li>git branch Muestra todas las ramas locales y distingue con un (*) la rama actual</li> <li>git branch --list Muestra todas las ramas locales y distingue con un (*) la rama actual</li> <li>git branch -r Muestra todas las ramas del repositorio remoto</li> <li>git branch -a Muestra todas las ramas, tanto locales como remotas y distingue con un (*) la rama actual</li> <li>git branch --show-current Muestra la rama actual</li> <li>git branch -d branch-test Elimina la rama (branch-test) del repositorio local si esta fusionado con (main)</li> <li>git branch -D branch-test Fuerza a eliminar la rama (branch-test) del repositorio local este o no fusionado con (main)</li> <li>git branch --no-merged Muestra las ramas que estan sin fusionar con (main)</li> <li>git remote add origin https://github.com/usuario/mi_repositorio.git Crea una conexi\u00f3n remota llamada origin con el repositorio de GitHub</li> <li>git clone https://github.com/usuario/mi_repositorio.git Copia el repositorio remoto completo al local y se crea autom\u00e1ticamente una conexi\u00f3n remota llamada origin</li> <li>git pull origin main Actualiza la rama actual del repositorio local con los nuevos cambios efectuados en la rama (main) del repositorio remoto</li> <li>git merge branch-test Fusiona la rama (branch-test) a la rama actual del repositorio local</li> <li>git push origin --delete branch-test Elimina la rama (branch-test) del repositorio remoto</li> <li>git fetch --prune Elimina todas las referencias de seguimiento obsoletas del repositorio remoto</li> <li>git prune Elimina todas las referencias de seguimiento obsoletas del repositorio local</li> <li>git prune --verbose Elimina y muestra todas las referencias de seguimiento obsoletas que a eliminado del repositorio local</li> <li>git commit --amend -m \"texto corregido\" Edita el commit mas reciente y lo sustituye por uno nuevo</li> </ul>"},{"location":"programacion/comandos_git/#comandos-para-restaurar-o-resetear-a-un-commit-anterior-especifico","title":"Comandos para restaurar o resetear a un commit anterior espec\u00edfico:","text":"<ol> <li> <p>El m\u00e9todo (git restore): </p> <ul> <li>git log --oneline Muestra informaci\u00f3n simplificada de commits donde sale el hash de cada uno</li> <li>git restore --source 20cf9cb prueba.html Restaura el archivo (prueba.html) al commit mediante hash (20cf9cb)</li> </ul> </li> <li> <p>El m\u00e9todo (git reset):</p> <ul> <li>git log --oneline Muestra informaci\u00f3n simplificada de commits donde sale el hash de cada uno</li> <li>git reset 20cf9cb Regresa al commit mediante hash (20cf9cb)</li> </ul> <p>NOTA</p> <p>A pesar de que los commits ya no aparecen en el log, no se eliminan de GIT</p> <p></p> </li> </ol> <p>NOTA</p> <ul> <li>Para detener el servidor de \"mkdocs\" pulsa (ctrl + c)</li> <li>Para limpiar la consola utiliza el comando (cls) o (clear)</li> <li>Para salir de algun comando GIT pulsa (q)</li> </ul> <p>MALAS PR\u00c1CTICAS</p> <p>Est\u00e1 totalmente desaconsejado alterar el historial de commits, esto podria generar conflictos con los commits del repositorio remoto cuando se vaya hacer push o pull por cualquiera de los miembros, intenta siempre trabajar hacia adelante. Por lo general, est\u00e1 bien hacer este tipo de cambios en su propio repositorio local.</p> <p>BUENAS PR\u00c1CTICAS</p> <p>El mensaje del commit se escribe en presente, debe ser corto y conciso, no utilizar puntos ni puntos suspensivos al final.</p> <ol> <li>Ejemplo commit: <code>remove a random notification</code> </li> <li>Ejemplo commit: <code>add a new search feature</code></li> <li>Ejemplo commit: <code>change the default system color</code></li> <li>Ejemplo commit: <code>fix a problem with the topbar</code></li> </ol> <p></p> <p>Fuente: Sitio web oficial </p>"},{"location":"ruta_aprendizaje/desarrollador_full_stack/","title":"Desarrollador Full Stack","text":"<p>El programador Full Stack es el profesional encargado de desarrollar p\u00e1ginas web, tanto en el FRONTEND como en el BACKEND. Para desempe\u00f1ar sus funciones, que incluyen desde el dise\u00f1o de interfaces hasta el desarrollo de arquitecturas y la optimizaci\u00f3n del sitio web, debe combinar una serie de conocimientos t\u00e9cnicos y creativos.</p>"},{"location":"ruta_aprendizaje/desarrollador_full_stack/#diagrama","title":"Diagrama","text":"<p>Creado con app.diagrams.net </p>"}]}