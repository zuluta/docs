{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mi configuraci\u00f3n de MkDocs v1.6.1","text":""},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#mkdocsyml-config","title":"mkdocs.yml config","text":"<p><pre><code># project information\nsite_name: zuluta.dev\nsite_url: https://zuluta.github.io/docs/\n\nsite_author: zuluta\nsite_description: mkdocs\n\nextra:\n  homepage: https://zuluta.github.io/docs/\n\n# repository\nrepo_name: docs\nrepo_url: https://github.com/zuluta/docs/\n\n# navigation\nnav:\n  - Manual de programaci\u00f3n:\n      - Introducci\u00f3n: index.md\n      - Ruta de aprendizaje:\n          - Desarrollador Full Stack: ruta_aprendizaje/desarrollador_full_stack.md\n      - Programaci\u00f3n:\n          - Comandos GIT: programacion/comandos_git.md\n      - Instalaci\u00f3n:\n          - MkDocs + virtualenv: instalacion/mkdocs.md\n          - Despliegue a GitHub Pages: instalacion/gh_deploy.md\n      - Documentaci\u00f3n:\n          - Checkpoint 06: documentacion/checkpoint_06.md\n          - Checkpoint 07: documentacion/checkpoint_07.md\n\n# configuration\ntheme:\n  name: material\n  language: es\n  #favicon: images/favicon.png\n  icon:\n    logo: fontawesome/solid/hat-cowboy\n\n  font:\n    text: Roboto\n    code: Roboto Mono\n\n  features:\n    - navigation.tabs\n    #- navigation.sections\n    #- toc.integrate\n    #- navigation.expand\n    - navigation.top\n    - search.suggest\n    - search.highlight\n    #- content.tabs.link\n    #- content.code.annotation\n    - content.code.copy\n    #- header.autohide\n\n  palette:\n    # light mode\n    - scheme: default\n      primary: teal\n      accent: deep orange\n      toggle:\n        icon: material/weather-sunny\n        name: Light Mode\n\n    # dark mode\n    - scheme: slate\n      primary: teal\n      accent: deep orange\n      toggle:\n        icon: material/weather-night\n        name: Dark Mode\n\nmarkdown_extensions:\n  # extension para sintaxis de codigo\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.superfences\n\n  # extension para emojis\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n\n  # extension para crear note, abstract, info, tip, success, question, warning, failure, danger, bug, example, quote\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n\n  # extension para el resaltado de texto\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n\ncopyright:\n  Copyright &amp;copy; 2025 &lt;a href=\"https://github.com/zuluta\"  target=\"_blank\" rel=\"noopener\"&gt;zuluta&lt;/a&gt;\n</code></pre> </p>"},{"location":"documentacion/checkpoint_06/","title":"Checkpoint 06","text":""},{"location":"documentacion/checkpoint_06/#documentacion-python","title":"Documentaci\u00f3n Python \ud83d\udc0d","text":"<p>CONTENIDO</p> <p></p>"},{"location":"documentacion/checkpoint_06/#1-introduccion-al-uso-de-clases","title":"1. Introducci\u00f3n al uso de clases","text":""},{"location":"documentacion/checkpoint_06/#2-que-es-un-metodo-dunder","title":"2. \u00bfQu\u00e9 es un m\u00e9todo dunder?","text":""},{"location":"documentacion/checkpoint_06/#3-que-es-un-decorador","title":"3. \u00bfQu\u00e9 es un decorador?","text":""},{"location":"documentacion/checkpoint_06/#4-que-es-el-polimorfismo","title":"4. \u00bfQu\u00e9 es el polimorfismo?","text":""},{"location":"documentacion/checkpoint_06/#5-que-es-una-api","title":"5. \u00bfQu\u00e9 es una API?","text":""},{"location":"documentacion/checkpoint_06/#6-es-mongodb-una-base-de-datos-sql-o-nosql","title":"6. \u00bfEs MongoDB una base de datos SQL o NoSQL?","text":""},{"location":"documentacion/checkpoint_06/#1-introduccion-al-uso-de-clases_1","title":"<p>1. Introducci\u00f3n al uso de clases</p>","text":"<p>Python es un lenguaje orientado a objetos, no es necesario hacer uso de ellas para poder crear un programa. De hecho, hemos estado trabajando hasta ahora sin hacer menci\u00f3n a ellas ni emplearlas.</p> <p>Hasta ahora, hemos construido aplicaciones peque\u00f1as de manera secuenciada y desorganizada. Esto no significa que lo hayamos hecho mal, lo que quiero decir es, que cuando empecemos a crear aplicaciones di\u00e1micas y sean mas complejas, necesitaremos mejorar la estructura del c\u00f3digo, la organizaci\u00f3n y crear c\u00f3digo reutilizable y facilitar su mantenimiento.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#11-clase-estatica","title":"1.1. Clase est\u00e1tica:","text":"<p>PRECAUCI\u00d3N</p> <p>Hay que evitar el mal uso de las clases, en este ejemplo, vemos que las variables no son reutilizables, tampoco podemos pasarle argumentos.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <pre><code>class Cliente:\n\n    dni = '88521596P'\n    nombre = 'Luis'\n    apellido = 'Mendoza'\n\n    def __init__(self):\n        print(f'DNI: {self.dni}\\nNombre: {self.nombre}\\nApellido: {self.apellido}')\n\n\nCliente()\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n</code></pre> <ul> <li>\u274c Estructurado.</li> <li>\u274c Organizado.</li> <li>\u274c Escalable.</li> <li>\u274c Reutilizable. </li> </ul>"},{"location":"documentacion/checkpoint_06/#12-clase-dinamica","title":"1.2. Clase din\u00e1mica:","text":"<p>La manera recomendada de contruir aplicaci\u00f3nes con c\u00f3digo reutilizable y organizada, es con el uso de las clases. Al principio, es normal que te sientas perdido con todo esto de las clases, pero no te preocupes, todos hemos pasado por esta etapa.</p> <p>Para crear una clase, vamos a emplear la palabra reservada <code>class</code> seguido de un nombre escrito en PascalCase, primera letra de cada palabra se escribe en may\u00fascula, y sin guiones bajos. Sabemos que las clases pueden contener funciones, a las que llamamos m\u00e9todos. Una clase tambi\u00e9n puede contener variables, a las que se conoce con el nombre de atributos. Para crear atributos, primero definimos un m\u00e9todo especial llamado <code>__init__()</code>, que es invocado por Python autom\u00e1ticamente siempre que se crea una instancia de la clase (conocido tambi\u00e9n como constructor o inicializador).</p> <p>Los clientes que vayamos a crear, no tendr\u00e1n el mismo <code>dni</code>, <code>nombre</code> ni <code>apellido</code>. Por ello ser\u00eda conveniente permitir que, al definir una instancia, se pase como argumento el dni del cliente y \u00e9ste se almacene en el atributo <code>self.dni</code>, nombre del cliente en el atributo <code>self.nombre</code> y apellido del cliente en el atributo <code>self.apellido</code>.</p> <p></p> <p>IMPORTANTE</p> <p>Dentro de la clase, las variables pasan a llamarse atributos, el primer atributo obligatorio siempre sera <code>self</code>, las funciones pasan a llamarse m\u00e9todos, nos permite pasarle argumentos y eso hace que el c\u00f3digo sea reutilizable. Estas son las razones por el cual se crearon las clases en programaci\u00f3n.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n        print(f'DNI: {self.dni}\\nNombre: {self.nombre}\\nApellido: {self.apellido}')\n\nCliente('88521596P', 'Luis', 'Mendoza')\nCliente('96452178K', 'Maribel', '')\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n    # DNI: 96452178K\n    # Nombre: Maribel\n    # Apellido:\n</code></pre> </p>"},{"location":"documentacion/checkpoint_06/#13-crear-objetos-con-clase","title":"1.3. Crear objetos con clase:","text":"<p>TIP</p> <p>Antes del auge de la POO, la programaci\u00f3n estaba dominada por el paradigma procedimental. Este enfoque estructuraba los programas como una serie de instrucciones secuenciales y depend\u00eda en gran medida de funciones y datos globales. Si bien este modelo era efectivo para problemas simples, se volvi\u00f3 dif\u00edcil de manejar a medida que los sistemas se hicieron m\u00e1s complejos debido a la falta de separaci\u00f3n clara entre los datos y las operaciones.</p> <p></p> <p>Python es un lenguaje multiparadigma:   - Soporta la programaci\u00f3n imperativa y funcional.   - Soporta la programaci\u00f3n orientada a objetos (POO). </p> <p>En este ejemplo, vamos a crear 2 objetos que se van a llamar <code>cli_1</code> y <code>cli_2</code>. <code>cli_1</code> va tener DNI, Nombre, Apellido y el <code>cli_2</code> va tener solamente DNI, Nombre. La ventaja de poder crear estos objetos de una forma tan simplificada, es impresionante.</p> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', '')\n\nprint(f'DNI: {cli_1.dni}\\nNombre: {cli_1.nombre}\\nApelllido: {cli_1.apellido}')\nprint(f'DNI: {cli_2.dni}\\nNombre: {cli_2.nombre}')\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n    # DNI: 96452178K\n    # Nombre: Maribel\n    # Apellido:\n</code></pre> </p>"},{"location":"documentacion/checkpoint_06/#14-metodos-dentro-de-una-clase","title":"1.4. M\u00e9todos dentro de una clase:","text":"<p>En este ejemplo, vamos a crear un m\u00e9todo normal llamado <code>cuenta</code>, el primer atributo obligatorio se llama <code>self</code>, seguido pondremos nuestros atributos opcionales separadas por una <code>,</code>coma y cerramos la linea con <code>:</code> dos puntos.</p> <p>Dentro del m\u00e9todo, indentamos con 4 espacios para empezar a escribir nuestro c\u00f3digo de ejecuci\u00f3n. En este caso, vamos a emplear <code>return</code> para retornar un mensaje que ponga Cuenta: El cliente ????????? tiene cuenta. Con esto, ya tendriamos nuestra clase completado.</p> <p>Utilizaremos los mismos objetos <code>cli_1</code> y <code>cli_2</code> creados en el ejercicio anterior. La forma de acceder a ello es, llamamos primero al objeto <code>cli_1</code> y ponemos un <code>.</code> punto y llamamos al metodo <code>cuenta</code>. Al tratarse de un m\u00e9todo, como toda funci\u00f3n, devemos cerrarla con <code>()</code>parentesis. El c\u00f3digo quedaria de la siguiente manera <code>cli_1.cuenta()</code></p> <p>Finalizamos el ejemplo con la funci\u00f3n <code>print()</code> para imprimir en pantalla lo que hemos programado en esta clase, <code>print(cli_1.cuenta())</code> y <code>print(cli_2.cuenta())</code></p> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n    def cuenta(self):\n        return f'Cuenta: El cliente {self.dni} tiene cuenta'\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', '')\n\nprint(cli_1.cuenta())\nprint(cli_2.cuenta())\n\n# salida:\n    # Cuenta: El cliente 88521596P tiene cuenta\n    # Cuenta: El cliente 96452178K tiene cuenta\n</code></pre> </p>"},{"location":"documentacion/checkpoint_06/#15-estructura-basica-de-una-clase","title":"1.5. Estructura b\u00e1sica de una clase:","text":"<p>Llegados aqui, aprenderemos los conceptos b\u00e1sicos que construyen una clase. Trata de leer el c\u00f3digo y entender lo que sucede en cada paso.</p> <p></p> <p>Descripci\u00f3n de conceptos:</p> <ol> <li><code>class</code> Declara una clase.</li> <li><code>Cliente</code> Asigna un nombre a la clase, siempre en PascalCase y sin guiones bajos.</li> <li><code>password = '1234'</code> Declara una variable de clase.</li> <li><code>def</code> Declara un m\u00e9todo.</li> <li><code>__init__</code> Lleva dos guiones al principio y al final del nombre, se le conoce como m\u00e9todo dunder, especial o m\u00e1gico.</li> <li><code>self</code> Es el primer atributo obligatorio siempre.</li> <li><code>dni</code>,<code>nombre</code>, <code>apellido</code> Se llaman atributos del m\u00e9todo y van separados por una <code>,</code> coma.</li> <li><code>self.dni</code> Declara una variable de instancia.</li> <li><code>dni</code> Guarda el valor de la variable de instancia.</li> <li><code>cuenta</code> Asigna un nombre al m\u00e9todo.</li> <li><code>self.password</code> Hace referencia a la variable de instancia para retornar su valor.</li> <li><code>cli_1</code> Crea un objeto.</li> <li><code>Cliente</code> Invoca a la clase desde cualquier parte de la aplicaci\u00f3n.</li> <li><code>'88521596P'</code>, <code>'Luis'</code>, <code>'Mendoza'</code> Se llaman argumentos.</li> <li><code>Print</code> Es una funci\u00f3n para imprimir en pantalla.</li> <li><code>cli_1.cuenta</code> hace referencia al objeto <code>cli_1</code> para acceder a la clase y ejecutar el m\u00e9todo <code>cuenta</code>.</li> <li>Visualizamos los datos en la pantalla.</li> </ol> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <pre><code>class Cliente:\n    password = '1234'\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n    def cuenta(self):\n        return f'{self.nombre} {self.apellido}:\\nUsuario: {self.dni}\\nContrase\u00f1a: {self.password}'\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', 'Garcia')\n\nprint(cli_1.cuenta())\nprint(cli_2.cuenta())\n\n# salida:\n    # Luis Mendoza:\n    # Usuario: 88521596P\n    # Contrase\u00f1a: 1234\n    # Maribel Garcia:\n    # Usuario: 96452178K\n    # Contrase\u00f1a: 1234\n</code></pre> <ul> <li>\u2705 Facil de estructurar.</li> <li>\u2705 Facil de organizar.</li> <li>\u2705 Facil de leer.</li> <li>\u2705 Facil de escalar.</li> <li>\u2705 C\u00f3digo reutilizable.</li> </ul> <p>IMPORTANTE</p> <p>Las variables de clase son \u00fatiles cuando queremos utilizar un mismo valor en cualquiera de los metodos. Son accesibles desde cualquier m\u00e9todo. Dentro de las clases, no se recomienda el uso de las condicionales. Su uso est\u00e1 enfocado en gestionar datos y m\u00e9todos.</p> <p>\ud83d\udcac Es fundamental entender bien la estructura y la l\u00f3gica de las clases para poder seguir avanzando y evitar estancamientos en el futuro.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#2-que-es-un-metodo-dunder_1","title":"<p>2. \u00bfQu\u00e9 es un m\u00e9todo dunder?</p>","text":"<p>En programaci\u00f3n orientada a objetos, los m\u00e9todos dunder o m\u00e9todos m\u00e1gicos son funciones especiales que permiten definir comportamientos espec\u00edficos para las clases. Estos m\u00e9todos se llaman \u201cm\u00e1gicos\u201d porque su nombre comienza y termina con dos guiones bajos (__).</p> <p>TIP</p> <p>Los m\u00e9todos m\u00e1gicos son una herramienta poderosa que permite definir comportamientos espec\u00edficos para las clases en Python. Utilizarlos de forma adecuada puede hacer que nuestro c\u00f3digo sea m\u00e1s f\u00e1cil de entender y mantener.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#21-tipos-de-metodos-dunder","title":"2.1. Tipos de m\u00e9todos dunder:","text":"<ul> <li><code>__init__</code>: Se utiliza para inicializar objetos y es invocado autom\u00e1ticamente cuando se crea una instancia de la clase.</li> <li><code>__str__</code>: Se utiliza para representar el objeto en forma de cadena de texto.</li> <li><code>__len__</code>: Permite determinar la longitud de un objeto.</li> </ul> <p>Existen muchos otros m\u00e9todos m\u00e1gicos que pueden ser \u00fatiles, como <code>__add__</code> (para sumar objetos), <code>__eq__</code> (para comparar igualdad), <code>__lt__</code> (para comparar menor que), entre otros. Sin embargo, es importante tener en cuenta que no siempre es necesario utilizar estos m\u00e9todos y que su uso variar\u00e1 dependiendo de cada caso espec\u00edfico.</p> <p></p> <ul> <li> <p>Ejemplo <code>__init__</code>: <pre><code>class Persona:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\np = Persona('Juan')\nprint(p.nombre)\n</code></pre></p> </li> <li> <p>Ejemplo <code>__init__</code> con <code>__str_</code>: <pre><code>class Persona:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\n    def __str__(self):\n        return f'Mi nombre es {self.nombre}'\n\np = Persona('Juan')\nprint(p)\n</code></pre></p> </li> <li> <p>Ejemplo <code>__init__</code> con <code>__len__</code>: <pre><code>class Lista:\n    def __init__(self, elementos):\n        self.elementos = elementos\n\n    def __len__(self):\n        return len(self.elementos)\n\nl = Lista([1,2,3,4,5])\nprint(len(l)) # Imprime 5\n</code></pre></p> </li> </ul> <p>IMPORTANTE</p> <p>El primer ejemplo y el segundo ejemplo tienen el mismo resultado, lo que hace el m\u00e9todo dunder <code>__str__</code> es convertir el objeto en una cadena de texto.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#22-que-metodo-dunder-se-ejecuta-automaticamente","title":"2.2. \u00bfQu\u00e9 m\u00e9todo dunder se ejecuta autom\u00e1ticamente?","text":"<p>El m\u00e9todo <code>__init__</code>, es un m\u00e9todo especial que se ejecuta autom\u00e1ticamente al invocar la clase e inicializara los atributos del objeto que le ayamos creado. Es decir, es imposible de olvidarse llamarlo ya que se llamar\u00e1 autom\u00e1ticamente.</p> <p>IMPORTANTE</p> <p>El m\u00e9todo <code>__init__</code> es el primer m\u00e9todo que se ejecuta dentro de una clase.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#caracteristicas","title":"\ud83d\udcdd Caracter\u00edsticas:","text":"<ul> <li>El m\u00e9todo <code>__init__</code> no puede retornar <code>return</code> datos, no devuelve nada.</li> <li>El m\u00e9todo <code>__init__</code> puede recibir par\u00e1metros que se utilizan para inicializar atributos de forma autom\u00e1tica.</li> <li>El m\u00e9todo <code>__init__</code> es un constructor de instancias.</li> <li>El m\u00e9todo <code>__init__</code> es un m\u00e9todo opcional, de todos modos es muy com\u00fan declararlo.</li> </ul>"},{"location":"documentacion/checkpoint_06/#3-que-es-un-decorador_1","title":"<p>3. \u00bfQu\u00e9 es un decorador?</p>","text":"<p>Los decoradores son funciones que toman otra funci\u00f3n como argumento y anidan una nueva funci\u00f3n para agregarle c\u00f3digo extra sin alterar la existente.</p> <p>En el siguiente ejemplo, puedes ver la estructura general de una funci\u00f3n decoradora.</p> <p>TIP</p> <p>Si alguna vez has visto <code>@</code>, est\u00e1s ante un decorador.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>def decorador(f):\n\n    def funcion_nueva():\n        print('Funcionalidad extra')\n        f()\n    return funcion_nueva\n\n@decorador\ndef funcion_inicial():\n    print('Funcionalidad inicial')\n\nfuncion_inicial()\n</code></pre> </p>"},{"location":"documentacion/checkpoint_06/#analicemos-estos-elementos-en-mas-detalle","title":"\ud83d\udd75\ufe0f Analicemos estos elementos en m\u00e1s detalle:","text":"<ul> <li> <p>Esta es la <code>funci\u00f3n_inicial</code> que el <code>@decorador</code> va tomar como referencia. <pre><code>@decorador\ndef funcion_inicial():\n    print('Funcionalidad inicial')\n\nfuncion_inicial()\n</code></pre></p> </li> <li> <p>Esta es una funci\u00f3n intermediaria que va hacer la decoradoraci\u00f3n <code>def decorador</code>. El nombre de la funci\u00f3n hace referencia a <code>@decorador</code>. Toma <code>(f)</code> como argumento para invocar <code>f()</code> m\u00e1s adelante dentro de la <code>funci\u00f3n_nueva()</code> que va ir anidada.</p> </li> </ul> <pre><code>def decorador(f):\n    def funcion_nueva():\n        print('Funcionalidad extra')\n        f()\n    return funcion_nueva\n</code></pre> <ul> <li>Si ejecutamos el c\u00f3digo, podemos ver el siguiente resultado:</li> </ul> <pre><code>Funcionalidad extra\nFuncionalidad inicial\n</code></pre> <p></p>"},{"location":"documentacion/checkpoint_06/#4-que-es-el-polimorfismo_1","title":"<p>4. \u00bfQu\u00e9 es el polimorfismo?</p>","text":"<p>El polimorfismo tiene como objetivo cambiar la funcionalidad entre los m\u00e9todos con el mismo nombre, en este ejemplo, tenemos tres clases, a los m\u00e9todos les hemos asignado el mismo nombre <code>desplazamiento</code>. A pesar de que lleven el mismo nombre, los podemos diferenciar creando una nueva funci\u00f3n y pasandole como atributo, por ejemplo <code>vehiculo</code>. El <code>vehiculo</code> tomara el valor de <code>mi_vehiculo</code> para hacer la m\u00e1gia del polimorfismo. A la variable <code>mi_vehiculo</code>, podemos pasarle cualquiera de las tres clases, <code>Moto()</code>, <code>Coche()</code>, <code>Camion()</code>.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Moto():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 2 ruedas')\n\nclass Coche():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 4 ruedas')\n\nclass Camion():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 6 ruedas')\n\ndef desplazamiento_vehiculo(vehiculo):\n    vehiculo.desplazamiento()\n\nmi_vehiculo = Coche()\ndesplazamiento_vehiculo(mi_vehiculo)\n\n# salida:\n    # Me desplazo utilizando 4 ruedas\n</code></pre> </p> <p>IMPORTANTE</p> <p>El polimorfismo puede acceder a cualquiera de las clases y ejecutar m\u00e9todos independientemente del nombre que tengan.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#5-que-es-una-api_1","title":"<p>5. \u00bfQue es una API?</p>","text":"<p>Una API es una (interfaz de programaci\u00f3n de aplicaciones) que sigue un conjunto de restricciones arquitecturales basadas en HTTP. Esto significa que se puede acceder a los recursos a trav\u00e9s de URLs, lo que hace que la API sea f\u00e1cil de entender y utilizar. Podemos crear una API que haga literalmente cualquier cosa, desde dar clima hasta un cat\u00e1logo completo de una tienda en l\u00ednea. Casi todas las aplicaciones utilizan APIs para conectarse con fuentes de datos corporativas, servicios de datos de terceros u otras aplicaciones.</p> <p>TIP</p> <p>El formato de intercambio de datos normalmente es JSON o XML, lo que permite que la API sea compatible con una amplia variedad de aplicaciones.</p> <p></p> <p> </p>"},{"location":"documentacion/checkpoint_06/#51-una-api-tiene-dos-componentes-principales","title":"5.1. Una API tiene dos componentes principales:","text":"<ul> <li> <p>Recursos:</p> <ul> <li>Datos o informaci\u00f3n.</li> </ul> </li> <li> <p>Verbos HTTP:</p> <ul> <li><code>GET</code> para consultar y leer.</li> <li><code>POST</code> para crear.</li> <li><code>PUT</code> para editar.</li> <li><code>DELETE</code> para eliminar.</li> </ul> </li> </ul> <p>IMPORTANTE</p> <p>Los recursos son los datos o informaci\u00f3n que se pueden acceder a trav\u00e9s de la API. Los verbos HTTP son las operaciones que se pueden realizar en esos recursos, como obtener <code>GET</code> un recurso, crear <code>POST</code> un recurso, actualizar <code>PUT</code> un recurso o eliminar <code>DELETE</code> un recurso.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#52-de-donde-obtiene-la-api-toda-la-informacion","title":"5.2. \u00bfDe donde obtiene la API toda la informaci\u00f3n?","text":"<p>La informaci\u00f3n de la api no sale de la nada, necesita ser construido por alguien en formato diccionario. Se puede construir de manera manual o cargarle la informaci\u00f3n desde una base de datos. Cuando abrimos la url donde esta alojado el API, veremos un monton de datos en formato diccionario <code>{...}</code>. Puede contener anidamientos tanto de diccionarios como de listas en su interior.</p> <p>Formato de una API \ud83d\udc47 <pre><code>{\n  \"id\": 1,\n  \"nombre\": \"Juan\",\n  \"apellido\": \"Garcia\",\n  \"pais\": \"Espa\u00f1a\"\n},\n{\n  \"id\": 2,\n  \"nombre\": \"Nerea\",\n  \"apellido\": \"Larralde\",\n  \"pais\": \"Espa\u00f1a\"\n}\n</code></pre></p> <p>TIP</p> <p>Puedes practicar con esta API de Rick and Morty https://rickandmortyapi.com/api/character/ utilizando la aplicaci\u00f3n Postman https://www.postman.com/ para testear con APIs.</p> <p>Si accede a <code>https://rickandmortyapi.com/api/character/131</code> por numero de id al personaje, nos devolvera un json con toda la informaci\u00f3n.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#53-que-es-postman","title":"5.3. \u00bfQu\u00e9 es Postman?","text":"<p>Se trata de una herramienta dirigida a desarrolladores web que permite realizar peticiones HTTP a cualquier API. Postman es muy \u00fatil a la hora de programar y hacer pruebas, puesto que nos ofrece la posibilidad de comprobar el correcto funcionamiento de nuestros desarrollos.</p> <p>Con esto no queremos decir que Postman sea una herramienta exclusiva para profesionales del entorno web, de hecho va a ser muy \u00fatil para todo aquel que tenga que interactuar con una API.</p>"},{"location":"documentacion/checkpoint_06/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li> <p>Env\u00edo de solicitudes:</p> <ul> <li>Postman permite enviar solicitudes HTTP y HTTPS utilizando m\u00e9todos como GET, POST, PUT y DELETE, entre otros. Los desarrolladores pueden especificar par\u00e1metros, encabezados y el cuerpo de la solicitud para simular diversas interacciones con una API.</li> </ul> </li> <li> <p>Pruebas automatizadas:</p> <ul> <li>Con Postman, los desarrolladores pueden crear y ejecutar pruebas automatizadas para verificar el comportamiento de una API. Esto ayuda a detectar errores de manera temprana y a garantizar que el software cumpla con los est\u00e1ndares de calidad. </li> </ul> </li> </ul> <p>TIP</p> <p>API de testeo https://rickandmortyapi.com</p> <p></p>"},{"location":"documentacion/checkpoint_06/#6-es-mongodb-una-base-de-datos-sql-o-nosql_1","title":"<p>6. \u00bfEs MongoDB una base de datos SQL o NoSQL?</p>","text":"<p>MongoDB es una base de datos NoSQL orientada a documentos que apareci\u00f3 el a\u00f1o 2007. Se utiliza para almacenar vol\u00famenes masivos de datos.</p>"},{"location":"documentacion/checkpoint_06/#61-como-se-almacenan-los-datos","title":"6.1. \u00bfComo se almacenan los datos?","text":"<p>A diferencia de una base de datos relacional SQL tradicional, MongoDB no se basa en tablas y columnas. Los datos se almacenan como colecciones y documentos.</p> <p>La arquitectura de MongoDB se basa en varios componentes principales. En primer lugar, la clave _id es un campo obligatorio para cada documento que se genera de forma autom\u00e1tica. Representa un valor \u00fanico y puede considerarse como la clave principal del documento para identificar al objeto dentro de la colecci\u00f3n.</p> <p></p> <p>IMPORTANTE</p> <ul> <li>Colecciones: Se refiere a un diccionario <code>{...}</code> o lista <code>[...]</code>.</li> <li>Documentos: Se refiere a la <code>\"clave\": \"valor\"</code> dentro de un diccionario. </li> </ul> <p></p> <p></p> <pre><code>{\n    \"_id\": ObjectId(\"5cf0029caff5056591b0ce7d\"),\n    \"nombre\": \"Juan\",\n    \"apellido\": \"Garcia\",\n},\n{\n    \"_id\": ObjectId(\"6sh5930rdee4058890b0ae5c\"),\n    \"nombre\": \"Nerea\",\n    \"apellido\": \"Larralde\",\n    \"telefono\": \"666-666-444\",\n    \"direccion\":  {\n        \"codigo_postal\": \"22222\",\n        \"provincia\": \"Gipuzkoa\",\n        \"pais\": \"Espa\u00f1a\"\n    }\n}\n</code></pre> <p>IMPORTANTE</p> <p>MongoDB almacena los datos en documentos flexibles al estilo JSON pero los reconoce como BSON, esto vendria a ser un JSON binario.</p> <p></p>"},{"location":"documentacion/checkpoint_06/#61-comandos-para-interactuar-con-la-base-de-datos-desde-la-terminal","title":"\ud83d\udc68\u200d\ud83d\udcbb 6.1. Comandos para interactuar con la base de datos desde la terminal:","text":"<p>MQL es el lenguaje de consulta y manipulaci\u00f3n de informaci\u00f3n que MongoDB nos provee por defecto (MongoDB Query Language). Las consultas de MongoDB se basan en el lenguaje de programaci\u00f3n JavaScript con algunas diferencias leves.</p> <p></p> <ul> <li>Consultar todos los documentos que tenemos en la base de datos sin formatear la estructura:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find()</code>.</li> </ul> </li> <li>Consultar todos los documentos que tenemos en la base de datos con la estructura formateada:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find().pretty()</code>.</li> </ul> </li> <li>Consultar todos los documentos que coincidan con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: \"Larralde\"}).pretty()</code>.</li> </ul> </li> <li>Consultar cuantos documentos coinciden con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: \"Larralde\"}).length()</code>.</li> </ul> </li> <li>Consultar cuantos documentos coinciden con el valor del apellido utilizando Regex:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: /.*Larralde.*/i})</code>.</li> </ul> </li> <li>Consultar en el documento si existe una clave o no:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: $exists: true})</code>.</li> </ul> </li> <li>Eliminar todos los documentos que coincidan con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.remove({apellido: \"Larralde\"})</code>.</li> </ul> </li> <li> <p>Eliminar un documento que coincida con el valor del apellido:</p> <ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.remove({apellido: \"Larralde\"}, 1)</code>. </li> </ul> </li> <li> <p>Insertar un nuevo documento \ud83d\udc47 <pre><code>db.nombre_de_tu_base_de_datos.insert({\n    \"nombre\": \"Carlos\",\n    \"apellido\": \"Garrido\",\n    \"direccion\": {\n        \"codigo_postal\": \"45210\",\n        \"provincia\": \"Gipuzkoa\",\n        \"pais\": \"Espa\u00f1a\"\n    }\n});\n</code></pre> </p> </li> </ul> <p>TIP</p> <p>Descargar MongoDB desde https://www.mongodb.com/try/download/community.</p> <p>Para m\u00e1s informaci\u00f3n, consulte en su p\u00e1gina oficial.</p> <p> </p>"},{"location":"documentacion/checkpoint_07/","title":"Checkpoint 07","text":""},{"location":"documentacion/checkpoint_07/#documentacion-python","title":"Documentaci\u00f3n Python \ud83d\udc0d","text":"<p>CONTENIDO</p> <p></p>"},{"location":"documentacion/checkpoint_07/#1-","title":"1. -","text":""},{"location":"documentacion/checkpoint_07/#2-","title":"2. -","text":""},{"location":"documentacion/checkpoint_07/#3-","title":"3. -","text":""},{"location":"documentacion/checkpoint_07/#4-","title":"4. -","text":""},{"location":"documentacion/checkpoint_07/#5-","title":"5. -","text":""},{"location":"documentacion/checkpoint_07/#6-","title":"6. -","text":""},{"location":"instalacion/gh_deploy/","title":"Despliegue de proyecto local a GitHub Pages","text":"<p>01. Accede a GitHub y crea un repositorio nuevo.</p> <p> </p> <p>02. Escribe el mismo nombre del proyecto local, deja en p\u00fablico y pulsa el bot\u00f3n crear repositorio.</p> <p> </p> <p>03. Muestra los comandos y la URL remota del repositorio creado.</p> <p> </p> <p>04. Comandos para sincrinizar por primera vez GIT con GitHub desde la terminal de VSCode.</p> <ul> <li>(git init) Inicia el GIT</li> <li>(git config --global user.name \"nombre_usuario\") Usuario de GitHub</li> <li>(git config --global user.email \"micorreo@ejemplo.com\") Email de GitHub </li> </ul> <p>05. Comandos de terminal mas utilizados en GIT.</p> <ul> <li>(git init) Inicia el GIT</li> <li>(git add .) Agrega todos los archivos al GIT</li> <li>(git add ejemplo.html) Agrega los archivos indibidualmente al GIT</li> <li>(git commit -m \"inserta el mensaje aqui\") Agrega un commit al GIT</li> <li>(git branch -M main) Fuerza a renombrar la rama local actual por (main) actual main</li> <li>(git remote add origin https://github.com/usuario/mi_repositorio.git) Agrega la url remota del repositorio GitHub</li> <li>(git remote -v) Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>(git status) Muestra el estado de los procesos GIT</li> <li>(git push -u origin main) Sube los archivos a la rama main del repositorio GitHub</li> </ul> <p>El orden de ejecuci\u00f3n</p> <p>El orden de ejecuci\u00f3n, variara en funci\u00f3n de lo que quieras hacer. Por l\u00f3gica, primero se inicia el GIT, se agregan los archivos, se envia un commit, la verificaci\u00f3n de estado y la comunicaci\u00f3n con el repositorio solo nos da informaci\u00f3n, no hace ningun cambio en el repositorio.</p> <p></p> <p>06. Entra en VSCode y abre una terminal nueva.</p> <ul> <li>Desde la carpeta de trabajo \"proyecto_docs\", activa el entorno virtual (.\\env\\scripts\\activate)</li> <li>Accede a la carpeta del proyecto \"docs\" y lanza el comando (mkdocs build) para compilar, \u00e9sto creara una nueva carpeta llamada site donde compilara todo el proyecto.</li> </ul> <p> </p> <p>07. Desde la carpeta del proyecto \"docs\", abre la terminal y prepara el repositorio GIT para subir al repositorio GitHub.</p> <ul> <li>Ejecuta el comando (git init)</li> <li>Ejecuta el comando (git add .)</li> <li>Ejecuta el comando (git commit -m \"despliegue\")</li> <li>Ejecuta el comando (git branch -M main)</li> <li>Ejecuta el comando (git remote add origin https://github.com/zuluta/docs.git)</li> <li>Ejecuta el comando (git remote -v)</li> <li>Ejecuta el comando (git status)</li> <li>Ejecuta el comando (git push -u origin main)</li> </ul> <p>NOTA</p> <p>La rama \"master\" y \"main\" son lo mismo. Hace unos a\u00f1os, la comunidad de software decidi\u00f3 cambiar el nombre de la rama principal de master a main. Verifica con el comando (git branch) las ramas existentes en tu repositorio local y si existe la rama master, pasa a la rama master con el comando (git switch master) y cambia el nombre de la rama con el comando (git branch -m main) o (git branch -M main) para forzarlo. De este modo, solo se dejara una rama principal con el nombre \"main\" por repositorio.</p> <p> </p> <p>08. Entra al repositorio y verifica si se subieron bien los archivos a GitHub en la rama main.</p> <p> </p> <p>09. GitHub permite crear una pagina web gratis desde el repositorio.</p> <ul> <li>Ejecuta el comando (mkdocs gh-deploy)</li> </ul> <p>Este comando es espec\u00edfico de mkdocs para GitHub. Este comando creara de forma autom\u00e1tica una nueva rama gh_pages en el mismo repositorio del proyecto para poder desplegar GitHub Pages.</p> <p>10. Entra al repositorio de GitHub y verifica si se creo la rama \"gh-pages\".</p> <p> </p> <p>11. Entra en Settings, luego en Pages, donde pone Branch, selecciona la rama \"gh-pages\" y la carpeta \"(root)\". Pulsa el bot\u00f3n de guardar y espera unos segundos a que se active la p\u00e1gina.</p> <p> </p> <p>12. Entra en Settings, luego en Pages, donde pone GitHub Pages, verifica que la p\u00e1gina este operativa.</p> <p> </p> <p>13. Si necesitas actualizar GitHub Pages por nuevos cambios, ejecuta lo siguiente.</p> <ul> <li>Desde la carpeta de trabajo \"proyecto_docs\", activa el entorno virtual (.\\env\\scripts\\activate)</li> <li>Accede a la carpeta del proyecto \"docs\" y lanza el comando (mkdocs build)</li> <li>Ejecuta el comando (git init)</li> <li>Ejecuta el comando (git add .)</li> <li>Ejecuta el comando (git commit -m \"actualizar contenido\")</li> <li>Ejecuta el comando (git branch)</li> <li>Ejecuta el comando (git switch main)</li> <li>Ejecuta el comando (git remote add origin https://github.com/zuluta/docs.git)</li> <li>Ejecuta el comando (git remote -v)</li> <li>Ejecuta el comando (git status)</li> <li>Ejecuta el comando (git push -u origin main) Se sube a la rama \"main\" del repositorio donde se guarda el proyecto</li> <li>Ejecuta el comando (mkdocs gh-deploy) Compila y despliega a la rama \"gh-pages\" del repositorio. \u00c9sta rama, va enlazado al sitio web de GitHub Pages</li> <li>Verifica los cambios en la p\u00e1gina  </li> </ul>"},{"location":"instalacion/mkdocs/","title":"Instalar MkDocs con Python y virtualenv","text":"<p>01. Verifica si Python y virtualenv est\u00e1n instalados de forma global y si no aparecen, instalalos.</p> <p> </p> <p>02. Entra en \u201cescritorio\u201d y crea una carpeta de trabajo que se llame (proyecto_docs) con el comando (mkdir proyecto_docs).</p> <p>03. Entra en \u201cproyecto_docs\u201d y crea una carpeta virtual que se llame (env).</p> <p>04. Act\u00edva la carpeta \u201cenv\u201d en modo virtual con el comando (.\\env\\scripts\\activate).</p> <p>05. Instala la librer\u00eda dentro de la carpeta \u201cenv\u201d con el comando (pip install mkdocs).</p> <p> </p> <p>06. Verifica si la librer\u00eda mkdocs se instal\u00f3 bien.</p> <p> </p> <p>07. Crea nuevo proyecto de mkdocs que se llame (mi-documentacion).</p> <p>08. Verifica si el proyecto se cre\u00f3 bien y desactiva el entorno virtual con el comando (deactivate). Cierra la terminal.</p> <p> </p> <p>09. Abre VSCode y carga la carpeta del escritorio \u201cproyecto_docs\u201d desde el menu superior (Archivo / Abrir carpeta\u2026).</p> <p> </p> <p>10. Dentro del proyecto \u201cmi_documentacion\u201d, abre el archivo que pone index.md.</p> <p>11. Abre una nueva terminal desde el menu superior (... / Terminal / Nuevo terminal) para ejecutar el servidor en local. Recordar que la librer\u00eda mkdocs se instal\u00f3 en un entorno virtual por lo que sera necesario primero activar el entorno virtual desde la carpeta de trabajo \u201cproyecto_docs\u201d con el comando (.\\env\\Scripts\\activate). Luego entra en la carpeta del proyecto \u201cmi-documentaci\u00f3n\u201d y desde ah\u00ed, ejecutar el siguiente comando (mkdocs serve), esto ejecutara el servidor local.</p> <p> </p> <p>12. Para verificar, copia la URL del servidor y abre en el navegador, le aparecer\u00e1 la p\u00e1gina de bienvenida por defecto.</p> <p> </p> <p>13. Con esto, ya tendrias instalado la librer\u00eda mkdocs en un entorno virtual y creado el proyecto para empezar a editar tu propia documentaci\u00f3n, porfolio, o lo que quieras de forma local.</p> <p>14. Ahora que ya tenemos mkdocs en marcha, toca instalar un tema desarrollado para mkdocs que le va dar un dise\u00f1o mucho mas moderno. Abre la terminal de VSCode, pulsa (ctrl + c) para detener el servidor, activa el entorno virtual, accede a la carpeta \u201cmi-documentaci\u00f3n\u201d y desde ah\u00ed ejecuta el comando (pip install mkdocs-material). Una vez terminada la instalaci\u00f3n, abre el archivo \u201cmkdocs.yml\u201d y modifica el nombre del tema. En este caso, se llama material. El tema que viene instalado por defecto se llama \u201creadthedocs\u201d.</p> <p> </p> <p>15. Para finalizar, recarga la p\u00e1gina y veras un aspecto mucho mas moderno de tu sitio web.</p> <p> </p>"},{"location":"programacion/comandos_git/","title":"GIT desde la l\u00ednea de comandos","text":""},{"location":"programacion/comandos_git/#comandos-basicos-para-trabajar-en-localhost","title":"Comandos b\u00e1sicos para trabajar en localhost:","text":"<ul> <li>git init Iniciar GIT</li> <li>git add . Agrega todos los archivos al GIT</li> <li>git commit -m \"primer commit\" Agrega un commit al GIT</li> </ul>"},{"location":"programacion/comandos_git/#comandos-para-sincrinizar-por-primera-vez-git-con-github-desde-terminal-de-vscode","title":"Comandos para sincrinizar por primera vez GIT con GitHub desde terminal de VSCode:","text":"<ul> <li>git init Iniciar GIT</li> <li>git config --global user.name \"nombre_usuario\" Usuario de GitHub</li> <li>git config --global user.email \"micorreo@ejemplo.com\" Email de GitHub</li> </ul>"},{"location":"programacion/comandos_git/#comandos-basicos-para-subir-nuestro-proyecto-localhost-al-repositorio-de-github","title":"Comandos basicos para subir nuestro proyecto localhost al repositorio de GitHub:","text":"<ul> <li>git init Iniciar GIT</li> <li>git add . Agrega todos los archivos al GIT</li> <li>git commit -m \"primer commit\" Agrega un commit al GIT</li> <li>git branch -M main Fuerza a renombrar la rama local actual por (main) actual main</li> <li>git remote add origin https://github.com/usuario/mi_repositorio.git Crea una conexi\u00f3n remota llamada origin con el repositorio de GitHub</li> <li>git remote -v Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>git status Muestra el estado de los procesos GIT</li> <li>git push -u origin main Sube los archivos a la rama main remoto de GitHub</li> </ul>"},{"location":"programacion/comandos_git/#comandos-utiles","title":"Comandos \u00fatiles:","text":"<ul> <li>git status Muestra el estado de los procesos GIT</li> <li>git add ejemplo.html Agrega los archivos indibidualmente al GIT</li> <li>git remote -v Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>git log Muestra el hist\u00f3rico de commits</li> <li>git log -n 2 Muestra los \u00faltimos 2 commits</li> <li>git log prueba.html Muestra los commits del archivo (prueba.html)</li> <li>git switch main Cambia de la rama actual a la rama (main)</li> <li>git branch branch-test Crea una nueva rama (branch-test) a partir de la rama actual</li> <li>git branch -m branch-test Renombra la rama local actual por (branch-test) actual branch-test</li> <li>git branch -M branch-test Fuerza a renombrar la rama local actual por (branch-test) actual branch-test</li> <li>git branch Muestra todas las ramas locales y distingue con un (*) la rama actual</li> <li>git branch --list Muestra todas las ramas locales y distingue con un (*) la rama actual</li> <li>git branch -r Muestra todas las ramas del repositorio remoto</li> <li>git branch -a Muestra todas las ramas, tanto locales como remotas y distingue con un (*) la rama actual</li> <li>git branch --show-current Muestra la rama actual</li> <li>git branch -d branch-test Elimina la rama (branch-test) del repositorio local si esta fusionado con (main)</li> <li>git branch -D branch-test Fuerza a eliminar la rama (branch-test) del repositorio local este o no fusionado con (main)</li> <li>git branch --no-merged Muestra las ramas que estan sin fusionar con (main)</li> <li>git remote add origin https://github.com/usuario/mi_repositorio.git Crea una conexi\u00f3n remota llamada origin con el repositorio de GitHub</li> <li>git clone https://github.com/usuario/mi_repositorio.git Copia el repositorio remoto completo al local y se crea autom\u00e1ticamente una conexi\u00f3n remota llamada origin</li> <li>git pull origin main Actualiza la rama actual del repositorio local con los nuevos cambios efectuados en la rama (main) del repositorio remoto</li> <li>git merge branch-test Fusiona la rama (branch-test) a la rama actual del repositorio local</li> <li>git push origin --delete branch-test Elimina la rama (branch-test) del repositorio remoto</li> <li>git fetch --prune Elimina todas las referencias de seguimiento obsoletas del repositorio remoto</li> <li>git prune Elimina todas las referencias de seguimiento obsoletas del repositorio local</li> <li>git prune --verbose Elimina y muestra todas las referencias de seguimiento obsoletas que a eliminado del repositorio local</li> <li>git commit --amend -m \"texto corregido\" Edita el commit mas reciente y lo sustituye por uno nuevo</li> </ul>"},{"location":"programacion/comandos_git/#comandos-para-restaurar-o-resetear-a-un-commit-anterior-especifico","title":"Comandos para restaurar o resetear a un commit anterior espec\u00edfico:","text":"<ol> <li> <p>El m\u00e9todo (git restore): </p> <ul> <li>git log --oneline Muestra informaci\u00f3n simplificada de commits donde sale el hash de cada uno</li> <li>git restore --source 20cf9cb prueba.html Restaura el archivo (prueba.html) al commit mediante hash (20cf9cb)</li> </ul> </li> <li> <p>El m\u00e9todo (git reset):</p> <ul> <li>git log --oneline Muestra informaci\u00f3n simplificada de commits donde sale el hash de cada uno</li> <li>git reset 20cf9cb Regresa al commit mediante hash (20cf9cb)</li> </ul> <p>NOTA</p> <p>A pesar de que los commits ya no aparecen en el log, no se eliminan de GIT</p> <p></p> </li> </ol> <p>NOTA</p> <ul> <li>Para detener el servidor de \"mkdocs\" pulsa (ctrl + c)</li> <li>Para limpiar la consola utiliza el comando (cls) o (clear)</li> <li>Para salir de algun comando GIT pulsa (q)</li> </ul> <p>MALAS PR\u00c1CTICAS</p> <p>Est\u00e1 totalmente desaconsejado alterar el historial de commits, esto podria generar conflictos con los commits del repositorio remoto cuando se vaya hacer push o pull por cualquiera de los miembros, intenta siempre trabajar hacia adelante. Por lo general, est\u00e1 bien hacer este tipo de cambios en su propio repositorio local.</p> <p>BUENAS PR\u00c1CTICAS</p> <p>El mensaje del commit se escribe en presente, debe ser corto y conciso, no utilizar puntos ni puntos suspensivos al final.</p> <ol> <li>Ejemplo commit: <code>remove a random notification</code> </li> <li>Ejemplo commit: <code>add a new search feature</code></li> <li>Ejemplo commit: <code>change the default system color</code></li> <li>Ejemplo commit: <code>fix a problem with the topbar</code></li> </ol> <p></p> <p>Fuente: Sitio web oficial </p>"},{"location":"ruta_aprendizaje/desarrollador_full_stack/","title":"Desarrollador Full Stack","text":"<p>El programador Full Stack es el profesional encargado de desarrollar p\u00e1ginas web, tanto en el FRONTEND como en el BACKEND. Para desempe\u00f1ar sus funciones, que incluyen desde el dise\u00f1o de interfaces hasta el desarrollo de arquitecturas y la optimizaci\u00f3n del sitio web, debe combinar una serie de conocimientos t\u00e9cnicos y creativos.</p>"},{"location":"ruta_aprendizaje/desarrollador_full_stack/#diagrama","title":"Diagrama","text":"<p>Creado con app.diagrams.net </p>"}]}