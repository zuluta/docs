{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"devcamp/","title":"DevCamp","text":"DevCamp <p>PT Full Stack Development with JavaScript, Python, React</p> <p>\u00cdNDICE DE CONTENIDOS</p> <ol> <li>Checkpoint 06</li> <li>Checkpoint 07</li> <li>Checkpoint 08</li> </ol> <p> </p>"},{"location":"devcamp/checkpoint-06/","title":"Checkpoint 06","text":""},{"location":"devcamp/checkpoint-06/#documentacion-python","title":"Documentaci\u00f3n Python","text":"<p>\u00cdNDICE CHECKPOINT 06</p> <ol> <li>Introducci\u00f3n al uso de clases</li> <li>\u00bfQu\u00e9 es un m\u00e9todo dunder?</li> <li>\u00bfQu\u00e9 es un decorador?</li> <li>\u00bfQu\u00e9 es el polimorfismo?</li> <li>\u00bfQu\u00e9 es una API?</li> <li>\u00bfEs MongoDB una base de datos SQL o NoSQL? </li> </ol>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/","title":"1. Introducci\u00f3n al uso de clases","text":"<p>Python es un lenguaje orientado a objetos, no es necesario hacer uso de ellas para poder crear un programa. De hecho, hemos estado trabajando hasta ahora sin hacer menci\u00f3n a ellas ni emplearlas.</p> <p>Hasta ahora, hemos construido aplicaciones peque\u00f1as de manera secuenciada y desorganizada. Esto no significa que lo hayamos hecho mal, lo que quiero decir es, que cuando empecemos a crear aplicaciones di\u00e1micas y sean mas complejas, necesitaremos mejorar la estructura del c\u00f3digo, la organizaci\u00f3n y crear c\u00f3digo reutilizable y facilitar su mantenimiento.</p> <p></p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#11-clase-estatica","title":"1.1. Clase est\u00e1tica:","text":"<p>PRECAUCI\u00d3N</p> <p>Hay que evitar el mal uso de las clases, en este ejemplo, vemos que las variables no son reutilizables, tampoco podemos pasarle argumentos.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <pre><code>class Cliente:\n\n    dni = '88521596P'\n    nombre = 'Luis'\n    apellido = 'Mendoza'\n\n    def __init__(self):\n        print(f'DNI: {self.dni}\\nNombre: {self.nombre}\\nApellido: {self.apellido}')\n\n\nCliente()\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n</code></pre> <ul> <li>\u274c Estructurado.</li> <li>\u274c Organizado.</li> <li>\u274c Escalable.</li> <li>\u274c Reutilizable. </li> </ul>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#12-clase-dinamica","title":"1.2. Clase din\u00e1mica:","text":"<p>La manera recomendada de contruir aplicaci\u00f3nes con c\u00f3digo reutilizable y organizada, es con el uso de las clases. Al principio, es normal que te sientas perdido con todo esto de las clases, pero no te preocupes, todos hemos pasado por esta etapa.</p> <p>Para crear una clase, vamos a emplear la palabra reservada <code>class</code> seguido de un nombre escrito en PascalCase, primera letra de cada palabra se escribe en may\u00fascula, y sin guiones bajos. Sabemos que las clases pueden contener funciones, a las que llamamos m\u00e9todos. Una clase tambi\u00e9n puede contener variables, a las que se conoce con el nombre de atributos. Para crear atributos, primero definimos un m\u00e9todo especial llamado <code>__init__()</code>, que es invocado por Python autom\u00e1ticamente siempre que se crea una instancia de la clase (conocido tambi\u00e9n como constructor o inicializador).</p> <p>Los clientes que vayamos a crear, no tendr\u00e1n el mismo <code>dni</code>, <code>nombre</code> ni <code>apellido</code>. Por ello ser\u00eda conveniente permitir que, al definir una instancia, se pase como argumento el dni del cliente y \u00e9ste se almacene en el atributo <code>self.dni</code>, nombre del cliente en el atributo <code>self.nombre</code> y apellido del cliente en el atributo <code>self.apellido</code>.</p> <p></p> <p>IMPORTANTE</p> <p>Dentro de la clase, las variables pasan a llamarse atributos, el primer atributo obligatorio siempre sera <code>self</code>, las funciones pasan a llamarse m\u00e9todos, nos permite pasarle argumentos y eso hace que el c\u00f3digo sea reutilizable. Estas son las razones por el cual se crearon las clases en programaci\u00f3n.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n        print(f'DNI: {self.dni}\\nNombre: {self.nombre}\\nApellido: {self.apellido}')\n\nCliente('88521596P', 'Luis', 'Mendoza')\nCliente('96452178K', 'Maribel', '')\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n    # DNI: 96452178K\n    # Nombre: Maribel\n    # Apellido:\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#13-crear-objetos-con-clase","title":"1.3. Crear objetos con clase:","text":"<p>TIP</p> <p>Antes del auge de la POO, la programaci\u00f3n estaba dominada por el paradigma procedimental. Este enfoque estructuraba los programas como una serie de instrucciones secuenciales y depend\u00eda en gran medida de funciones y datos globales. Si bien este modelo era efectivo para problemas simples, se volvi\u00f3 dif\u00edcil de manejar a medida que los sistemas se hicieron m\u00e1s complejos debido a la falta de separaci\u00f3n clara entre los datos y las operaciones.</p> <p></p> <p>Python es un lenguaje multiparadigma:</p> <ul> <li>Soporta la programaci\u00f3n imperativa y funcional.</li> <li>Soporta la programaci\u00f3n orientada a objetos (POO). </li> </ul> <p>En este ejemplo, vamos a crear 2 objetos que se van a llamar <code>cli_1</code> y <code>cli_2</code>. <code>cli_1</code> va tener DNI, Nombre, Apellido y el <code>cli_2</code> va tener solamente DNI, Nombre. La ventaja de poder crear estos objetos de una forma tan simplificada, es impresionante.</p> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', '')\n\nprint(f'DNI: {cli_1.dni}\\nNombre: {cli_1.nombre}\\nApelllido: {cli_1.apellido}')\nprint(f'DNI: {cli_2.dni}\\nNombre: {cli_2.nombre}')\n\n# salida:\n    # DNI: 88521596P\n    # Nombre: Luis\n    # Apellido: Mendoza\n    # DNI: 96452178K\n    # Nombre: Maribel\n    # Apellido:\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#14-metodos-dentro-de-una-clase","title":"1.4. M\u00e9todos dentro de una clase:","text":"<p>En este ejemplo, vamos a crear un m\u00e9todo normal llamado <code>cuenta</code>, el primer atributo obligatorio se llama <code>self</code>, seguido pondremos nuestros atributos opcionales separadas por una <code>,</code>coma y cerramos la linea con <code>:</code> dos puntos.</p> <p>Dentro del m\u00e9todo, indentamos con 4 espacios para empezar a escribir nuestro c\u00f3digo de ejecuci\u00f3n. En este caso, vamos a emplear <code>return</code> para retornar un mensaje que ponga Cuenta: El cliente ????????? tiene cuenta. Con esto, ya tendriamos nuestra clase completado.</p> <p>Utilizaremos los mismos objetos <code>cli_1</code> y <code>cli_2</code> creados en el ejercicio anterior. La forma de acceder a ello es, llamamos primero al objeto <code>cli_1</code> y ponemos un <code>.</code> punto y llamamos al metodo <code>cuenta</code>. Al tratarse de un m\u00e9todo, como toda funci\u00f3n, devemos cerrarla con <code>()</code>parentesis. El c\u00f3digo quedaria de la siguiente manera <code>cli_1.cuenta()</code></p> <p>Finalizamos el ejemplo con la funci\u00f3n <code>print()</code> para imprimir en pantalla lo que hemos programado en esta clase, <code>print(cli_1.cuenta())</code> y <code>print(cli_2.cuenta())</code></p> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Cliente:\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n    def cuenta(self):\n        return f'Cuenta: El cliente {self.dni} tiene cuenta'\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', '')\n\nprint(cli_1.cuenta())\nprint(cli_2.cuenta())\n\n# salida:\n    # Cuenta: El cliente 88521596P tiene cuenta\n    # Cuenta: El cliente 96452178K tiene cuenta\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/introduccion-clases-py/#15-estructura-basica-de-una-clase","title":"1.5. Estructura b\u00e1sica de una clase:","text":"<p>Llegados aqui, aprenderemos los conceptos b\u00e1sicos que construyen una clase. Trata de leer el c\u00f3digo y entender lo que sucede en cada paso.</p> <p></p> <p>Descripci\u00f3n de conceptos:</p> <ol> <li><code>class</code> Declara una clase.</li> <li><code>Cliente</code> Asigna un nombre a la clase, siempre en PascalCase y sin guiones bajos.</li> <li><code>password = '1234'</code> Declara una variable de clase.</li> <li><code>def</code> Declara un m\u00e9todo.</li> <li><code>__init__</code> Lleva dos guiones al principio y al final del nombre, se le conoce como m\u00e9todo dunder, especial o m\u00e1gico.</li> <li><code>self</code> Es el primer atributo obligatorio siempre.</li> <li><code>dni</code>,<code>nombre</code>, <code>apellido</code> Se llaman atributos del m\u00e9todo y van separados por una <code>,</code> coma.</li> <li><code>self.dni</code> Declara una variable de instancia.</li> <li><code>dni</code> Guarda el valor de la variable de instancia.</li> <li><code>cuenta</code> Asigna un nombre al m\u00e9todo.</li> <li><code>self.password</code> Hace referencia a la variable de instancia para retornar su valor.</li> <li><code>cli_1</code> Crea un objeto.</li> <li><code>Cliente</code> Invoca a la clase desde cualquier parte de la aplicaci\u00f3n.</li> <li><code>'88521596P'</code>, <code>'Luis'</code>, <code>'Mendoza'</code> Se llaman argumentos.</li> <li><code>Print</code> Es una funci\u00f3n para imprimir en pantalla.</li> <li><code>cli_1.cuenta</code> hace referencia al objeto <code>cli_1</code> para acceder a la clase y ejecutar el m\u00e9todo <code>cuenta</code>.</li> <li>Visualizamos los datos en la pantalla.</li> </ol> <p></p> <p>C\u00f3digo Python \ud83d\udc47</p> <pre><code>class Cliente:\n    password = '1234'\n\n    def __init__(self, dni, nombre, apellido):\n        self.dni = dni\n        self.nombre = nombre\n        self.apellido = apellido\n\n    def cuenta(self):\n        return f'{self.nombre} {self.apellido}:\\nUsuario: {self.dni}\\nContrase\u00f1a: {self.password}'\n\ncli_1 = Cliente('88521596P', 'Luis', 'Mendoza')\ncli_2 = Cliente('96452178K', 'Maribel', 'Garcia')\n\nprint(cli_1.cuenta())\nprint(cli_2.cuenta())\n\n# salida:\n    # Luis Mendoza:\n    # Usuario: 88521596P\n    # Contrase\u00f1a: 1234\n    # Maribel Garcia:\n    # Usuario: 96452178K\n    # Contrase\u00f1a: 1234\n</code></pre> <ul> <li>\u2705 Facil de estructurar.</li> <li>\u2705 Facil de organizar.</li> <li>\u2705 Facil de leer.</li> <li>\u2705 Facil de escalar.</li> <li>\u2705 C\u00f3digo reutilizable.</li> </ul> <p>IMPORTANTE</p> <p>Las variables de clase son \u00fatiles cuando queremos utilizar un mismo valor en cualquiera de los metodos. Son accesibles desde cualquier m\u00e9todo. Dentro de las clases, no se recomienda el uso de las condicionales. Su uso est\u00e1 enfocado en gestionar datos y m\u00e9todos.</p> <p>\ud83d\udcac Es fundamental entender bien la estructura y la l\u00f3gica de las clases para poder seguir avanzando y evitar estancamientos en el futuro.  </p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/","title":"2. \u00bfQu\u00e9 es un m\u00e9todo dunder?","text":"<p>En programaci\u00f3n orientada a objetos, los m\u00e9todos dunder o m\u00e9todos m\u00e1gicos son funciones especiales que permiten definir comportamientos espec\u00edficos para las clases. Estos m\u00e9todos se llaman \u201cm\u00e1gicos\u201d porque su nombre comienza y termina con dos guiones bajos (__).</p> <p>TIP</p> <p>Los m\u00e9todos m\u00e1gicos son una herramienta poderosa que permite definir comportamientos espec\u00edficos para las clases en Python. Utilizarlos de forma adecuada puede hacer que nuestro c\u00f3digo sea m\u00e1s f\u00e1cil de entender y mantener.</p> <p></p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/#21-tipos-de-metodos-dunder","title":"2.1. Tipos de m\u00e9todos dunder:","text":"<ul> <li><code>__init__</code>: Se utiliza para inicializar objetos y es invocado autom\u00e1ticamente cuando se crea una instancia de la clase.</li> <li><code>__str__</code>: Se utiliza para representar el objeto en forma de cadena de texto.</li> <li><code>__len__</code>: Permite determinar la longitud de un objeto.</li> </ul> <p>Existen muchos otros m\u00e9todos m\u00e1gicos que pueden ser \u00fatiles, como <code>__add__</code> (para sumar objetos), <code>__eq__</code> (para comparar igualdad), <code>__lt__</code> (para comparar menor que), entre otros. Sin embargo, es importante tener en cuenta que no siempre es necesario utilizar estos m\u00e9todos y que su uso variar\u00e1 dependiendo de cada caso espec\u00edfico.</p> <p></p> <ul> <li> <p>Ejemplo <code>__init__</code>: <pre><code>class Persona:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\np = Persona('Juan')\nprint(p.nombre)\n</code></pre></p> </li> <li> <p>Ejemplo <code>__init__</code> con <code>__str_</code>: <pre><code>class Persona:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\n    def __str__(self):\n        return f'Mi nombre es {self.nombre}'\n\np = Persona('Juan')\nprint(p)\n</code></pre></p> </li> <li> <p>Ejemplo <code>__init__</code> con <code>__len__</code>: <pre><code>class Lista:\n    def __init__(self, elementos):\n        self.elementos = elementos\n\n    def __len__(self):\n        return len(self.elementos)\n\nl = Lista([1,2,3,4,5])\nprint(len(l)) # Imprime 5\n</code></pre></p> </li> </ul> <p>IMPORTANTE</p> <p>El primer ejemplo y el segundo ejemplo tienen el mismo resultado, lo que hace el m\u00e9todo dunder <code>__str__</code> es convertir el objeto en una cadena de texto.</p> <p></p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/#22-que-metodo-dunder-se-ejecuta-automaticamente","title":"2.2. \u00bfQu\u00e9 m\u00e9todo dunder se ejecuta autom\u00e1ticamente?","text":"<p>El m\u00e9todo <code>__init__</code>, es un m\u00e9todo especial que se ejecuta autom\u00e1ticamente al invocar la clase e inicializara los atributos del objeto que le ayamos creado. Es decir, es imposible de olvidarse llamarlo ya que se llamar\u00e1 autom\u00e1ticamente.</p> <p>IMPORTANTE</p> <p>El m\u00e9todo <code>__init__</code> es el primer m\u00e9todo que se ejecuta dentro de una clase.</p> <p></p>"},{"location":"devcamp/checkpoint-06/metodo-dunder-py/#caracteristicas","title":"\ud83d\udcdd Caracter\u00edsticas:","text":"<ul> <li>El m\u00e9todo <code>__init__</code> no puede retornar <code>return</code> datos, no devuelve nada.</li> <li>El m\u00e9todo <code>__init__</code> puede recibir par\u00e1metros que se utilizan para inicializar atributos de forma autom\u00e1tica.</li> <li>El m\u00e9todo <code>__init__</code> es un constructor de instancias.</li> <li>El m\u00e9todo <code>__init__</code> es un m\u00e9todo opcional, de todos modos es muy com\u00fan declararlo.  </li> </ul>"},{"location":"devcamp/checkpoint-06/que-es-mongodb-py/","title":"6. \u00bfEs MongoDB una base de datos SQL o NoSQL?","text":"<p>MongoDB es una base de datos NoSQL orientada a documentos que apareci\u00f3 el a\u00f1o 2007. Se utiliza para almacenar vol\u00famenes masivos de datos.</p>"},{"location":"devcamp/checkpoint-06/que-es-mongodb-py/#61-como-se-almacenan-los-datos","title":"6.1. \u00bfComo se almacenan los datos?","text":"<p>A diferencia de una base de datos relacional SQL tradicional, MongoDB no se basa en tablas y columnas. Los datos se almacenan como colecciones y documentos.</p> <p>La arquitectura de MongoDB se basa en varios componentes principales. En primer lugar, la clave _id es un campo obligatorio para cada documento que se genera de forma autom\u00e1tica. Representa un valor \u00fanico y puede considerarse como la clave principal del documento para identificar al objeto dentro de la colecci\u00f3n.</p> <p></p> <p>IMPORTANTE</p> <ul> <li>Colecciones: Se refiere a un diccionario <code>{...}</code> o lista <code>[...]</code>.</li> <li>Documentos: Se refiere a la <code>\"clave\": \"valor\"</code> dentro de un diccionario. </li> </ul> <p></p> <p></p> <pre><code>{\n    \"_id\": ObjectId(\"5cf0029caff5056591b0ce7d\"),\n    \"nombre\": \"Juan\",\n    \"apellido\": \"Garcia\",\n},\n{\n    \"_id\": ObjectId(\"6sh5930rdee4058890b0ae5c\"),\n    \"nombre\": \"Nerea\",\n    \"apellido\": \"Larralde\",\n    \"telefono\": \"666-666-444\",\n    \"direccion\":  {\n        \"codigo_postal\": \"22222\",\n        \"provincia\": \"Gipuzkoa\",\n        \"pais\": \"Espa\u00f1a\"\n    }\n}\n</code></pre> <p>IMPORTANTE</p> <p>MongoDB almacena los datos en documentos flexibles al estilo JSON pero los reconoce como BSON, esto vendria a ser un JSON binario.</p> <p></p>"},{"location":"devcamp/checkpoint-06/que-es-mongodb-py/#61-comandos-para-interactuar-con-la-base-de-datos-desde-la-terminal","title":"\ud83d\udc68\u200d\ud83d\udcbb 6.1. Comandos para interactuar con la base de datos desde la terminal:","text":"<p>MQL es el lenguaje de consulta y manipulaci\u00f3n de informaci\u00f3n que MongoDB nos provee por defecto (MongoDB Query Language). Las consultas de MongoDB se basan en el lenguaje de programaci\u00f3n JavaScript con algunas diferencias leves.</p> <p></p> <ul> <li>Consultar todos los documentos que tenemos en la base de datos sin formatear la estructura:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find()</code>.</li> </ul> </li> <li>Consultar todos los documentos que tenemos en la base de datos con la estructura formateada:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find().pretty()</code>.</li> </ul> </li> <li>Consultar todos los documentos que coincidan con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: \"Larralde\"}).pretty()</code>.</li> </ul> </li> <li>Consultar cuantos documentos coinciden con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: \"Larralde\"}).length()</code>.</li> </ul> </li> <li>Consultar cuantos documentos coinciden con el valor del apellido utilizando Regex:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: /.*Larralde.*/i})</code>.</li> </ul> </li> <li>Consultar en el documento si existe una clave o no:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.find({apellido: $exists: true})</code>.</li> </ul> </li> <li>Eliminar todos los documentos que coincidan con el valor del apellido:<ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.remove({apellido: \"Larralde\"})</code>.</li> </ul> </li> <li> <p>Eliminar un documento que coincida con el valor del apellido:</p> <ul> <li>C\u00f3digo: <code>db.nombre_de_tu_base_de_datos.remove({apellido: \"Larralde\"}, 1)</code>. </li> </ul> </li> <li> <p>Insertar un nuevo documento \ud83d\udc47 <pre><code>db.nombre_de_tu_base_de_datos.insert({\n    \"nombre\": \"Carlos\",\n    \"apellido\": \"Garrido\",\n    \"direccion\": {\n        \"codigo_postal\": \"45210\",\n        \"provincia\": \"Gipuzkoa\",\n        \"pais\": \"Espa\u00f1a\"\n    }\n});\n</code></pre> </p> </li> </ul> <p>TIP</p> <p>Descargar MongoDB desde https://www.mongodb.com/try/download/community.</p> <p>Para m\u00e1s informaci\u00f3n, consulte en su p\u00e1gina oficial.</p> <p> </p>"},{"location":"devcamp/checkpoint-06/que-es-polimorfismo-py/","title":"4. \u00bfQu\u00e9 es el polimorfismo?","text":"<p>El polimorfismo tiene como objetivo cambiar la funcionalidad entre los m\u00e9todos con el mismo nombre, en este ejemplo, tenemos tres clases, a los m\u00e9todos les hemos asignado el mismo nombre <code>desplazamiento</code>. A pesar de que lleven el mismo nombre, los podemos diferenciar creando una nueva funci\u00f3n y pasandole como atributo, por ejemplo <code>vehiculo</code>. El <code>vehiculo</code> tomara el valor de <code>mi_vehiculo</code> para hacer la m\u00e1gia del polimorfismo. A la variable <code>mi_vehiculo</code>, podemos pasarle cualquiera de las tres clases, <code>Moto()</code>, <code>Coche()</code>, <code>Camion()</code>.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>class Moto():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 2 ruedas')\n\nclass Coche():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 4 ruedas')\n\nclass Camion():\n\n    def desplazamiento(self):\n        print('Me desplazo utilizando 6 ruedas')\n\ndef desplazamiento_vehiculo(vehiculo):\n    vehiculo.desplazamiento()\n\nmi_vehiculo = Coche()\ndesplazamiento_vehiculo(mi_vehiculo)\n\n# salida:\n    # Me desplazo utilizando 4 ruedas\n</code></pre> </p> <p>IMPORTANTE</p> <p>El polimorfismo puede acceder a cualquiera de las clases y ejecutar m\u00e9todos independientemente del nombre que tengan.</p> <p> </p>"},{"location":"devcamp/checkpoint-06/que-es-un-decorador-py/","title":"3. \u00bfQu\u00e9 es un decorador?","text":"<p>Los decoradores son funciones que toman otra funci\u00f3n como argumento y anidan una nueva funci\u00f3n para agregarle c\u00f3digo extra sin alterar la existente.</p> <p>En el siguiente ejemplo, puedes ver la estructura general de una funci\u00f3n decoradora.</p> <p>TIP</p> <p>Si alguna vez has visto <code>@</code>, est\u00e1s ante un decorador.</p> <p></p> <p> </p> <p>C\u00f3digo Python \ud83d\udc47</p> <p><pre><code>def decorador(f):\n\n    def funcion_nueva():\n        print('Funcionalidad extra')\n        f()\n    return funcion_nueva\n\n@decorador\ndef funcion_inicial():\n    print('Funcionalidad inicial')\n\nfuncion_inicial()\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/que-es-un-decorador-py/#analicemos-estos-elementos-en-mas-detalle","title":"\ud83d\udd75\ufe0f Analicemos estos elementos en m\u00e1s detalle:","text":"<ul> <li> <p>Esta es la <code>funci\u00f3n_inicial</code> que el <code>@decorador</code> va tomar como referencia. <pre><code>@decorador\ndef funcion_inicial():\n    print('Funcionalidad inicial')\n\nfuncion_inicial()\n</code></pre></p> </li> <li> <p>Esta es una funci\u00f3n intermediaria que va hacer la decoradoraci\u00f3n <code>def decorador</code>. El nombre de la funci\u00f3n hace referencia a <code>@decorador</code>. Toma <code>(f)</code> como argumento para invocar <code>f()</code> m\u00e1s adelante dentro de la <code>funci\u00f3n_nueva()</code> que va ir anidada.</p> </li> </ul> <pre><code>def decorador(f):\n    def funcion_nueva():\n        print('Funcionalidad extra')\n        f()\n    return funcion_nueva\n</code></pre> <ul> <li>Si ejecutamos el c\u00f3digo, podemos ver el siguiente resultado:</li> </ul> <p><pre><code>Funcionalidad extra\nFuncionalidad inicial\n</code></pre> </p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/","title":"5. \u00bfQue es una API?","text":"<p>Una API es una (interfaz de programaci\u00f3n de aplicaciones) que sigue un conjunto de restricciones arquitecturales basadas en HTTP. Esto significa que se puede acceder a los recursos a trav\u00e9s de URLs, lo que hace que la API sea f\u00e1cil de entender y utilizar. Podemos crear una API que haga literalmente cualquier cosa, desde dar clima hasta un cat\u00e1logo completo de una tienda en l\u00ednea. Casi todas las aplicaciones utilizan APIs para conectarse con fuentes de datos corporativas, servicios de datos de terceros u otras aplicaciones.</p> <p>TIP</p> <p>El formato de intercambio de datos normalmente es JSON o XML, lo que permite que la API sea compatible con una amplia variedad de aplicaciones.</p> <p></p> <p> </p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#51-una-api-tiene-dos-componentes-principales","title":"5.1. Una API tiene dos componentes principales:","text":"<ul> <li> <p>Recursos:</p> <ul> <li>Datos o informaci\u00f3n.</li> </ul> </li> <li> <p>Verbos HTTP:</p> <ul> <li><code>GET</code> para consultar y leer.</li> <li><code>POST</code> para crear.</li> <li><code>PUT</code> para editar.</li> <li><code>DELETE</code> para eliminar.</li> </ul> </li> </ul> <p>IMPORTANTE</p> <p>Los recursos son los datos o informaci\u00f3n que se pueden acceder a trav\u00e9s de la API. Los verbos HTTP son las operaciones que se pueden realizar en esos recursos, como obtener <code>GET</code> un recurso, crear <code>POST</code> un recurso, actualizar <code>PUT</code> un recurso o eliminar <code>DELETE</code> un recurso.</p> <p></p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#52-de-donde-obtiene-la-api-toda-la-informacion","title":"5.2. \u00bfDe donde obtiene la API toda la informaci\u00f3n?","text":"<p>La informaci\u00f3n de la api no sale de la nada, necesita ser construido por alguien en formato diccionario. Se puede construir de manera manual o cargarle la informaci\u00f3n desde una base de datos. Cuando abrimos la url donde esta alojado el API, veremos un monton de datos en formato diccionario <code>{...}</code>. Puede contener anidamientos tanto de diccionarios como de listas en su interior.</p> <p>Formato de una API \ud83d\udc47 <pre><code>{\n  \"id\": 1,\n  \"nombre\": \"Juan\",\n  \"apellido\": \"Garcia\",\n  \"pais\": \"Espa\u00f1a\"\n},\n{\n  \"id\": 2,\n  \"nombre\": \"Nerea\",\n  \"apellido\": \"Larralde\",\n  \"pais\": \"Espa\u00f1a\"\n}\n</code></pre></p> <p>TIP</p> <p>Puedes practicar con esta API de Rick and Morty https://rickandmortyapi.com/api/character/ utilizando la aplicaci\u00f3n Postman https://www.postman.com/ para testear con APIs.</p> <p>Si accede a <code>https://rickandmortyapi.com/api/character/131</code> por numero de id al personaje, nos devolvera un json con toda la informaci\u00f3n.</p> <p></p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#53-que-es-postman","title":"5.3. \u00bfQu\u00e9 es Postman?","text":"<p>Se trata de una herramienta dirigida a desarrolladores web que permite realizar peticiones HTTP a cualquier API. Postman es muy \u00fatil a la hora de programar y hacer pruebas, puesto que nos ofrece la posibilidad de comprobar el correcto funcionamiento de nuestros desarrollos.</p> <p>Con esto no queremos decir que Postman sea una herramienta exclusiva para profesionales del entorno web, de hecho va a ser muy \u00fatil para todo aquel que tenga que interactuar con una API.</p>"},{"location":"devcamp/checkpoint-06/que-es-una-api-py/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li> <p>Env\u00edo de solicitudes:</p> <ul> <li>Postman permite enviar solicitudes HTTP y HTTPS utilizando m\u00e9todos como GET, POST, PUT y DELETE, entre otros. Los desarrolladores pueden especificar par\u00e1metros, encabezados y el cuerpo de la solicitud para simular diversas interacciones con una API.</li> </ul> </li> <li> <p>Pruebas automatizadas:</p> <ul> <li>Con Postman, los desarrolladores pueden crear y ejecutar pruebas automatizadas para verificar el comportamiento de una API. Esto ayuda a detectar errores de manera temprana y a garantizar que el software cumpla con los est\u00e1ndares de calidad. </li> </ul> </li> </ul> <p>TIP</p> <p>API de testeo https://rickandmortyapi.com</p> <p> </p>"},{"location":"devcamp/checkpoint-07/","title":"Checkpoint 07","text":""},{"location":"devcamp/checkpoint-07/#documentacion-javascript","title":"Documentaci\u00f3n JavaScript","text":"<p>\u00cdNDICE CHECKPOINT 07</p> <ol> <li>\u00bfQu\u00e9 diferencia a Javascript de cualquier otro lenguaje de programaci\u00f3n?</li> <li>\u00bfCu\u00e1les son algunos tipos de datos JS?</li> <li>\u00bfCu\u00e1les son las tres funciones de String en JS?</li> <li>\u00bfQu\u00e9 es un condicional?</li> <li>\u00bfQu\u00e9 es un operador ternario?</li> <li>\u00bfCu\u00e1l es la diferencia entre una declaraci\u00f3n de funci\u00f3n y una expresi\u00f3n de funci\u00f3n?</li> <li>\u00bfQu\u00e9 es la palabra clave \"this\" en JS? </li> </ol>"},{"location":"devcamp/checkpoint-07/condicionales-js/","title":"4. \u00bfQu\u00e9 es un condicional?","text":"<p>Hasta ahora, hemos visto c\u00f3mo resolver los problemas m\u00e1s sencillos pero no podemos resolver todo utilizando estructuras secuenciales. Cuando tenemos que tomar una decisi\u00f3n aparecen las estructuras condicionales. Por ejemplo, en nuestra vida diaria hay momentos donde tenemos que decidir entre un pantal\u00f3n u otro, un camino u otro. En estos casos es com\u00fan resolver un problema combinando estructuras secuenciales y condicionales.</p> <p>JavaScript cuenta con 4 tipos de condicionales:</p> <ul> <li>Condicional if</li> <li>Condicional else</li> <li>Condicional else if</li> <li>Condicional switch </li> </ul>"},{"location":"devcamp/checkpoint-07/condicionales-js/#41-condicional-simple-con-if","title":"4.1. Condicional simple con if","text":"<p>Podemos ver un ejemplo de una estructura condicional simple con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>Puedes usar if solo una vez por bloque y no es obligatorio complementarlo con else.</p> <p> </p> <p>Podemos observar en el esquema que el rombo representa la condici\u00f3n y tenemos dos opciones que podemos tomar. Si la condici\u00f3n devuelve un resultado verdadero, ejecutar\u00e1 las opciones que se encuentren en su interior, si por el contrario es falso, no realizar\u00e1 dicha acci\u00f3n.</p> <p>Vamos a ver el primer ejemplo y el mas simple con el if, le pasamos por variable <code>edad = 20</code>, si tiene 18 o mas a\u00f1os, muestra un mensaje <code>Soy mayor de edad porque tengo 18 o mas a\u00f1os.</code> y si tiene menos de 18 a\u00f1os, no nos muestra ningun mensaje.</p> ejemplo.js<pre><code>let edad = 20;\nif (edad &gt;= 18) {\n    console.log(`Soy mayor de edad porque tengo ${edad} o mas a\u00f1os.`)\n}\n</code></pre> <p>La palabra clave <code>if</code> implica el inicio de una condici\u00f3n, seguidamente incluimos la condici\u00f3n entre <code>()</code> par\u00e9ntesis y finalizamos la l\u00ednea con el car\u00e1cter <code>{</code> apertura de llave.</p> <p>Una de las caracter\u00edsticas de JavaScript que adem\u00e1s ayuda a tener una estructura organizada es la indentaci\u00f3n o sangrado de texto con dos o cuatro espacios. Es decir, si queremos incluir una condici\u00f3n, el texto que deba ir en su interior debe ir con cuatro espacios con respecto al inicio de la palabra <code>if</code>.</p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#42-condicional-alternativa-con-if-else","title":"4.2. Condicional alternativa con if else","text":"<p>Podemos ver un ejemplo de una estructura condicional compuesta con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>Puedes usar else solo una vez por condici\u00f3n if.</p> <p> </p> <p>Cuando se presenta una elecci\u00f3n entre if o else, tenemos la opci\u00f3n de realizar una acci\u00f3n u otra, es decir, tenemos operaciones diferentes a ejecutar si la condici\u00f3n es verdadera o es falsa. Es decir, se tomara una de las 2 elecciones de la bifurcaci\u00f3n.</p> <p>Vamos a volver a realizar el ejercicio anterior pero, con la diferencia, de que si la edad es menor a 18 a\u00f1os, nos muestre un mensaje <code>Soy menor de edad porque tengo menos de 18 a\u00f1os.</code>.</p> ejemplo.js<pre><code>edad = 16;\nif (edad &gt;= 18) {\n    console.log(`Soy mayor de edad porque tengo ${edad} o mas a\u00f1os.`)\n}\nelse {\n    console.log(`Soy menor de edad porque tengo menos de ${edad} a\u00f1os.`);\n}\n</code></pre> <p>Como podemos ver, si la condici\u00f3n es falsa, y queremos que realice una operaci\u00f3n, la forma ser\u00eda incluyendo la palabra <code>else</code> en una l\u00ednea nueva seguida del car\u00e1cter <code>{</code> apertura de llave. Despu\u00e9s las operaciones necesarias que queramos ejecutar separadas con 4 espacios con respecto a la l\u00ednea de la palabra <code>else</code>. Despues de la operaci\u00f3n y en una nueva l\u00ednea, toca cerrar <code>}</code> la llave y con eso, finaliza el bloque <code>else</code>.</p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#43-condicional-encadenada-con-if-else-if-else","title":"4.3. Condicional encadenada con if else if else","text":"<p>Podemos ver un ejemplo de una estructura condicional encadenada con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>El flujo de ejecucci\u00f3n se prioriza siempre de arriba hacia abajo y puedes crear tantas else if que desees.</p> <p> </p> <p>Cuando se presentan mas de dos elecci\u00f3nes a elegir entre <code>if</code> <code>else if</code> y <code>else</code>, se tomara como v\u00e1lida, solamente una de las 3 elecciones de la bifurcaci\u00f3n. El flujo de ejecuci\u00f3n se priorizara siempre de arriba hacia abajo.</p> <p>Vamos a volver a realizar el ejercicio anterior con una condici\u00f3nal mas, que sera la condicional <code>else if</code>, pero con la diferencia, de que si la edad es mayor o igual a 67 a\u00f1os, nos muestre un mensaje <code>Tengo 70 a\u00f1os y estoy jubilado.</code>. El resto de las condicionales se mantienen igual.</p> ejemplo.js<pre><code>let edad = 36;\n\nif (edad &gt;= 67) {\n    console.log(`Tengo ${edad} a\u00f1os y estoy jubilado.`);\n}\nelse if (edad &gt;= 18) {\n    console.log(`Soy mayor de edad porque tengo ${edad} o mas a\u00f1os.`)\n}\nelse {\n    console.log(`Soy menor de edad porque tengo menos de ${edad} a\u00f1os.`);\n}\n</code></pre> <p>Como vemos en el ejempo anterior, el uso de la condicional else if, nos da la posibilidad de crear muchas condiciones sobre un mismo if ya que su uso no esta limitado. Recuerda que cuanto mas corto y menos condicionales tenga el bloque, mas legible sera el c\u00f3digo.</p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#44-condicionales-anidadas","title":"4.4. Condicionales anidadas","text":"<p>Podemos ver un ejemplo de una estructura condicional anidado con el siguiente esquema.</p> <p>IMPORTANTE</p> <p>Podemos tener infinidad de condiciones anidadas pero en la medida de lo posible, procuraremos anidar lo menos posible.</p> <p> </p>"},{"location":"devcamp/checkpoint-07/condicionales-js/#45-condicional-switch","title":"4.5. Condicional switch","text":"<p>La estructura de control switch permite definir casos espec\u00edficos a realizar cuando la variable expuesta como condici\u00f3n sea igual a los valores que se especifican a continuaci\u00f3n mediante cada case:.</p> <p>Las sentencias switch no ser\u00e1n apropiadas para usar en todas las situaciones. Pero si sientes que las sentencias else if son largas y complicadas, entonces una sentencia switch podr\u00eda ser una opci\u00f3n alternativa. Aunque, mucha gente opina que en lugar de mejorar la legibilidad, normalmente la empeora.</p> <p>Veamos un ejemplo de c\u00f3mo se utiliza:</p> ejemplo.js<pre><code>let numero = 88734;\n\nswitch (numero) {\n    case 00003:\n        console.log('\u00a1Primer premio!');\n        break;\n    case 00012:\n        console.log('\u00a1Segundo premio!');\n        break;\n    case 88734:\n        console.log('\u00a1Tercer premio!');\n        break;\n    // con default, toma la salida de cualquier otra opci\u00f3n\n    default:\n        console.log(`El n\u00famero ${numero} no tiene premio`);\n        break;\n}\n</code></pre> <p>El valor de la variable (<code>numero</code>) es 88734, toma la salida (<code>case 88734</code>) con el mensaje \u00a1Tercer premio!</p> <ul> <li>switch: Se define el tipo de condici\u00f3n que debe cumplir, en este caso, compara el valor de la variable con la opci\u00f3n.</li> <li>case 00003: Es la primera opci\u00f3n, si cumple la condici\u00f3n, toma la salida y sale con el break, si no cumple, continua</li> <li>case 00012: Es la segunda opci\u00f3n, si cumple la condici\u00f3n, toma la salida y sale con el break, si no cumple, continua</li> <li>case 88734: Es la tercera opcion, si cumple la condici\u00f3n, toma la salida y sale con el break, si no cumple, continua</li> <li>default: Si no cumple con ninguna condicion anterior, toma la salida con el mensaje (<code>El n\u00famero (?) no tiene premio</code>) y sale con el break</li> </ul> <p> </p>"},{"location":"devcamp/checkpoint-07/declaracion-de-funcion-vs-expresion-de-funcion-js/","title":"6. \u00bfCu\u00e1l es la diferencia entre una declaraci\u00f3n de funci\u00f3n y una expresi\u00f3n de funci\u00f3n?","text":"<p>JavaScript al ser un lenguaje din\u00e1mico, tiene ciertos mecanismos para garantizar que la ejecuci\u00f3n de nuestro c\u00f3digo sea la m\u00e1s \u00f3ptima y correcta.</p> <p>Tenemos dos maneras principales de definir funciones:</p> <ul> <li>Podemos definir una funci\u00f3n declarando </li> <li>Podemos definir una funci\u00f3n como una expresi\u00f3n</li> </ul> <p>Veamos un ejemplo para compararlos:</p> ejemplo.js<pre><code>// Declaracion de funcion\nfunction saludar() {\n    console.log('Hola');\n}\n\n// Expresion de funcion\nlet saludar = function() {\n    console.log('Hola');\n};\n</code></pre>"},{"location":"devcamp/checkpoint-07/declaracion-de-funcion-vs-expresion-de-funcion-js/#analicemos-las-diferencias","title":"\ud83d\udd75\ufe0f Analicemos las diferencias","text":"<p>Declaraci\u00f3n de funci\u00f3n:</p> <ul> <li>S\u00f3lo es visible dentro del bloque de c\u00f3digo en el que reside, por ejemplo dentro de un <code>if</code></li> <li>JavaScript precarga todas las funciones declaradas al inicio y puede llamarse antes o despues de la funci\u00f3n</li> </ul> <p>Expresi\u00f3n de funci\u00f3n:</p> <ul> <li>Es visible dentro y fuera del bloque de c\u00f3digo en el que reside pudiendo declarar una variable fuera del bloque</li> <li>Se define dentro de una variable como una expresi\u00f3n normal, por eso lleva <code>;</code> punto y coma al final de la funci\u00f3n</li> <li>Solo puede llamarse despues de la funci\u00f3n, si se llama antes de la funci\u00f3n tira error de (variable no est\u00e1 definida)</li> </ul> <p>Las diferencias de sintaxis son claras.</p> <p>Veamos el mismo ejemplo anterior, agregando una llamada antes de la funci\u00f3n:</p> ejemplo.js<pre><code>// Declaracion de funcion\nsaludar() // Salida: Hola\n\nfunction saludar() {\n    console.log('Hola');\n}\n\n// Expresion de funcion\nsaludar(); // Error: saludar no est\u00e1 definida\n\nlet saludar = function() {\n    console.log('Hola');\n};\n</code></pre> <p>En el caso de expresi\u00f3n de funci\u00f3n nos da el error de (variable no est\u00e1 definida), cosa que en la declaraci\u00f3n de funci\u00f3n no ocurre gracias a la precarga de las declaraciones al inicio.</p> <p>IMPORTANTE</p> <p>En las expresiones de funciones darle nombre a la funci\u00f3n es opcional. En cambio para las declaraciones es obligatorio.</p> <p>No hay una forma mejor o peor de declarar funciones, lo bueno es conocer las herramientas que tenemos, sus implicaciones y saber cuando podemos usarlas para crear c\u00f3digo legible y limpio.</p> <p>Veamos un ejemplo mas completo:</p> ejemplo.js<pre><code>// Expresion de funcion\nlet edad = 32;\nlet entradaCasino;\n\nif (edad &gt;= 18) {\n    entradaCasino = function() {\n        console.log('Puedes entrar al casino');\n    };\n}\nelse {\n    entradaCasino = function() {\n        console.log('No puedes entrar al casino');\n    };\n}\n\nentradaCasino(); // Salida: Puedes entrar al casino\n</code></pre> <p>Con la expresion de funcion, podemos llamar a cualquier funci\u00f3n este donde este. Gracias a la variable entradaCasino, nos permite ver la funci\u00f3n an\u00f3nima dentro del bloque if desde el exterior.  </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/","title":"1. \u00bfQu\u00e9 diferencia a Javascript de cualquier otro lenguaje de programaci\u00f3n?","text":"<p>JavaScript es un lenguaje de programaci\u00f3n b\u00e1sico para la creaci\u00f3n de sitios web din\u00e1micos e interactivos. Se usa en navegadores, servidores y aplicaciones para mejorar la experiencia del usuario. Aunque se llama JavaScript, no debe confundirse con Java.</p> <p>Su principal ventaja es que se ejecuta directamente en el navegador del usuario, sin necesidad de compilar el c\u00f3digo previamente.</p> <p>El flujo de ejecuci\u00f3n es la siguiente:</p> <ol> <li>El navegador carga el c\u00f3digo JavaScript en una web</li> <li>El motor de JavaScript lo interpreta y ejecuta</li> <li>Interact\u00faa con el DOM (Document Object Model), que modifica elementos HTML en tiempo real</li> <li>Puede comunicarse con servidores mediante AJAX o Fetch API para obtener y enviar datos sin recargar la p\u00e1gina</li> <li>Maneja eventos como clics de botones para mejorar la interactividad  </li> </ol> <p>Veamos el siguiente ejemplo:</p> <ol> <li>Pulsa el bot\u00f3n</li> <li>Escucha el evento click</li> <li>Ejecuta la funci\u00f3n</li> <li>Cambia el texto del bot\u00f3n</li> </ol> ejemplo.html<pre><code>&lt;!-- crea un boton que pone Start --&gt;\n&lt;button class=\"btn-start\"&gt;Start&lt;/button&gt;\n</code></pre> ejemplo.js<pre><code>// captura el elemento DOM\nconst btnStart = document.querySelector('.btn-start');\n\n// captura el evento\nbtnStart.addEventListener('click', changeText);\n\n// funci\u00f3n para cambiar el texto del boton\nfunction changeText() {\n    btnStart.innerHTML = 'Texto cambiado';\n}\n</code></pre> <p>An\u00e1lisis del c\u00f3digo:</p> <p>Revisa lo que hace el c\u00f3digo, desde ejemplo.js captura el objeto DOM del ejemplo.html y para ello, hace referencia a la clase \"btn-start\". Una vez capturado el objeto DOM, lo guarda en una variable llamada btnStart para luego poner en escucha y capturar el evento 'click', para llamar a la funci\u00f3n changeText.  </p> <p>Cuando se aprende JavaScript, es esencial entender la relaci\u00f3n entre HTML, CSS y JavaScript, y c\u00f3mo se unen para mostrar un sitio web. Aunque la mayor\u00eda de las aplicaciones de JavaScript son del lado del cliente (FRONTEND), este lenguaje tambi\u00e9n es \u00fatil en aplicaciones del lado del servidor (BACKEND), como la creaci\u00f3n de servidores web.</p> <p>Caracter\u00edsticas de JavaScript:</p> <ul> <li>Multiparadigma: Soporta programaci\u00f3n orientada a objetos, funcional e imperativa</li> <li>Din\u00e1mico y flexible: No requiere declaraci\u00f3n expl\u00edcita de tipos de datos</li> <li>Basado en eventos: Responde a interacciones del usuario</li> <li>Compatible con todos los navegadores: Funciona en cualquier navegador moderno</li> <li>As\u00edncrono y concurrente: Permite manejar tareas en paralelo con promesas y async/await</li> </ul> <p>Ventajas</p> <ul> <li>Es f\u00e1cil de aprender y usar.</li> <li>Se ejecuta en el navegador, sin necesidad de compilaci\u00f3n</li> <li>Amplia compatibilidad con diferentes plataformas</li> <li>Ecosistema extenso con miles de librer\u00edas y frameworks</li> <li>Soporte para desarrollo full-stack con Node.js</li> </ul> <p>Desventajas</p> <ul> <li>Manejo de errores menos estricto comparado con otros lenguajes</li> <li>Uso excesivo puede afectar el rendimiento de una p\u00e1gina web</li> </ul> <p></p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#11-sintaxis-de-javascript","title":"1.1. Sintaxis de JavaScript","text":"<p>JavaScript tiene una serie de normas b\u00e1sicas de sintaxis que debemos seguir.</p> <p>Variables:</p> <p>puedes declarar variables usando las palabras clave <code>var</code>, <code>const</code> o <code>let</code>.</p> <ul> <li><code>let</code> Permite declarar variables limitando su alcance al bloque, fuera de ella no tiene efecto</li> <li><code>const</code> Son como las <code>let</code>, solo que su valor no cambiara a lo largo del programa</li> <li><code>var</code> Permite declarar variables con alcance dentro y fuera del bloque, se entienden como globales.</li> </ul> <p>IMPORTANTE</p> <p>No se recomienda el uso de <code>var</code> en Javascript, porque puede dar lugar a problemas y confusiones.</p> <p>Punto y coma para finalizar sentencias:</p> <p>En JavaScript, cada instrucci\u00f3n generalmente termina con un <code>;</code> punto y coma. Es una buena pr\u00e1ctica usar el punto y coma siempre. De lo contrario, puede dar errores.</p> <p>Instrucciones y ejecuci\u00f3n secuencial:</p> <p>En JavaScript, el c\u00f3digo est\u00e1 compuesto por instrucciones que se ejecutan de forma secuencial. Esto significa que las instrucciones se ejecutan una tras otra, de arriba hacia abajo, en el orden en que aparecen.</p> <p>Llaves para delimitar bloques de c\u00f3digo:</p> <p>Las llaves <code>{}</code> en JavaScript se utilizan para definir bloques de c\u00f3digo, especialmente en estructuras de control como funciones, bucles o condiciones.</p> <p>Sensibilidad a may\u00fasculas y min\u00fasculas:</p> <p>JavaScript es un lenguaje que diferencia entre may\u00fasculas y min\u00fasculas (case-sensitive). Esto significa que distingue entre nombre, Nombre y NOMBRE, consider\u00e1ndolos variables diferentes.</p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#buenas-practicas-al-nombrar-variables","title":"<p>Buenas pr\u00e1cticas al nombrar variables:</p>","text":"<ul> <li>Aunque JavaScript no lo exige, es de buena pr\u00e1ctica utilizar camelCase para nombrar variables</li> <li>Una variable no puede comenzar con un n\u00famero.</li> <li>Un nombre de variable no puede contener espacios.</li> <li>No pueden incluir s\u00edmbolos especiales como (!, @, #, %) a excepci\u00f3n del guion bajo (_) y el s\u00edmbolo de d\u00f3lar ($).</li> </ul>"},{"location":"devcamp/checkpoint-07/introduccion-js/#algunas-palabras-reservadas","title":"<p>Algunas palabras reservadas:</p>","text":"<ul> <li>Control de flujo: if, else, switch, case, default</li> <li>Ciclos: for, while, do, break, continue</li> <li>Declaraci\u00f3n de variables y funciones: var, let, const, function, return</li> <li>Manipulaci\u00f3n de objetos y clases: class, extends, constructor, super</li> <li>Valores especiales: null, undefined, true, false</li> <li>Operaciones asincr\u00f3nicas: async, await</li> <li>Operadores de importaci\u00f3n/exportaci\u00f3n: import, export</li> <li>Operadores l\u00f3gicos y aritm\u00e9ticos: new, delete, typeof, instanceof</li> </ul> <p>PRECAUCI\u00d3N</p> <p>Estas palabras son utilizadas por el lenguaje para funciones espec\u00edficas y su uso como nombres provocar\u00e1 errores.</p> <p></p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#12-comentarios-en-javascript","title":"1.2. Comentarios en JavaScript","text":"<p>Su prop\u00f3sito es proporcionar explicaciones o notas para los desarrolladores que leen el c\u00f3digo. En JavaScript, los comentarios pueden ser de dos tipos.</p> <ul> <li>Comentarios de una sola l\u00ednea</li> <li>Comentarios de varias l\u00edneas </li> </ul>"},{"location":"devcamp/checkpoint-07/introduccion-js/#comentarios-de-una-sola-linea","title":"Comentarios de una sola l\u00ednea:","text":"<p>Los comentarios de una sola l\u00ednea comienzan con dos barras inclinadas (<code>//</code>). Todo el texto que sigue a estas barras en la misma l\u00ednea es considerado un comentario y es ignorado por el int\u00e9rprete de JavaScript.</p> ejemplo.js<pre><code>// Este es un comentario de una sola l\u00ednea\nlet nombre = \"Roberto\"; // Tambi\u00e9n se puede usar al final de una l\u00ednea de c\u00f3digo\n</code></pre>"},{"location":"devcamp/checkpoint-07/introduccion-js/#comentarios-de-varias-lineas","title":"Comentarios de varias l\u00edneas:","text":"<p>Los comentarios de varias l\u00edneas se encierran entre <code>/*</code> y <code>*/</code>. Todo el texto dentro de estos delimitadores es considerado un comentario y es ignorado por el int\u00e9rprete.</p> <p>ejemplo.js<pre><code>/*\nEste es un comentario de varias l\u00edneas.\nPuede abarcar m\u00faltiples l\u00edneas.\nEs \u00fatil para explicaciones m\u00e1s largas o para desactivar bloques de c\u00f3digo.\n*/\nlet edad = 36;\n</code></pre> </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#13-como-usar-la-consola-en-javascript","title":"1.3. C\u00f3mo usar la consola en JavaScript","text":"<p>En JavaScript la consola se usa cont\u00ednuamente. El m\u00e9todo mas utilizado es <code>console.log</code>. Su prop\u00f3sito principal es imprimir informaci\u00f3n en la consola.</p> <p>Veamos el siguiente ejemplo:</p> ejemplo.js<pre><code>let mensaje = '\u00a1Hola mundo!';\n\n// varios ejemplos de salida:\nconsole.log(mensaje); // \u00a1Hola mundo!\nconsole.log(`Este es mi primer ${mensaje}`); // Este es mi primer \u00a1Hola mundo!\n</code></pre> <p>Esto es \u00fatil para verificar que las variables contienen los valores esperados y que el flujo de ejecuci\u00f3n es el correcto. </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#14-como-usar-la-ventana-emergente-en-javascript","title":"1.4. C\u00f3mo usar la ventana emergente en JavaScript","text":"<p>En JavaScript la ventana emergente se usa cont\u00ednuamente. El m\u00e9todo mas utilizado es <code>alert</code>. Su prop\u00f3sito principal es imprimir informaci\u00f3n en la ventana emergente.</p> <p>Veamos el siguiente ejemplo:</p> ejemplo.js<pre><code>let mensaje = '\u00a1Hola mundo!';\n\n// varios ejemplos de salida:\nalert(mensaje) // \u00a1Hola mundo!\nalert(`Este es mi primer ${mensaje}`); // Este es mi primer \u00a1Hola mundo!\n</code></pre> <p>Esto es \u00fatil para verificar que las variables contienen los valores esperados y que el flujo de ejecuci\u00f3n es el correcto. </p>"},{"location":"devcamp/checkpoint-07/introduccion-js/#15-indentacion-de-codigo","title":"1.5. Indentaci\u00f3n de c\u00f3digo","text":"<p>A medida que escribimos l\u00edneas de c\u00f3digo en nuestro programa, este se ir\u00e1 complicando y nos tomar\u00e1 m\u00e1s tiempo leer lo que hemos hecho y comprobar si hay errores o buscar como solucionarlos. Sin embargo, para mejorar la rapidez con la que leemos y entendemos el c\u00f3digo, una buena pr\u00e1ctica es usar la indentaci\u00f3n.</p> <p>A la hora de indentar c\u00f3digo hay dos opciones:</p> <ul> <li>Usar espacios</li> <li>Usar tabuladores</li> </ul> <p>Utilizar una u otra estrategia de tabulaci\u00f3n depende del programador, pero lo importante es siempre utilizar la misma. En mis ejemplos, suelo utilizar indentaci\u00f3n a 4 espacios porque me resulta m\u00e1s pr\u00e1ctico leer.  </p>"},{"location":"devcamp/checkpoint-07/operador-ternario-js/","title":"5. \u00bfQu\u00e9 es un operador ternario?","text":"<p>El operador ternario es una forma abreviada de la estructura if...else y es \u00fatil cuando queremos tomar decisiones basadas en una condici\u00f3n.</p> <p>Se compone de tres partes:</p> <ul> <li>Una expresi\u00f3n condicional</li> <li>Una expresi\u00f3n que se eval\u00faa si la condici\u00f3n es verdadera</li> <li>Una expresi\u00f3n que se eval\u00faa si la condici\u00f3n es falsa</li> </ul> <p>La sintaxis b\u00e1sica del operador ternario es la siguiente:</p> ejemplo.js<pre><code>condicion ? expresion_verdadera : expresion_falsa\n</code></pre> <ul> <li>condicion: Una expresi\u00f3n que se eval\u00faa como verdadera o falsa</li> <li>expresion_verdadera: La expresi\u00f3n que se ejecutar\u00e1 si condicion es verdadera</li> <li>expresion_falsa: La expresi\u00f3n que se ejecutar\u00e1 si condicion es falsa</li> </ul> ejemplo.js<pre><code>const edad = 36;\n\nconst mensaje = edad &gt;= 18 ? 'Eres mayor de edad' : 'Eres menor de edad';\n\nconsole.log(mensaje); // Salida: Eres mayor de edad\n</code></pre>"},{"location":"devcamp/checkpoint-07/operador-ternario-js/#51-anidamiento-de-operadores-ternarios","title":"5.1. Anidamiento de operadores ternarios","text":"<p>Es posible anidar operadores ternarios para expresiones condicionales m\u00e1s complejas. Los operadores ternarios encadenados (o anidados) hacen que el c\u00f3digo sea imposible de leer en algunos casos. Lo ideal seria usar switch/case o if/else en su lugar.</p> <p>Veamos un ejemplo:</p> ejemplo.js<pre><code>const calificacion = 8;\n\nconst resultado = calificacion &lt;   5 ? 'Suspenso' :\n                  calificacion &lt;   7 ? 'Aprobado' :\n                  calificacion &lt;   9 ? 'Notable' :\n                  calificacion &lt;  10 ? 'sobresaliente' :\n                  calificacion == 10 ? 'Matr\u00edcula de honor' :\n                                       'Introduzca un n\u00famero del 0 al 10';\n\nconsole.log(resultado); // Salida: Notable\n</code></pre> <p>IMPORTANTE</p> <p>Es importante mantener la legibilidad del c\u00f3digo al hacerlo.</p> <p> </p>"},{"location":"devcamp/checkpoint-07/que-es-this-js/","title":"7. \u00bfQu\u00e9 es la palabra clave \"this\" en JS?","text":"<p>Una de las caracter\u00edsticas de JavaScript que m\u00e1s confusi\u00f3n genera es la palabra clave this. M\u00e1s concretamente a qu\u00e9 o qui\u00e9n hace referencia y en qu\u00e9 circunstancias.</p> <p>this es una palabra clave que se utiliza mucho dentro de las clases para hacer referencia al objeto instanciado. Cuando se crea una funci\u00f3n dentro de una clase, esta funci\u00f3n  pasa a llamarse m\u00e9todo. El primer m\u00e9todo siempre sera el constructor, se encarga de declarar atributos, el this hace referencia a cualquier atributo que se le pase dentro de esa misma clase. si se utilizara fuera de \u00e9sta clase, ar\u00eda referencia a otra cosa.</p> <p>Veamos un ejemplo de clase:</p> <p>ejemplo.js<pre><code>class Cliente {\n\n    provincia = 'Guipuzcoa'; // atributo global / variable de clase\n\n    constructor(nombre, apellido, telefono) {\n        this.nombre = nombre;\n        this.apellido = apellido;\n        this.telefono = telefono;\n    }\n\n    datos() {\n        return 'Nombre: ' + this.nombre + '\\n' +\n               'Apellido: ' + this.apellido + '\\n' +\n               'Tel\u00e9fono: ' + this.telefono + '\\n' +\n               'Provincia: ' + this.provincia;\n    }\n}\n\nconst cli_1 = new Cliente('Nerea', 'Zelaieta', '666-666-666');\nconst cli_2 = new Cliente('Roberto', 'Mendiburu', '333-666-666');\n\nconsole.log(cli_1.datos());\nconsole.log(cli_2.datos());\n\n/*\nSalida: Nombre: Nerea\n        Apellido: Zelaieta\n        Tel\u00e9fono: 666-666-666\n        Provincia: Guipuzcoa\n        Nombre: Roberto\n        Apellido: Mendiburu\n        Tel\u00e9fono: 333-666-666\n        Provincia: Guipuzcoa\n*/\n</code></pre> </p> <p>Veamos un ejemplo de objeto:</p> ejemplo.js<pre><code>const usuario = {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu',\n    telefono: '333-666-666',\n\n    mostrar() {\n        console.log(this);\n    }\n};\n\nusuario.mostrar();\n\n/*\nSalida: Nombre: Roberto\n        Apellido: Mendiburu\n        Tel\u00e9fono: 333-666-666\n        mostrar: [Function: mostrar]\n*/\n</code></pre> <p>Cuando se crea una funci\u00f3n dentro de un objeto, esta funci\u00f3n  pasa a llamarse m\u00e9todo. El this hace referencia al objeto que lo envuelve. La ejecuci\u00f3n de este c\u00f3digo nos imprime el objeto completo que el this hace referencia.  </p> <p>Veamos un ejemplo simple:</p> ejemplo.js<pre><code>function usuario() {\n    console.log(this);\n}\n\nconsole.log(usuario()); // Object [global]\n\n/*\nSalida: Object [global]\n*/\n</code></pre> <p>Hace referencia al objeto global.</p> <p> </p>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/","title":"2. \u00bfCu\u00e1les son algunos tipos de datos JS?","text":"<p>Los tipos de datos en JavaScript son atributos que determinan el tipo de valor que puede contener una variable. Estos tipos de datos son utilizados para representar diferentes tipos de informaci\u00f3n.</p> <p>JavaScript es un lenguaje de programaci\u00f3n de tipado din\u00e1mico, lo que significa que no es necesario declarar expl\u00edcitamente el tipo de una variable al momento de su creaci\u00f3n. Pero eso no significa que JavaScript no tenga tipos. Simplemente el tipo se determina autom\u00e1ticamente cuando se asigna un valor. </p>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#21-tipos-de-datos-primitivos","title":"2.1. Tipos de datos primitivos","text":"<p>Los tipos de datos primitivos son aquellos que representan valores individuales y no tienen m\u00e9todos o propiedades. Son inmutables, lo que significa que no se pueden cambiar una vez que se han creado.</p> <ul> <li>Cadena de texto (string)</li> <li>N\u00fameros (number)</li> <li>Booleano (boolean)</li> <li>Valor null</li> <li>Valor undefined </li> </ul>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#string","title":"string:","text":"<p>El tipo de datos <code>string</code> representa una secuencia de caracteres, como texto o palabras. Las cadenas se deben encerrar entre comillas simples <code>' '</code> o dobles <code>\" \"</code>.</p> <pre><code>let nombre = 'Roberto';\nlet mensaje = \"\u00a1Hola mundo!\";\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#number","title":"number:","text":"<p>El tipo de datos <code>number</code> en JavaScript representa tanto n\u00fameros enteros como de punto flotante.</p> <pre><code>let edad = 36;\nlet precio = 99.95;\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#boolean","title":"boolean:","text":"<p>El tipo de datos <code>boolean</code> representa un valor de verdad, que puede ser <code>true</code> (verdadero) o <code>false</code> (falso). Es \u00fatil en expresiones condicionales y l\u00f3gicas.</p> <pre><code>let esHombre = true;\nlet esMujer = false;\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#null","title":"null:","text":"<p>En JavaScript, <code>null</code> es un valor especial que representa la ausencia intencional de cualquier objeto o valor.</p> <pre><code>let Unidades = null;\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#undefined","title":"undefined:","text":"<p>El valor <code>undefined</code> indica que una variable ha sido declarada pero a\u00fan no se le ha asignado ning\u00fan valor.</p> <p><pre><code>let unidades;\nconsole.log(unidades); // Salida: undefined\n</code></pre> </p>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#22-tipos-de-datos-compuestos","title":"2.2. Tipos de datos compuestos","text":"<p>Los tipos de datos compuestos en JavaScript son aquellos que pueden contener m\u00faltiples valores y tienen m\u00e9todos y propiedades. Son mutables, lo que significa que pueden cambiar despu\u00e9s de su creaci\u00f3n.</p> <ul> <li>Arrays (array)</li> <li>Objetos (object) </li> </ul>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#array","title":"array:","text":"<p>Los arrays en JavaScript son objetos especiales que permiten almacenar m\u00faltiples valores en una sola variable, indexados num\u00e9ricamente.</p> <pre><code>let animales = ['perro', 'oveja', 'caballo'];\n</code></pre>"},{"location":"devcamp/checkpoint-07/tipos-de-datos-js/#object","title":"object:","text":"<p>Los objetos en JavaScript son colecciones de pares clave-valor, donde la clave es una cadena (o s\u00edmbolo) y el valor puede ser cualquier tipo de dato, incluidos otros objetos.</p> <p><pre><code>let persona = {\n    nombre: 'Roberto',\n    edad: 36,\n    casado: true\n};\n</code></pre> </p>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/","title":"3. \u00bfCu\u00e1les son las tres funciones de String en JS?","text":"<p>JavaScript ofrece numerosas funciones predefinidas que facilitan el trabajo con cadenas de texto (string). Entre las posibilidades que ofrecen estas funciones tenemos el <code>replace()</code>, <code>toLowerCase()</code>, <code>toUpperCase()</code>, etc.</p>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/#replace","title":"replace():","text":"<p>El m\u00e9todo .replace acepta dos argumentos: la cadena que se reemplazar\u00e1 y con qu\u00e9 se reemplazar\u00e1 la cadena. Las cadenas en JavaScript son inmutables, el m\u00e9todo <code>replace()</code> no cambia el valor de la cadena especificada, nos devuelve un nuevo valor.</p> ejemplo.js<pre><code>let nombre = 'Roberto@gmail.com';\n\nlet resultado = nombre.replace('@gmail.com', '');\n\nconsole.log(resultado); // Salida: Roberto\nconsole.log(nombre); // Salida: Roberto@gmail.com\n</code></pre>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/#tolowercase","title":"toLowerCase():","text":"<p>Las cadenas en JavaScript son inmutables, el m\u00e9todo <code>toLowerCase()</code> no cambia el valor de la cadena especificada, nos devuelve un nuevo valor.</p> ejemplo.js<pre><code>let nombre = 'Roberto';\n\nlet resultado = nombre.toLowerCase();\n\nconsole.log(resultado); // Salida: roberto\nconsole.log(nombre); // Salida: Roberto\n</code></pre>"},{"location":"devcamp/checkpoint-07/tres-funciones-de-string-js/#touppercase","title":"toUpperCase():","text":"<p>Las cadenas en JavaScript son inmutables, el m\u00e9todo <code>toUpperCase()</code> no cambia el valor de la cadena especificada, nos devuelve un nuevo valor.</p> <p>ejemplo.js<pre><code>let nombre = 'Roberto';\n\nlet resultado = nombre.toUpperCase();\n\nconsole.log(resultado); // Salida: ROBERTO\nconsole.log(nombre); // Salida: Roberto\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/","title":"Checkpoint 08","text":""},{"location":"devcamp/checkpoint-08/#documentacion-javascript","title":"Documentaci\u00f3n JavaScript","text":"<p>\u00cdNDICE CHECKPOINT 08</p> <ol> <li>\u00bfQu\u00e9 tipo de bucles hay en JS?</li> <li>\u00bfCu\u00e1les son las diferencias entre const, let y var?</li> <li>\u00bfQu\u00e9 es una funci\u00f3n de flecha?</li> <li>\u00bfQu\u00e9 es la deconstrucci\u00f3n de variables?</li> <li>\u00bfQu\u00e9 hace el operador de extensi\u00f3n en JS?</li> <li>\u00bfQu\u00e9 es la programaci\u00f3n orientada a objetos?</li> <li>\u00bfQu\u00e9 es una promesa en JS?</li> <li>\u00bfQu\u00e9 hacen async y await por nosotros? </li> </ol>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/","title":"3. \u00bfQu\u00e9 es una funci\u00f3n de flecha?","text":"<p>Las funciones flecha permiten escribir funciones de manera m\u00e1s concisa y legible, especialmente cuando se trata de funciones cortas o funciones de una sola l\u00ednea.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#sintaxis-de-una-funcion-flecha","title":"Sintaxis de una funci\u00f3n flecha:","text":"<ul> <li> <p>La sintaxis b\u00e1sica de una funci\u00f3n flecha es la siguiente: () =&gt; {}</p> <ul> <li>() Se utiliza para pasarle atributos a una funci\u00f3n</li> <li>=&gt; Se define como funci\u00f3n flecha, es una funci\u00f3n an\u00f3nima sin nombre</li> <li>{} Se utiliza para envolver el cuerpo de la funci\u00f3n  </li> </ul> </li> <li> <p>Las funci\u00f3nes flecha, pueden ser de varios tipos:</p> <ul> <li>Multil\u00ednea</li> <li>Monol\u00ednea</li> </ul> </li> </ul> <p> Una funci\u00f3n flecha es simplemente una expresi\u00f3n de funci\u00f3n compacta frente a una expresi\u00f3n de funci\u00f3n tradicional. A diferencia de una declaraci\u00f3n de funci\u00f3n, las de expresi\u00f3n de funci\u00f3n siempre deben acabar en punto y coma.</p> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#31-tipos-de-funciones","title":"3.1. Tipos de funci\u00f3nes:","text":"<p>Antes de nada, veamos una comparativa entre diferentes tipos de funciones, esto es de vital importancia para entender como funciona cada uno, en que se relacionan y en que situaciones es conveniente utilizar uno u otro.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-1","title":"Ejemplo 1","text":"<p>En este ejemplo, vamos a comparar 4 tipos de funci\u00f3n equivalentes y ver en que se diferencian. Para ello, hemos utilizado una declaraci\u00f3n de funci\u00f3n, una expresi\u00f3n de funci\u00f3n, una expresi\u00f3n de funci\u00f3n flecha y una expresi\u00f3n de funci\u00f3n flecha conciso. Ninguno incluye atributos.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#declaracion-de-funcion-multilinea-llamada","title":"Declaraci\u00f3n de funci\u00f3n (multil\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una declaraci\u00f3n de funci\u00f3n, no lleva punto y coma al final.</li> </ul> <pre><code>function cliente() {\n    console.log('\u00a1Bienvenido!');\n}\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-multilinea-llamada","title":"Expresi\u00f3n de funci\u00f3n (multil\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = function() {\n    console.log('\u00a1Bienvenido!');\n};\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-multilinea-llamada","title":"Expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = () =&gt; {\n    console.log('\u00a1Bienvenido!');\n};\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-conciso-monolinea-llamada","title":"Expresi\u00f3n de funci\u00f3n flecha conciso (monol\u00ednea) + llamada:","text":"<ul> <li>Si no contiene atributos, los par\u00e9ntesis estar\u00e1n vac\u00edos, pero deben estar presentes.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = () =&gt; console.log('\u00a1Bienvenido!');\n\ncliente(); // Salida: \u00a1Bienvenido!\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-2","title":"Ejemplo 2","text":"<p>Veamos el segundo ejemplo, esta vez, le pasamos 1 atributo en la funci\u00f3n.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-multilinea-1-atributo","title":"Funci\u00f3n flecha (multil\u00ednea) + 1 atributo:","text":"<ul> <li>Las funciones flecha con un solo atributo, los par\u00e9ntesis pueden omitirse.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre) =&gt; { // antes\n    console.log(`${nombre}`);\n};\n\nconst cliente = nombre =&gt; { // despues\n    console.log(`${nombre}`);\n};\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-monolinea-1-atributo","title":"Funci\u00f3n flecha conciso (monol\u00ednea) + 1 atributo:","text":"<ul> <li>Las funciones flecha con un solo atributo, los par\u00e9ntesis pueden omitirse.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre) =&gt; { console.log(`${nombre}`) }; // antes\n\nconst cliente = nombre =&gt; console.log(`${nombre}`); // despues\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-3","title":"Ejemplo 3","text":"<p>Veamos el tercer ejemplo, esta vez, le pasamos 1 argumento en la llamada.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-multilinea-1-argumento-en-la-llamada","title":"Funci\u00f3n flecha (multil\u00ednea) + 1 argumento en la llamada:","text":"<pre><code>const cliente = nombre =&gt; {\n    console.log(`${nombre}`);\n};\n\ncliente('Roberto'); // Salida: Roberto\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-monolinea-1-argumento-en-la-llamada","title":"Funci\u00f3n flecha conciso (monol\u00ednea) + 1 argumento en la llamada:","text":"<pre><code>const cliente = nombre =&gt; console.log(`${nombre}`);\n\ncliente('Roberto'); // Salida: Roberto\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-4","title":"Ejemplo 4","text":"<p>Veamos el cuarto ejemplo, a diferencia del segundo ejemplo, aqui le pasamos 2 atributos en la funci\u00f3n y 2 argumentos en la llamada a la funci\u00f3n.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-2-atributos-2-argumentos","title":"Funci\u00f3n flecha + 2 atributos + 2 argumentos:","text":"<ul> <li>Las funciones flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre, apellido) =&gt; {\n    console.log(`${nombre} ${apellido}`);\n};\n\ncliente('Roberto', 'Mendiburu'); // Salida: Roberto Mendiburu\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-2-atributos-2-argumentos","title":"Funci\u00f3n flecha conciso + 2 atributos + 2 argumentos:","text":"<ul> <li>Las funciones flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul> <pre><code>const cliente = (nombre, apellido) =&gt; console.log(`${nombre} ${apellido}`);\n\ncliente('Roberto', 'Mendiburu'); // Salida: Roberto Mendiburu\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#32-tipos-de-funciones-flecha","title":"3.2. Tipos de funci\u00f3nes flecha:","text":"<p>Las funciones flecha (arrow functions) son indudablemente una de las caracter\u00edsticas m\u00e1s populares de ES6 (EcmaScript 6). Ellas introducen una nueva forma de escribir funciones concisas. Es importante notar que las funciones flecha son an\u00f3nimas, lo que significa que no tienen nombre y no se pueden utilizar como metodos ni constructores dentro de una clase.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#caracteristicas","title":"Caracter\u00edsticas:","text":"<ul> <li>Siempre son expresiones.</li> <li>Siempre deberemos asignar la expresi\u00f3n a una variable.</li> <li>Pueden ser de varios tipos:<ul> <li>Expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea)</li> <li>Expresi\u00f3n de funci\u00f3n flecha conciso (monol\u00ednea) </li> </ul> </li> </ul>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-multilinea","title":"Expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea):","text":"<p>Esta funci\u00f3n, esta construido en bloque. Al no estar toda la funci\u00f3n en una misma l\u00ednea, se trataria de una expresi\u00f3n de funci\u00f3n flecha (multil\u00ednea) y no obtendria las caracter\u00edsticas de un (monol\u00ednea).</p> <ul> <li>Al ser una expresi\u00f3n de funci\u00f3n, debe asignarse a una variable.</li> <li>La expresi\u00f3n de funci\u00f3n flecha elimina la palabra clave function.</li> <li>Una funci\u00f3n flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, las llaves deben estar presentes.</li> <li>Al ser una funci\u00f3n multil\u00ednea, el return debe estar presente.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-2-atributos-2-argumentos_1","title":"Funci\u00f3n flecha + 2 atributos + 2 argumentos:","text":"<pre><code>const sumar = (a, b) =&gt; {\n    return a + b;\n};\n\nconst resultado = sumar(2, 6);\nconsole.log(resultado); // Salida: 8\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-3-atributos-3-argumentos","title":"Funci\u00f3n flecha + 3 atributos + 3 argumentos:","text":"<p><pre><code>const cliente = (nombre, apellido, telefono) =&gt; {\n    return `${nombre} ${apellido} ${telefono}`;\n};\n\nconst resultado = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado); // Salida: Roberto Mendiburu 666-666-666\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#expresion-de-funcion-flecha-conciso-monolinea","title":"Expresi\u00f3n de funci\u00f3n flecha conciso (monol\u00ednea):","text":"<p>En este ejemplo, podemos observar c\u00f3mo la expresi\u00f3n de funci\u00f3n flecha conciso elimina la necesidad de escribir la palabra clave function, las llaves {} y la declaraci\u00f3n return, resultando en una expresi\u00f3n m\u00e1s compacta.</p> <ul> <li>Al ser una expresi\u00f3n de funci\u00f3n, debe asignarse a una variable.</li> <li>La expresi\u00f3n de funci\u00f3n flecha elimina la palabra clave function.</li> <li>Una funci\u00f3n flecha con mas de un atributo, los par\u00e9ntesis deben estar presentes.</li> <li>Al ser una funci\u00f3n monol\u00ednea, las llaves pueden omitirse.</li> <li>Al ser una funci\u00f3n monol\u00ednea, el return puede omitirse.</li> <li>Al ser una expresi\u00f3n de funci\u00f3n, lleva punto y coma al final.</li> </ul>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-2-atributos-2-argumentos_1","title":"Funci\u00f3n flecha conciso + 2 atributos + 2 argumentos:","text":"<pre><code>const sumar = (a, b) =&gt; a + b;\n\nconst resultado = sumar(2, 6);\nconsole.log(resultado); // Salida: 8\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#funcion-flecha-conciso-3-atributos-3-argumentos","title":"Funci\u00f3n flecha conciso + 3 atributos + 3 argumentos:","text":"<pre><code>const cliente = (nombre, apellido, telefono) =&gt; `${nombre} ${apellido} ${telefono}`;\n\nconst resultado = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado); // Salida: Roberto Mendiburu 666-666-666\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#33-analisis-de-funciones","title":"3.3. An\u00e1lisis de funciones:","text":"<p>Veamos una comparativa entre 3 tipos de funciones \ud83d\udc47</p> <ul> <li>Opci\u00f3n 1: Funci\u00f3n tradicional</li> <li>Opci\u00f3n 2: Funci\u00f3n flecha</li> <li>Opci\u00f3n 3: Funci\u00f3n flecha conciso</li> </ul> ejemplo.js<pre><code>// Opci\u00f3n 1:\n// Declaraci\u00f3n de funci\u00f3n + 3 atributos - multil\u00ednea\nfunction cliente(nombre, apellido, telefono) {\n    return `${nombre} ${apellido} ${telefono}`;\n}\n\nconst resultado_1 = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado_1); // Salida: Roberto Mendiburu 666-666-666\n\n\n\n// Opci\u00f3n 2:\n// Expresi\u00f3n de funci\u00f3n flecha + 3 atributos - multil\u00ednea\nconst cliente = (nombre, apellido, telefono) =&gt; {\n    return `${nombre} ${apellido} ${telefono}`;\n};\n\nconst resultado_2 = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado_2); // Salida: Roberto Mendiburu 666-666-666\n\n\n\n// Opci\u00f3n 3:\n// Expresi\u00f3n de funci\u00f3n flecha conciso + 3 atributos - monol\u00ednea\nconst cliente = (nombre, apellido, telefono) =&gt; `${nombre} ${apellido} ${telefono}`;\n\nconst resultado_3 = cliente('Roberto', 'Mendiburu', '666-666-666');\nconsole.log(resultado_3); // Salida: Roberto Mendiburu 666-666-666\n</code></pre>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#diferencias-entre-funciones","title":"Diferencias entre funciones:","text":"<p> Las funciones flecha pueden componerse de m\u00e1s de una l\u00ednea, lo cual ya nos obligar\u00e1 a emplear las llaves y el return.</p> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#34-funciones-con-this","title":"3.4. Funciones con \"this\":","text":"<p>La palabra clave \"this\" tendra efecto dentro de una funci\u00f3n o clase que la envuelve. Utilizamos \"this\" para acceder a las distintas propiedades de una funci\u00f3n o clase.</p> <p>Veamos el uso de \"this\" con diferentes tipos de funciones:</p> <ul> <li>Ejemplo 1: Funci\u00f3n de expresi\u00f3n (multil\u00ednea)</li> <li>Ejemplo 2: Funci\u00f3n flecha (multil\u00ednea)</li> <li>Ejemplo 3: Funci\u00f3n flecha conciso (monol\u00ednea)</li> </ul>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-1_1","title":"Ejemplo 1","text":"<p>En este ejemplo, se crea una declaraci\u00f3n de funci\u00f3n llamada Factura y se le pasa 1 atributo. Dentro de esta funci\u00f3n, se crea una funci\u00f3n de expresi\u00f3n referenciando a la variable total pasado por \"this\".</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#declaracion-de-funcion-funcion-de-expresion-this-1-atributo-1-argumento","title":"Declaraci\u00f3n de funci\u00f3n + funci\u00f3n de expresi\u00f3n + this + 1 atributo + 1 argumento:","text":"<p><pre><code>function Factura(subTotal) {\n  this.iva = 0.21;\n  this.subTotal = subTotal;\n\n  this.total = function() {\n    return ((this.iva * this.subTotal) + this.subTotal);\n  };\n}\n\nconst totalFactura = new Factura(200);\nconsole.log(totalFactura.total()); // Salida: 242\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-2_1","title":"Ejemplo 2","text":"<p>Veamos el segundo ejemplo, se crea una declaraci\u00f3n de funci\u00f3n llamada Factura y se le pasa 1 atributo. Dentro de esta funci\u00f3n, (aqui viene la diferencia respecto al ejempo 1) se crea una funci\u00f3n flecha referenciando a la variable total pasado por \"this\".</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#declaracion-de-funcion-funcion-flecha-this-1-atributo-1-argumento","title":"Declaraci\u00f3n de funci\u00f3n + funci\u00f3n flecha + this + 1 atributo + 1 argumento:","text":"<p><pre><code>function Factura(subTotal) {\n    this.iva = 0.21;\n    this.subTotal = subTotal;\n\n    this.total = () =&gt; {\n        return ((this.iva * this.subTotal) + this.subTotal);\n    };\n}\n\nconst totalFactura = new Factura(200);\nconsole.log(totalFactura.total()); // Salida: 242\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-3_1","title":"Ejemplo 3","text":"<p>Veamos el tercer ejemplo, se crea una declaraci\u00f3n de funci\u00f3n llamada Factura y se le pasa 1 atributo. Dentro de esta funci\u00f3n, se crea una funci\u00f3n flecha conciso referenciando a la variable total pasado por \"this\".</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#declaracion-de-funcion-funcion-flecha-conciso-this-1-atributo-1-argumento","title":"Declaraci\u00f3n de funci\u00f3n + funci\u00f3n flecha conciso + this + 1 atributo + 1 argumento:","text":"<p><pre><code>function Factura(subTotal) {\n    this.iva = 0.21;\n    this.subTotal = subTotal;\n\n    this.total = () =&gt; ((this.iva * this.subTotal) + this.subTotal);\n}\n\nconst totalFactura = new Factura(200);\nconsole.log(totalFactura.total()); // Salida: 242\n</code></pre> El uso de funci\u00f3n flecha es limitada, no se puede utilizar como metodo ni constructor dentro de una clase.</p> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#35-objetos-y-metodos-con-this","title":"3.5. Objetos y m\u00e9todos con \"this\":","text":"<p>Cuando se crea una funci\u00f3n dentro de un objeto, esta funci\u00f3n pasa a llamarse m\u00e9todo. El m\u00e9todo, no incorpora la palabra clave function ni tampoco hace falta referenciarla a una variable como ocurre en la expresi\u00f3n de funci\u00f3n. Un m\u00e9todo debe tener nombre, no puede ser an\u00f3nimo.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-1_2","title":"Ejemplo 1","text":"<p>En este ejemplo, incorpora un m\u00e9todo al objeto.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#objeto-metodo-this","title":"Objeto + m\u00e9todo + \"this\":","text":"<p><pre><code>const usuario = {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu',\n    telefono: '333-666-666',\n\n    mostrar() {\n        console.log(this);\n    }\n};\n\nusuario.mostrar();\n\n/* Salida:\n\n{\nNombre: Roberto\nApellido: Mendiburu\nTel\u00e9fono: 333-666-666\nmostrar: [Function: mostrar]\n}\n\n*/\n</code></pre> </p> <p>Ve\u00e1mos que ocurre si cambiamos el m\u00e9todo por una funci\u00f3n flecha: <pre><code>const usuario = {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu',\n    telefono: '333-666-666',\n\n    () =&gt; {\n        console.log(this);\n    };\n};\n\nusuario; // no podemos llamar al m\u00e9todo flecha porque no tiene nombre.\n\n/* Salida:\n\nSyntaxError\n\n*/\n</code></pre> Lo que ocurre aqu\u00ed es que, al tratarse de una funci\u00f3n an\u00f3nima, no podemos llamarla de ninguna manera, por eso nos devuelve un error de sintaxis.</p> <ul> <li>Las funci\u00f3nes flecha, no pueden ser usados como m\u00e9todos, dentro de un objeto o clase.</li> </ul> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#36-objetos-y-funciones-con-this","title":"3.6. Objetos y funciones con \"this\":","text":"<p>Mostremos la diferencia en cuanto al uso de \"this\" en las funciones tradicionales y las funciones flecha.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-1_3","title":"Ejemplo 1","text":"<p>En este ejemplo, incorpora una funci\u00f3n como propiedad del objeto.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#objeto-funcion-de-expresion-this","title":"Objeto + funci\u00f3n de expresi\u00f3n + \"this\":","text":"<p><pre><code>const cliente = { \n    nombre: 'Roberto',\n    apellido: 'Mendiburu',\n\n    nombreCompleto: function() {\n        console.log(\"this es: \", this); \n        console.log(`Cliente: ${this.nombre} ${this.apellido}`);\n    }\n};\n\n\ncliente.nombreCompleto();\n\n/* Salida:\n\nthis es: {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu',\n    nombreCompleto: [Function: nombreCompleto]\n}   \nCliente: Roberto Mendiburu\n\n*/\n</code></pre> </p> <p>Ve\u00e1mos que ocurre si sacamos a la funci\u00f3n fuera del objeto: <pre><code>const cliente = { \n    nombre: 'Roberto',\n    apellido: 'Mendiburu'\n};\n\nconst nombreCompleto = function() {\n    console.log(\"this es: \", this); \n    console.log(`Cliente: ${this.nombre} ${this.apellido}`);\n};\n\n\nnombreCompleto(cliente);\n\n/* Salida:\n\nthis es:  Object [global] {etc.}\nCliente: undefined undefined\n\n*/\n</code></pre> Nos devuelve un resultado distinto.</p> <ul> <li>El \"this\" hace referencia al objeto global (window) ya que no tiene al objeto anterior envolviendolo.</li> </ul> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-2_2","title":"Ejemplo 2","text":"<p>En este ejemplo, incorpora una funci\u00f3n flecha como propiedad del objeto.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#objeto-funcion-de-expresion-flecha-this","title":"Objeto + funci\u00f3n de expresi\u00f3n flecha + \"this\":","text":"<p><pre><code>const cliente = { \n    nombre: 'Roberto',\n    apellido: 'Mendiburu',\n\n    nombreCompleto: () =&gt; {\n        console.log(\"this es: \", this); \n        console.log(`Cliente: ${this.nombre} ${this.apellido}`);\n    }\n};\n\n\ncliente.nombreCompleto();\n\n/* Salida:\n\nthis es:  {}\nCliente: undefined undefined\n\n*/\n</code></pre> El comportamiento del \"this\" en expresi\u00f3n de funci\u00f3n flecha es distinto al de expresi\u00f3n de funci\u00f3n cuando quiere referenciar al objeto.</p> <ul> <li>El \"this\" queda atrapado dentro de la funci\u00f3n flecha sin valor.</li> </ul> <p></p> <p>Ve\u00e1mos de nuevo que ocurre si sacamos a la funci\u00f3n fuera del objeto: <pre><code>const cliente = { \n    nombre: 'Roberto',\n    apellido: 'Mendiburu'\n};\n\nconst nombreCompleto = () =&gt; {\n    console.log(\"this es: \", this); \n    console.log(`Cliente: ${this.nombre} ${this.apellido}`);\n};\n\n\nnombreCompleto(cliente);\n\n/* Salida:\n\nthis es:  {}\nCliente: undefined undefined\n\n*/\n</code></pre> \u00c9sta vez nos devuelve el mismo resultado.</p> <ul> <li>El \"this\" vuelve a quedarse atrapado dentro de la funci\u00f3n flecha sin valor.</li> </ul> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#ejemplo-3_2","title":"Ejemplo 3","text":"<p>LLegado aqu\u00ed, te preguntaras si es posible acceder a las propiedades del objeto desde fuera de ella utilizando \"this\". La respuesta es que si, hay un m\u00e9todo para las funciones que se llama (funci\u00f3n de enlace) \"bind()\" que permite enlazar el \"this\" con el objeto mediante argumento.</p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#1-objeto-funcion-de-expresion-this-bind","title":"1 Objeto + funci\u00f3n de expresi\u00f3n  + \"this\" + bind():","text":"<p><pre><code>const cliente = {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu'\n};\n\nconst nombreCompleto = function() {\n    alert(`Cliente: ${this.nombre} ${this.apellido}`);\n};\n\nconst enlaceCliente = nombreCompleto.bind(cliente);\n\nenlaceCliente(); // Cliente: Roberto Mendiburu\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#2-objetos-funcion-de-expresion-this-bind","title":"2 Objetos + funci\u00f3n de expresi\u00f3n  + \"this\" + bind():","text":"<p><pre><code>const cliente_1 = {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu'\n};\n\nconst cliente_2 = {\n    nombre: 'Julen',\n    apellido: 'Mendoza'\n};\n\nconst nombreCompleto = function() {\n    alert(`Cliente: ${this.nombre} ${this.apellido}`);\n};\n\nconst enlaceCliente_1 = nombreCompleto.bind(cliente_1);\nconst enlaceCliente_2 = nombreCompleto.bind(cliente_2);\n\nenlaceCliente_1(); // Cliente: Roberto Mendiburu\nenlaceCliente_2(); // Cliente: Julen Mendoza\n</code></pre> </p> <p>Ve\u00e1mos que ocurre con la funci\u00f3n flecha:  <pre><code>const cliente = {\n    nombre: 'Roberto',\n    apellido: 'Mendiburu'\n};\n\nconst nombreCompleto = () =&gt; {\n    alert(`Cliente: ${this.nombre} ${this.apellido}`);\n};\n\nconst enlaceCliente = nombreCompleto.bind(cliente);\n\nenlaceCliente(); // Cliente: undefined undefined\n</code></pre> Cabe recordar, que el \"this\" tampoco funciona con el m\u00e9todo \"bind()\" en funci\u00f3n flecha.</p> <ul> <li>El \"this\" queda atrapado dentro de la funci\u00f3n flecha sin valor.</li> </ul> <p>La \u00fanica manera de enlazar el \"this\" con el objeto desde fuera de ella es con el uso de funci\u00f3n de expresi\u00f3n + \"bind()\". As\u00ed es como trabaja el m\u00e9todo (funci\u00f3n de enlace).</p> <p></p>"},{"location":"devcamp/checkpoint-08/funcion-flecha-js/#editor-de-codigo-utilizado","title":"Editor de c\u00f3digo utilizado:","text":"<ul> <li>Programiz - JavaScript Online Compiler  </li> </ul>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/","title":"6. \u00bfQu\u00e9 es la programaci\u00f3n orientada a objetos?","text":"<p>La programaci\u00f3n orientada a objetos (POO) es un paradigma de la programaci\u00f3n en el que se crean objetos para la manipulaci\u00f3n de datos y donde, por lo general, cada objeto ofrece una funcionalidad especial.</p> <ul> <li>La idea b\u00e1sica de la POO es el uso de objetos para modelar cosas del mundo real.</li> <li>POO nos ayuda a la reutilizaci\u00f3n del c\u00f3digo.</li> </ul> <p>Imagina que tienes un colegio o escuela con 1000 estudiantes y 100 profesores, ser\u00eda il\u00f3gico estar construyendo objetos para cada uno de ellos. Las clases son, como una especie de m\u00e1quina constructora de objetos al momento segun demanda.</p> <p>Hay de varios tipos:</p> <ul> <li>Funci\u00f3n constructora (antiguo)</li> <li>Clase (actual)</li> </ul> <p></p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#61-funciones-constructoras","title":"6.1. Funciones constructoras:","text":"<ul> <li>Un nombre de funci\u00f3n constructora generalmente comienza con una letra may\u00fascula. Esta convenci\u00f3n se utiliza para hacer que la funci\u00f3n constructora sean m\u00e1s f\u00e1cil de reconocer en el c\u00f3digo.</li> <li>La palabra clave new se usa para crear una nueva instancia del objeto (crear un nuevo objeto)</li> </ul>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#declaracion-de-funcion-1-atributo-instancia","title":"Declaraci\u00f3n de funci\u00f3n + 1 atributo + instancia:","text":"<pre><code>function Persona(nombre) {\n    this.nombre = nombre;\n    this.saludar = function() {\n        return (`${this.nombre} dice, \u00a1hola!`);\n    };\n}\n\nconst persona_1 = new Persona('Markel');\nconst persona_2 = new Persona('Nerea');\n\nconsole.log(persona_1.saludar());\nconsole.log(persona_2.saludar());\n\n/* Salida:\n\nMarkel dice, \u00a1hola!\nNerea dice, \u00a1hola!\n\n*/\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#el-constructor-object","title":"El constructor Object():","text":"<pre><code>const persona_1 = new Object();\npersona_1.nombre = \"Markel\";\npersona_1.saludar = function() {\n    return (`${this.nombre} dice, \u00a1hola!`);\n};\n\nconsole.log(persona_1.saludar());\n\n/* Salida:\n\nMarkel dice, \u00a1hola!\n\n*/\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#62-clases","title":"6.2. Clases:","text":"<p>Con la llegada de ES6 (ECMAScript 2015), se introducen las clases en JavaScript que proveen una sintaxis mucho m\u00e1s clara y simple para crear objetos y lidiar con la herencia. Es una mejora sint\u00e1ctica de las funciones constructoras que se basaban en prototipos, \u00e9sto no cambi\u00f3 ni agreg\u00f3 funcionalidad, pero trajo una mejor organizaci\u00f3n del c\u00f3digo.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#existen-2-formas-para-definir-una-clase-y-2-tipos-de-expresion-de-clase","title":"Existen 2 formas para definir una clase y 2 tipos de expresi\u00f3n de clase:","text":"<ul> <li>Declaraci\u00f3n de clase</li> <li>Expresi\u00f3n de clase<ul> <li>An\u00f3nima: No tiene un nombre.</li> <li>Nombrada: Tiene un nombre interno que solo es accesible dentro de la clase.</li> </ul> </li> </ul>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#declaracion-de-clase","title":"Declaraci\u00f3n de clase:","text":"<pre><code>class Persona {\n    constructor(nombre) {\n        this.nombre = nombre;\n    }\n}\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#expresion-de-clase","title":"Expresi\u00f3n de clase:","text":"<p><pre><code>const Persona = class {\n    constructor(nombre) {\n        this.nombre = nombre;\n    }\n};\n</code></pre> Ambos enfoques crean una clase llamada Persona, pero con las expresiones de clases se tiene m\u00e1s flexibilidad para definirlas de forma din\u00e1mica.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#expresion-de-clase_1","title":"Expresi\u00f3n de clase:","text":"<p>En el siguiente ejemplo, la clase se define sin un nombre espec\u00edfico (an\u00f3nima) y se asigna a la constante Persona. A partir de ah\u00ed, se puede utilizar de la misma manera que una clase declarada.</p> <pre><code>const Persona = class {\n  constructor(nombre, edad) {\n    this.nombre = nombre;\n    this.edad = edad;\n  }\n\n  saludar() {\n    console.log(`Hola, soy ${this.nombre} y tengo ${this.edad} a\u00f1os.`);\n  }\n};\n\nconst persona_1 = new Persona('Roberto', 34);\n\npersona_1.saludar(); // Hola, soy Roberto y tengo 34 a\u00f1os.\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#expresion-de-clase-nombrada","title":"Expresi\u00f3n de clase nombrada:","text":"<p>En este ejemplo, la clase PersonaInterna es accesible solo dentro del bloque de la expresi\u00f3n pero no fuera de \u00e9l. Esta caracter\u00edstica permite encapsular el nombre de la clase y evitar conflictos de nombres.</p> <pre><code>const Persona = class PersonaInterna {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  saludar() {\n    console.log(`Hola, soy ${this.nombre}.`);\n  }\n};\n\nconst persona_1 = new Persona('Nerea');\npersona_1.saludar(); // Hola, soy Nerea.\n\n// El nombre interno \"PersonaInterna\" no es accesible fuera de la clase\nconsole.log(typeof PersonaInterna); // undefined\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#cuando-usar-expresion-de-clase","title":"Cu\u00e1ndo usar expresi\u00f3n de clase:","text":"<ul> <li>Clases din\u00e1micas: Cuando necesitas definir clases de forma condicional o dentro de funciones.</li> <li>Mantener el c\u00f3digo limpio: Usa clases an\u00f3nimas si no necesitas referenciar el nombre fuera del bloque.</li> </ul>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#sintaxis-de-una-clase","title":"Sintaxis de una clase:","text":"<p><pre><code>class NombreClase {                       // declaraci\u00f3n de clase + nombre de clase\n    constructor(atributo_1, atributo_2) { // constructor + atributos\n        this.propiedad_1 = atributo_1;    // propiedad de una clase\n        this.propiedad_2 = atributo_2;    // propiedad de una clase\n    }\n\n    metodo_1() { // se nombra un m\u00e9todo\n        return (`Devuelve ${this.propiedad_1} y ${this.propiedad_2}`); // cuerpo de m\u00e9todo\n    }\n}\n\nconst objeto_1 = new NombreClase('argumento_1', 'argumento_2'); // se crea un objeto pasando argumentos\nconsole.log(objeto_1.metodo_1()); // Salida: Devuelve argumento_1 y argumento_2\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-constructor","title":"Clase + constructor:","text":"<p><pre><code>class Persona {\n\n    constructor(nombre) {\n        this.nombre = nombre;\n    }\n}\n\nconst persona_1 = new Persona('Nerea');\nconsole.log(persona_1.nombre); // Salida: Nerea\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-constructor-1-metodo","title":"Clase + constructor + 1 m\u00e9todo:","text":"<p><pre><code>class Persona {\n\n    constructor(nombre) {\n        this.nombre = nombre;\n    }\n\n    nombrePersona() {\n        return (`${this.nombre}`);  \n    }\n}\n\nconst persona_1 = new Persona('Nerea');\nconsole.log(persona_1.nombrePersona()); // Salida: Nerea\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-con-llaves-en-atributos-y-argumentos","title":"Clase con llaves en atributos y argumentos:","text":"<p><pre><code>class Persona {\n\n    constructor({nombre, apellido}) {\n        this.nombre = nombre;\n        this.apellido = apellido;\n    }\n\n    nombreCompleto() {\n        console.log(`${this.nombre} ${this.apellido}`);\n    }\n}\n\nconst persona_1 = new Persona({nombre: 'Markel', apellido:'Mart\u00ednez'});\nconst persona_2 = new Persona({apellido: 'Medina', nombre: 'Gorka'});\n\npersona_1.nombreCompleto();\npersona_2.nombreCompleto();\n\n/* Salida:\n\nMarkel Mart\u00ednez\nGorka Medina\n\n*/\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-sin-llaves-en-atributos-y-argumentos","title":"Clase sin llaves en atributos y argumentos:","text":"<pre><code>class Persona {\n\n    constructor(nombre, apellido) {\n        this.nombre = nombre;\n        this.apellido = apellido;\n    }\n\n    nombreCompleto() {\n        console.log(`${this.nombre} ${this.apellido}`);\n    }\n}\n\nconst persona_1 = new Persona('Markel', 'Mart\u00ednez');\nconst persona_2 = new Persona('Gorka', 'Medina');\n\npersona_1.nombreCompleto();\npersona_2.nombreCompleto();\n\n/* Salida:\n\nMarkel Mart\u00ednez\nGorka Medina\n\n*/\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#621-metodo-de-instancia","title":"6.2.1. M\u00e9todo de instancia:","text":""},{"location":"devcamp/checkpoint-08/que-es-poo-js/#ejemplo-1","title":"Ejemplo 1","text":"<p>En este ejemplo, el uso de llaves en atributos como en argumentos es necesario para poder renombrar el valor predeterminado del atributo tipo si diese el caso.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-constructor-1-valor-de-atributo-predeterminado","title":"Clase + constructor + 1 valor de atributo predeterminado:","text":"<ul> <li>Se declara una clase llamado Persona</li> <li>Se crea un constructor, se le pasa 1 atributo llamado tipo con valor predeterminado, el resto sin valores</li> <li>Se crea un m\u00e9todo llamado descripcion</li> <li>Se crean 2 objetos llamados persona_1, persona_2 y se le pasan argumentos a cada uno.</li> </ul> <p><pre><code>class Persona {\n\n    constructor({tipo = 'alumno', nombre, apellido, edad}) {\n        this.tipo = tipo;\n        this.nombre = nombre;\n        this.apellido = apellido;\n        this.edad = edad;\n    }\n\n    descripcion() {\n        return (`${this.nombre} ${this.apellido} tiene ${this.edad} a\u00f1os y es ${this.tipo}.`);\n    }\n}\n\nconst persona_1 = new Persona({nombre: 'Markel', apellido:'Mart\u00ednez', edad: 36});\nconst persona_2 = new Persona({nombre: 'Gorka', apellido: 'Medina', edad: 45, tipo: 'profesor'});\n\nconsole.log(persona_1.descripcion());\nconsole.log(persona_2.descripcion());\n\n/* Salida:\n\nMarkel Mart\u00ednez tiene 36 a\u00f1os y es alumno.\nGorka Medina tiene 45 a\u00f1os y es profesor.\n\n*/\n</code></pre> </p> <p>Veamos \u00e9ste otro ejemplo con la misma l\u00f3gica: <pre><code>class Coche {\n    constructor({anio, marca, motorizadoPor = 'gasolina'}) {\n        this.anio = anio;\n        this.marca = marca;\n        this.motorizadoPor = motorizadoPor;\n    }\n\n    caracteristicas() {\n        return (`El ${this.marca} ${this.anio} funciona con ${this.motorizadoPor}`)\n    }\n}\n\nconst model3 = new Coche({anio: 2025, marca: 'Tesla', motorizadoPor: 'electricidad'});\n\nconsole.log(model3.caracteristicas());\n\n/* Salida:\n\nEl Tesla 2025 funciona con electricidad\n\n*/\n</code></pre> </p> <p>Veamos una clase sin m\u00e9todo con la misma l\u00f3gica. No se recomienda, esto implica tener que construir la respuesta completa en cada llamada a la clase, se recomienda crear un m\u00e9todo dentro de la clase y llamarlo.</p> <pre><code>class Coche {\n\n    constructor({marca='Tesla', anio, motorizadoPor = 'gasolina'}) {\n        this.marca = marca;\n        this.anio = anio;\n        this.motorizadoPor = motorizadoPor;\n    }\n}\n\nconst model3 = new Coche({anio: 2025, motorizadoPor: 'electricidad'});\n\nconsole.log(`El ${model3.marca} ${model3.anio} funciona con ${model3.motorizadoPor}`);\n\n/* Salida:\n\nEl Tesla 2025 funciona con electricidad\n\n*/\n</code></pre> <p></p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#622-metodo-estatico","title":"6.2.2. M\u00e9todo est\u00e1tico:","text":"<p>Con un m\u00e9todo est\u00e1tico, no requiere crear un objeto mediante instancia para que funcione.</p> <ul> <li> <p>Acceso global: pueden utilizarse en cualquier lugar del c\u00f3digo sin necesidad de crear una instancia de la clase. Esto hace que sean accesibles de manera global y f\u00e1cil de usar.</p> </li> <li> <p>Optimizaci\u00f3n de recursos: al no requerir la creaci\u00f3n de instancias, los m\u00e9todos est\u00e1ticos pueden ser m\u00e1s eficientes en t\u00e9rminos de recursos.</p> </li> <li> <p>Mantenimiento simplicado: cuando un m\u00e9todo no necesita acceder a propiedades de instancia, es recomendable definirlo como est\u00e1tico, lo que simplifica el mantenimiento y reduce la complejidad del c\u00f3digo.</p> </li> </ul>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-metodo-estatico","title":"Clase + m\u00e9todo est\u00e1tico:","text":"<pre><code>class Persona {\n\n    static saludo(nombre) {\n        return (`${nombre} est\u00e1 saludando`);\n    }\n}\n\nconsole.log(Persona.saludo(\"Gorka\"));\n\n/* Salida:\n\nGorka est\u00e1 saludando\n\n*/\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-metodo-de-instancia-metodo-estatico","title":"Clase + m\u00e9todo de instancia + m\u00e9todo est\u00e1tico:","text":"<p>Supongamos que estamos construyendo un sistema de gesti\u00f3n de usuarios y necesitamos generar un ID \u00fanico para cada usuario.</p> <p>En este caso, el m\u00e9todo est\u00e1tico generarID se utiliza para crear ID \u00fanicos sin necesidad de crear una instancia de la clase Usuario.</p> <pre><code>class Usuario {\n    constructor(nombre) {\n        this.nombre = nombre;\n        this.id = Usuario.generarID();\n\n    } static generarID() {\n        return Math.floor(Math.random() * 1000);\n    }\n}\n\nconst usuario_1 = new Usuario('Nerea');\nconsole.log(usuario_1.id);\n\n/* Salida:\n\nSe genera un n\u00famero (id) \u00fanico de forma aleatoria.\n\n*/\n</code></pre> <p></p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#623-propiedad-estatica","title":"6.2.3. Propiedad est\u00e1tica:","text":"<p>Adem\u00e1s de los m\u00e9todos est\u00e1ticos, las clases en JavaScript tambi\u00e9n pueden tener propiedades est\u00e1ticas, que son variables que pertenecen a la clase en su totalidad y no a las instancias individuales. A partir de ES2022 JavaScript permite definir propiedades est\u00e1ticas de manera m\u00e1s sencilla dentro de la clase. Esto se hace utilizando la palabra clave static antes de la definici\u00f3n de la propiedad.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-propiedad-estatica","title":"Clase + propiedad est\u00e1tica:","text":"<p><pre><code>class MiClase {\n    static miPropiedadEstatica = \"Soy una propiedad est\u00e1tica\";\n}\n\nconsole.log(MiClase.miPropiedadEstatica); // Salida: Soy una propiedad est\u00e1tica\n</code></pre> </p> <p>En este caso usuariosMax es una propiedad est\u00e1tica que pertenece a la clase Configuracion. Al ser est\u00e1tica, no puede ser accedida a trav\u00e9s de m\u00e9todos de instancias de la clase. <pre><code>class Configuracion {\n    static usuariosMax = 100;\n}\n\nconsole.log(Configuracion.usuariosMax); // Salida: 100\n</code></pre> </p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#acceso-a-propiedades-estaticas-desde-metodos-estaticos","title":"Acceso a propiedades est\u00e1ticas desde m\u00e9todos est\u00e1ticos:","text":"<p>Los m\u00e9todos est\u00e1ticos pueden acceder a otras propiedades y m\u00e9todos est\u00e1ticos usando this, que en este contexto se refiere a la clase.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-propiedad-estatica-metodo-estatico-alcance","title":"Clase + propiedad est\u00e1tica + m\u00e9todo est\u00e1tico + alcance:","text":"<p><pre><code>class Calcular {\n    static iva = 1.21;\n\n    static calcularIva(precioNeto) {\n        return (precioNeto * this.iva) + '\u20ac iva incluido';\n    }\n}\n\nconsole.log(Calcular.calcularIva(100)); // Salida: 121\u20ac\n</code></pre> </p> <p>Veamos un ejemplo donde combinamos m\u00e9todos y propiedades est\u00e1ticas para modelar un sistema de configuraci\u00f3n.</p> <p>version y conexionesMaximas son propiedades est\u00e1ticas de la clase Sistema y el m\u00e9todo obtenerInfo() proporciona informaci\u00f3n relevante sobre el sistema</p> <pre><code>class Sistema {\n    static version = '1.0.0';\n    static conexionesMaximas = 10;\n\n    static obtenerInfo() {\n        return `Versi\u00f3n: ${this.version}, Conexiones m\u00e1ximas: ${this.conexionesMaximas}`;\n    }\n}\n\nconsole.log(Sistema.obtenerInfo()); // Salida: Versi\u00f3n: 1.0.0, Conexiones m\u00e1ximas: 10\n</code></pre>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#buenas-practicas","title":"Buenas pr\u00e1cticas:","text":"<ul> <li>Usa m\u00e9todos est\u00e1ticos para l\u00f3gica no espec\u00edfica de instancias: Ideal para funciones utilitarias, c\u00e1lculos compartidos o valores constantes.</li> <li>Evita abusar de los m\u00e9todos est\u00e1ticos: Usa instancias y m\u00e9todos de instancia cuando necesites trabajar con datos espec\u00edficos de objetos.</li> <li>Organiza las propiedades est\u00e1ticas: Col\u00f3calas al inicio de la clase para mayor claridad.</li> <li>Documenta el prop\u00f3sito de los m\u00e9todos est\u00e1ticos: Deja claro en los comentarios cu\u00e1ndo y por qu\u00e9 un m\u00e9todo debe ser est\u00e1tico.</li> </ul>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#conclusion","title":"Conclusi\u00f3n:","text":"<p>Las propiedades y m\u00e9todos est\u00e1ticos son herramientas poderosas para agregar funcionalidades compartidas a las clases en JavaScript. Son \u00fatiles para crear funciones utilitarias, mantener valores constantes y manejar estados compartidos. Sin embargo, deben usarse con moderaci\u00f3n y no como sustituto de la l\u00f3gica basada en instancias.</p> <p></p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#63-nombres-de-propiedad-computadas","title":"6.3. Nombres de propiedad computadas:","text":"<p>Los nombres de propiedad computadas permiten utilizar una expresi\u00f3n dentro de corchetes ([ ]) para definir el nombre de una propiedad. Esto significa que el nombre de la propiedad se calcula en tiempo de ejecuci\u00f3n en lugar de ser un valor literal. En el contexto de las clases, estas pueden usarse para definir tanto m\u00e9todos como propiedades.</p> <p>Al definir m\u00e9todos en una clase, los nombres de propiedad son \u00fatiles cuando el nombre del m\u00e9todo no se conoce hasta tiempo de ejecuci\u00f3n.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#ejemplo-1_1","title":"Ejemplo 1","text":"<p>En este ejemplo, el nombre del m\u00e9todo se calcula a partir del valor de la variable metodoDinamico, lo que permite definir m\u00e9todos de manera m\u00e1s din\u00e1mica.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-1-metodo-con-nombre-computado","title":"Clase + 1 m\u00e9todo con nombre computado:","text":"<p><pre><code>const metodoDinamico = 'mostrarNombre';\n\nclass Usuario {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  [metodoDinamico]() {\n    console.log(`Nombre del usuario: ${this.nombre}`);\n  }\n}\n\nconst usuario1 = new Usuario('Kristine');\n\nusuario1.mostrarNombre(); // Salida: Nombre del usuario: Kristine\n</code></pre> </p> <p>Los nombres de propiedad computadas son especialmente \u00fatiles en los siguientes escenarios:</p> <ol> <li>Asignaci\u00f3n Din\u00e1mica de Propiedades o M\u00e9todos: Cuando el nombre de una propiedad o m\u00e9todo depende de una entrada del usuario o de otra l\u00f3gica que se ejecuta en tiempo de ejecuci\u00f3n.</li> <li>Configuraci\u00f3n Basada en Datos Externos: Si necesitas definir propiedades basadas en un conjunto de datos din\u00e1mico, los nombres de propiedad computados facilitan este proceso.</li> <li>Evitar Redundancia en C\u00f3digo Repetitivo: Puedes crear m\u00faltiples m\u00e9todos o propiedades usando un patr\u00f3n com\u00fan sin tener que escribir cada uno manualmente.</li> </ol> <p></p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#ejemplo-2","title":"Ejemplo 2","text":"<p>En este ejemplo, los m\u00e9todos se definen usando los valores almacenados en el array acciones, lo que evita la repetici\u00f3n de c\u00f3digo y facilita la creaci\u00f3n de m\u00e9todos con nombres similares.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#clase-metodos-con-prefijos-comunes","title":"clase + m\u00e9todos con prefijos comunes:","text":"<p><pre><code>const acciones = ['Iniciar', 'Detener', 'Reiniciar']; // array\n\nclass Maquina {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  [acciones[0]]() {\n    console.log(`${this.nombre} est\u00e1 iniciando.`);\n  }\n\n  [acciones[1]]() {\n    console.log(`${this.nombre} se ha detenido.`);\n  }\n\n  [acciones[2]]() {\n    console.log(`${this.nombre} est\u00e1 reiniciando.`);\n  }\n}\n\nconst servidor = new Maquina('Servidor A');\n\nservidor.Iniciar();   // Salida: Servidor A est\u00e1 iniciando.\nservidor.Detener();   // Salida: Servidor A se ha detenido.\nservidor.Reiniciar(); // Salida: Servidor A est\u00e1 reiniciando.\n</code></pre>  Aunque las propiedad computados son una caracter\u00edstica poderosa, hay algunas consideraciones importantes a tener en cuenta:</p> <ol> <li>Legibilidad del C\u00f3digo: El uso excesivo puede afectar la legibilidad del c\u00f3digo. Es importante usarlos cuando realmente agreguen valor.</li> <li>Errores de Tipo: Aseg\u00farate de que la expresi\u00f3n utilizada para calcular el nombre de la propiedad sea v\u00e1lida y retorne un string. De lo contrario se lanzar\u00e1 un error.</li> </ol>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#conclusion_1","title":"Conclusi\u00f3n:","text":"<p>Los nombres de propiedad computadas en clases son una caracter\u00edstica \u00fatil de JavaScript que permite definir m\u00e9todos y propiedades de forma din\u00e1mica. Cuando se usan adecuadamente pueden simplificar la configuraci\u00f3n de objetos y clases, evitar redundancias y hacer que el c\u00f3digo sea m\u00e1s flexible. Sin embargo, es importante no abusar de esta t\u00e9cnica para mantener la claridad del c\u00f3digo.</p> <p></p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#64-herencia","title":"6.4. Herencia:","text":"<p>La herencia en JavaScript permite que una clase hija adquiera las propiedades y m\u00e9todos de una clase base, lo cual facilita la creaci\u00f3n de jerarqu\u00edas de clases. La clase hija puede ampliar o modificar la funcionalidad heredada para adaptarla a necesidades espec\u00edficas.</p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#sintaxis-de-la-herencia","title":"Sintaxis de la herencia:","text":"<p>Para crear una clase que extienda otra clase, se utiliza la palabra clave extends:</p> <p>En este ejemplo, la clase Perro extiende la clase Animal, lo que le permite acceder al m\u00e9todo hacerSonido() de la clase base. <pre><code>class Animal {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  hacerSonido() {\n    console.log(`${this.nombre} est\u00e1 haciendo un sonido.`);\n  }\n}\n\nclass Perro extends Animal {\n  ladrar() {\n    console.log(`${this.nombre} est\u00e1 ladrando.`);\n  }\n}\n\nconst miPerro = new Perro('Rex');\n\nmiPerro.hacerSonido(); // Salida: Rex est\u00e1 haciendo un sonido.\nmiPerro.ladrar();      // Salida: Rex est\u00e1 ladrando.\n</code></pre></p>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#beneficios-de-la-herencia","title":"Beneficios de la Herencia:","text":"<ol> <li>Reutilizaci\u00f3n del C\u00f3digo: Se evita la duplicaci\u00f3n al reutilizar el comportamiento com\u00fan definido en la clase base.</li> <li>Extensi\u00f3n de Funcionalidades: La clase hija puede a\u00f1adir caracter\u00edsticas o cambiar el comportamiento de los m\u00e9todos heredados.</li> <li>Organizaci\u00f3n y Mantenimiento: Ayuda a estructurar el c\u00f3digo en niveles jer\u00e1rquicos, haciendo m\u00e1s f\u00e1cil comprender y mantener la l\u00f3gica.</li> </ol>"},{"location":"devcamp/checkpoint-08/que-es-poo-js/#editor-de-codigo-utilizado","title":"Editor de c\u00f3digo utilizado:","text":"<ul> <li>Programiz - JavaScript Online Compiler </li> </ul>"},{"location":"programacion/","title":"Programaci\u00f3n","text":"Programaci\u00f3n <p>Curso completo de JavaScript y Python</p> <p>\u00cdNDICE DE CONTENIDOS</p> <ol> <li>Aprende JavaScript</li> <li>Aprende Python</li> </ol> <p> </p>"},{"location":"programacion/javascript/","title":"Aprende JavaScript","text":""},{"location":"programacion/javascript/#aprende-javascript","title":"Aprende JavaScript","text":"<p>Aqu\u00ed te guiaremos a trav\u00e9s de los conceptos y funcionalidades esenciales de JavaScript, un vers\u00e1til lenguaje de programaci\u00f3n ampliamente utilizado para crear p\u00e1ginas web interactivas y aplicaciones web din\u00e1micas.</p> <p></p> <p>Tanto si acabas de empezar como si buscas profundizar en tus conocimientos, estos tutoriales ser\u00e1n tu recurso de referencia para dominar este lenguaje de script.</p>"},{"location":"programacion/javascript/#1-primeros-pasos-con-javascript","title":"1. Primeros pasos con JavaScript","text":"<p>En las primeras etapas de la profundizaci\u00f3n en JavaScript, es crucial comprender los conceptos fundamentales que forman los bloques de construcci\u00f3n de este vers\u00e1til lenguaje de programaci\u00f3n.</p> 1.1. \u00bfQu\u00e9 es JavaScript?        Descubre JavaScript. Lenguaje de programaci\u00f3n clave para la interactividad web y el desarrollo...      1.2. JavaScript: Primeros Pasos        JavaScript es un lenguaje de programaci\u00f3n interpretado, orientado a objetos y de alto..."},{"location":"programacion/javascript/#2-conceptos-basicos","title":"2. Conceptos b\u00e1sicos","text":"<p>Los conceptos b\u00e1sicos de JavaScript son los bloques de construcci\u00f3n fundamentales que todo desarrollador debe comprender al iniciar su viaje con este vers\u00e1til lenguaje de programaci\u00f3n. Comprender los conceptos b\u00e1sicos como variables, tipos de datos y funciones es crucial para escribir c\u00f3digo eficiente y f\u00e1cil de mantener.</p> 2.1. Sintaxis de JavaScript: Fundamentos y Elementos Clave        En este tutorial, aprender\u00e1 sobre la sintaxis de JavaScript, incluidos espacios en blanco...      2.2. Variables en JavaScript        En este tutorial, aprender\u00e1 sobre las variables de JavaScript y c\u00f3mo usarlas para almacenar...      2.3. Variables: Diferencias entre var, let y const        En JavaScript existen tres formas principales de declarar variables: var, let y const. Cada una...      2.4. Tipos de datos en JavaScript        En JavaScript los tipos de datos son fundamentales para gestionar y manipular la...      2.5. Los N\u00fameros en JavaScript        En JavaScript el tipo de dato number se utiliza para representar tanto n\u00fameros enteros como...      2.6. Booleanos en JavaScript        En JavaScript, los booleanos son un tipo de dato fundamental que representa uno de dos...      2.7. Strings: Cadena de Caracteres en JavaScript        En el mundo de la programaci\u00f3n las cadenas de caracteres o strings son una de las estructuras...      2.8. Valores Primitivos vs. Valores de Referencia en JavaScript        En JavaScript existen dos tipos principales de valores: valores primitivos y valores de...      2.9. Introducci\u00f3n a los Objetos en JavaScript        En JavaScript, los objetos son una de las estructuras de datos m\u00e1s importantes y...      2.10. Arrays en JavaScript        Los arrays son estructuras de datos fundamentales que permiten almacenar m\u00faltiples..."},{"location":"programacion/javascript/#3-operadores-de-javascript","title":"3. Operadores de JavaScript","text":"<p>En JavaScript, los operadores son fundamentales para manipular datos y realizar c\u00e1lculos. Entender los diferentes tipos de operadores disponibles es clave para escribir c\u00f3digo eficiente. Desde operadores aritm\u00e9ticos hasta operadores l\u00f3gicos, el conjunto diverso de herramientas en JavaScript ofrece soluciones para una variedad de tareas.</p> 3.1. Operadores Aritm\u00e9ticos en JavaScript        Los operadores aritm\u00e9ticos en JavaScript permiten realizar c\u00e1lculos matem\u00e1ticos b\u00e1sicos u...              - \u00a0 * \u00a0 / \u00a0 +      3.2. Operador de Resto en JavaScript        En JavaScript, el operador de resto, utilizado mediante el s\u00edmbolo (%) se usa com\u00fanmente para...              %      3.3. Operador de Exponenciaci\u00f3n en JavaScript        Introducido en ES6, el operador de exponenciaci\u00f3n (**) en JavaScript permite elevar un n\u00famero a...              **      3.4. Operadores de Asignaci\u00f3n en JavaScript        Los operadores de asignaci\u00f3n en JavaScript son esenciales para almacenar y actualizar valores en...              -= \u00a0 **= \u00a0 *= \u00a0 /= \u00a0 %= \u00a0 += \u00a0 =      3.5. Operadores Unarios en JavaScript        En JavaScript, los operadores unarios son herramientas que permiten realizar transformaciones y...              - \u00a0 -- \u00a0 + \u00a0 ++      3.6. Operadores de Comparaci\u00f3n en JavaScript        Los operadores de comparaci\u00f3n en JavaScript permiten comparar valores para evaluar condiciones...              != \u00a0 &gt; \u00a0 &gt;= \u00a0 &lt; &lt;= \u00a0 ==      3.7. Operadores l\u00f3gicos en JavaScript        Los operadores l\u00f3gicos en JavaScript permiten combinar y evaluar condiciones, facilitando la toma...              ! \u00a0 &amp;&amp; \u00a0 ||      3.8. Operadores de Asignaci\u00f3n L\u00f3gica en JavaScript        Los operadores de asignaci\u00f3n l\u00f3gica combinan una operaci\u00f3n l\u00f3gica (AND, OR o fusi\u00f3n de nulos)...              ??= \u00a0 &amp;&amp;= \u00a0 ||=      3.9. Operador de Fusi\u00f3n de Nulos en JavaScript        Introducido en ES2020, el operador de fusi\u00f3n de nulos (??) es una soluci\u00f3n elegante para asignar...              ??"},{"location":"programacion/javascript/#4-metodos-de-strings-en-javascript","title":"4. M\u00e9todos de Strings en JavaScript","text":"<p>Los m\u00e9todos de strings en proporcionan herramientas para trabajar con texto de manera eficiente y flexible. Desde la b\u00fasqueda de subcadenas hasta la modificaci\u00f3n y comparaci\u00f3n de texto, estos permiten manipular los strings con facilidad. Conocer c\u00f3mo utilizarlos es esencial para resolver problemas comunes y optimizar el manejo de datos textuales en aplicaciones modernas.</p> 4.1. M\u00e9todos de B\u00fasqueda en Strings        Los m\u00e9todos de b\u00fasqueda en JavaScript son importantes porque nos ayudan a localizar textos dentro...              includes() \u00a0 indexOf() \u00a0 lastIndexOf() \u00a0 search()      4.2. M\u00e9todos de Reemplazo en Strings        Reemplazar texto en JavaScript es una operaci\u00f3n com\u00fan y poderosa que permite modificar strings...              replace() \u00a0 replaceAll()      4.3. M\u00e9todos de Acceso a Caracteres        Los m\u00e9todos de acceso a caracteres en JavaScript nos permiten trabajar con las posiciones...              at \u00a0 charAt \u00a0 charCodeAt \u00a0 codePointAt      4.4. M\u00e9todos de Extracci\u00f3n y Corte en JavaScript        La manipulaci\u00f3n de cadenas de texto o strings es una tarea muy recurrida en JavaScript, y los...              slice() \u00a0 split() \u00a0 substring()      4.5. M\u00e9todos de Concatenaci\u00f3n y Relleno en Strings        En JavaScript, los m\u00e9todos de concatenaci\u00f3n y relleno no solo son herramientas \u00fatiles, sino que...              concat() \u00a0 padEnd() \u00a0 padStart() \u00a0 repeat()      4.6. M\u00e9todos de Transformaci\u00f3n de Caso        Trabajar con cadenas de texto en JavaScript a menudo implica ajustar el formato de may\u00fasculas y...              toLocaleLowerCase() \u00a0 toLocaleUpp \u00a0 toLowerCase() \u00a0 toUpperCase()      4.7. M\u00e9todos de Limpieza en Strings        Al trabajar con strings en JavaScript, es com\u00fan encontrarse con espacios en blanco al inicio o al...              trim() \u00a0 trimEnd() \u00a0 trimStart()      4.8. M\u00e9todos de Divisi\u00f3n y Uni\u00f3n en Strings        En la manipulaci\u00f3n de datos en JavaScript, los m\u00e9todos de divisi\u00f3n y uni\u00f3n split y join juegan...              join() \u00a0 split()"},{"location":"programacion/javascript/#5-sentencias-de-flujo-de-control","title":"5. Sentencias de flujo de control","text":"<p>Las sentencias de flujo de control son esenciales en la programaci\u00f3n, ya que determinan el orden en que un programa ejecuta su c\u00f3digo. Al comprender c\u00f3mo funcionan las sentencias de flujo de control, los desarrolladores pueden crear una l\u00f3gica que gu\u00ede al programa por diferentes caminos en funci\u00f3n de las condiciones.</p> 5.1. Declaraci\u00f3n if\u2026else en JavaScript        La declaraci\u00f3n if...else en JavaScript es una de las estructuras de control que se utilizan para...      5.2. Operador ternario en JavaScript        El operador ternario en JavaScript es una herramienta que sirve para simplificar...      5.3. Estructura switch case en JavaScript        La declaraci\u00f3n switch case es una herramienta eficiente en JavaScript que permite tomar...      5.4. Bucle While En JavaScript        El bucle while en JavaScript es una herramienta esencial cuando necesitas ejecutar un bloque...      5.5. Bucle do\u2026while en JavaScript        El bucle do\u2026while es una estructura repetitiva en JavaScript que nos garantiza que un bloque...      5.6. Bucle for en JavaScript        El bucle for es una herramienta en JavaScript que nos permite manejar tareas repetitivas...      5.7. Instrucci\u00f3n break en JavaScript        La instrucci\u00f3n break se utiliza para terminar de manera abrupta un bucle, una instrucci\u00f3n...      5.8. Instrucci\u00f3n continue en JavaScript        La instrucci\u00f3n continue se utiliza para omitir la iteraci\u00f3n actual de un bucle y pasar a la..."},{"location":"programacion/javascript/#6-funciones","title":"6. Funciones","text":"<p>En el vasto mundo de JavaScript, las funciones desempe\u00f1an un papel crucial al permitir a los desarrolladores encapsular bloques de c\u00f3digo para su reutilizaci\u00f3n y organizaci\u00f3n. Son entidades vers\u00e1tiles que pueden invocarse en cualquier punto del c\u00f3digo, facilitando la ejecuci\u00f3n de tareas espec\u00edficas.</p> 6.1. Funciones en JavaScript        En JavaScript, las funciones son una de las piezas clave del lenguaje. Estas nos permiten...      6.2. Funciones \u201cCiudadanos de Primera clase\u201d en JavaScript        En JavaScript, las funciones son ciudadanos de primera clase. Este concepto significa que las...      6.3. Funciones An\u00f3nimas en JavaScript        Las funciones an\u00f3nimas son un concepto fundamental en JavaScript, que permite a los...      6.4. Funciones Recursivas en JavaScript        Las funciones recursivas son una herramienta fundamental en programaci\u00f3n, En JavaScript...      6.5. Closures y \u00c1mbito L\u00e9xico en JavaScript        En JavaScript, uno de los conceptos m\u00e1s potentes y utilizado es el de los closure. Estos...      6.6. Par\u00e1metros por Defecto en JavaScript        En JavaScript, los par\u00e1metros por defecto permiten asignar valores iniciales a los...      6.7. Arrow Functions en JavaScript        Las arrow functions fueron introducidas en la especificaci\u00f3n ES6 y ofrecen una forma m\u00e1s...      6.8. M\u00e9todos avanzados para el contexto de funciones en JavaScript        En JavaScript, el contexto de una funci\u00f3n (representado por la palabra clave this) es un...      6.9. Rest Parameter en JavaScript        El Rest Parameter (par\u00e1metro rest) en JavaScript, introducido en ES6, es una herramienta \u00fatil del...      6.10. Funciones de Callback en JavaScript        Las funciones de callback son una parte fundamental de JavaScript, especialmente..."},{"location":"programacion/javascript/#7-arrays","title":"7. Arrays","text":"<p>Los arrays son una de las estructuras de datos m\u00e1s importantes y utilizadas en JavaScript. Permiten a los desarrolladores almacenar m\u00faltiples valores en una sola variable, facilitando la manipulaci\u00f3n y acceso a conjuntos de datos. Los arrays no solo son \u00fatiles para agrupar informaci\u00f3n, sino que tambi\u00e9n ofrecen una amplia variedad de m\u00e9todos y propiedades que permiten modificar, ordenar, buscar y recorrer los elementos de forma eficiente.</p> 7.1. Introducci\u00f3n a los Arrays en JavaScript        Los arrays son una de las estructuras de datos m\u00e1s vers\u00e1tiles y esenciales en JavaScript...      7.2. M\u00e9todos B\u00e1sicos de los Arrays en JavaScript        Los arrays en JavaScript no solo nos permiten almacenar m\u00faltiples valores de diferentes tipos en...              pop() \u00a0 push() \u00a0 shift() \u00a0 unshift()      7.3. M\u00e9todos de Corte y Pegado Arrays en JavaScript        Manipular arrays es una tarea com\u00fan en JavaScript. M\u00e1s all\u00e1 de agregar o eliminar elementos, a...              concat() \u00a0 slice() \u00a0 splice()      7.4. M\u00e9todos de B\u00fasqueda y Acceso Arrays en JavaScript        Cuando trabajamos con arrays en JavaScript, una de las tareas m\u00e1s comunes es localizar elementos...              find() \u00a0 findIndex() \u00a0 includes() \u00a0 indexOf()      7.5. Ordenar Arrays en JavaScript        Ordenar arrays es una tarea fundamental en cualquier lenguaje de programaci\u00f3n, y JavaScript no es...              reverse() \u00a0 sort()      7.6. Desestructuraci\u00f3n de Arrays y Spread Operator en JavaScript        Introducidos en ES6, la desestructuraci\u00f3n de arrays y el operador de propagaci\u00f3n spread..."},{"location":"programacion/javascript/#8-metodos-de-alto-orden-en-arrays","title":"8. M\u00e9todos de Alto Orden en Arrays","text":"<p>Los m\u00e9todos de alto orden o Higher Order Array Methods en JavaScript permiten manipular arrays de forma m\u00e1s declarativa y eficiente. Estos m\u00e9todos trabajan aplicando funciones a los elementos del array, ofreciendo una manera m\u00e1s concisa y clara de procesar y transformar datos sin recurrir a bucles tradicionales. Este concepto es clave en la programaci\u00f3n funcional y su uso es muy com\u00fan en JavaScript.</p> 8.1. Introducci\u00f3n a los M\u00e9todos de Alto Orden en Arrays        Los m\u00e9todos de alto orden en JavaScript son herramientas que permiten trabajar con arrays...      8.2. Iterando sobre Arrays de Forma Eficiente con ForEach        Dentro de los m\u00e9todos de alto orden en arrays, el m\u00e9todo forEach es uno de los m\u00e1s comunes y...              forEach()      8.3. Transformando Arrays con el m\u00e9todo Map        El m\u00e9todo map() en JavaScript es uno de los m\u00e1s \u00fatiles y flexibles entre los m\u00e9todos de alto...              map()      8.4. Filtrando Arrays con el M\u00e9todo Filter        En JavaScript, filter() es uno de los m\u00e9todos de alto orden m\u00e1s potentes cuando se trata de...              filter()      8.5. Reducci\u00f3n de Arrays con el M\u00e9todo Reduce        El m\u00e9todo reduce() es uno de los m\u00e9todos m\u00e1s potentes y vers\u00e1tiles en JavaScript. A diferencia...              reduce()      8.6. Verificaciones Condicionales en Arrays con some y every        En JavaScript, los m\u00e9todos some() y every() son dos m\u00e9todos de alto orden muy \u00fatiles para...              every() \u00a0 some()      8.7. B\u00fasqueda Eficiente en Arrays con find y findIndex        En una secci\u00f3n anterior, discutimos los M\u00e9todos de B\u00fasqueda y Acceso en Arrays en JavaScript...              find() \u00a0 findIndex()"},{"location":"programacion/javascript/#9-objetos-y-prototipos","title":"9. Objetos y prototipos","text":"<p>Comprender el concepto de objetos y prototipos es fundamental para dominar JavaScript. Los objetos sirven como bloques de construcci\u00f3n que encapsulan tanto datos como funcionalidad dentro de una \u00fanica entidad. Por su parte, los prototipos desempe\u00f1an un papel crucial en la herencia y en los paradigmas de programaci\u00f3n orientada a objetos en JavaScript.</p> 9.1. M\u00e9todos de Objetos en JavaScript: Operaciones Comunes        Los objetos son una de las estructuras de datos fundamentales en JavaScript, no solo permiten...              Object.assign() \u00a0 Object.entries() \u00a0 Object.freeze() \u00a0 Object.keys() \u00a0 Object.seal() \u00a0 Object.values()      9.2. Funciones Constructoras en JavaScript: Creaci\u00f3n de Objetos Personalizados        Las funciones constructoras en JavaScript son una t\u00e9cnica esencial para la creaci\u00f3n de...      9.3. Prototipo en JavaScript: Fundamentos        El concepto de prototipo en JavaScript es uno de los pilares fundamentales del lenguaje. Gracias...      9.4. Patr\u00f3n Constructor/Prototipo en JavaScript        El desarrollo de aplicaciones escalables y eficientes en JavaScript requiere un uso...      9.5. Patr\u00f3n Herencia Protot\u00edpica en JavaScript: Herencia Basada en Objetos        En JavaScript, la herencia se logra a trav\u00e9s de un sistema basado en prototipos, conocido como...      9.6. El this en JavaScript: C\u00f3mo Funciona en Diferentes Contextos        El valor de this en JavaScript es una de las caracter\u00edsticas m\u00e1s potentes y a veces, confus...      9.7. GlobalThis en JavaScript: Accede al Objeto Global en Diferentes Entornos        El concepto del objeto global en JavaScript es importante, ya que act\u00faa como el contenedor...      9.8. Propiedades de los Objetos en JavaScript        En JavaScript los objetos son colecciones de propiedades y cada propiedad tiene un conjunt...      9.9. Propiedades Enumerables y Propiedades Propias en JavaScript: Diferencias Clave        En JavaScript los objetos pueden tener diferentes tipos de propiedades y es important...      9.10. Ciclo for\u2026in en JavaScript: C\u00f3mo Iterar sobre las Propiedades de un Objeto        El ciclo for...in es una de las herramientas m\u00e1s comunes en JavaScript para iterar sobre las...      9.11. Funciones F\u00e1brica en JavaScript: Creando Objetos de Forma Flexible        En JavaScript una funci\u00f3n f\u00e1brica (o factory function) es una funci\u00f3n que retorna un objeto...      9.12. Desestructuraci\u00f3n de Objetos en JavaScript: Asigna Propiedades a Variables        La desestructuraci\u00f3n de objetos es una de las caracter\u00edsticas m\u00e1s \u00fatiles introducidas en ES6...      9.13. Operador de Encadenamiento Opcional ?. en JavaScript        El operador de encadenamiento opcional (?.) es una caracter\u00edstica introducida en ES2020 que...      9.14. Crear Objetos con un Prototipo Espec\u00edfico con Object.create()        El m\u00e9todo Object.create() es una poderosa herramienta en JavaScript que permite crear un..."},{"location":"programacion/javascript/#10-clases","title":"10. Clases","text":"<p>En el \u00e1mbito de la programaci\u00f3n en JavaScript, las clases desempe\u00f1an un papel vital en la estructuraci\u00f3n y organizaci\u00f3n del c\u00f3digo. Las clases act\u00faan como planos para crear objetos con propiedades y m\u00e9todos predefinidos, lo que permite una reutilizaci\u00f3n y un mantenimiento eficaces del c\u00f3digo.</p> 10.1. Introducci\u00f3n a las Clases en JavaScript        Las clases en JavaScript, introducidas con ES6 (ECMAScript 2015), ofrecen una forma m\u00e1s clar...      10.2. Constructor de Clase en JavaScript: Configuraci\u00f3n de Objetos        El constructor de clase en JavaScript es un m\u00e9todo especial que se ejecuta...      10.3. M\u00e9todos de Instancia en Clases        Los m\u00e9todos de instancia en JavaScript son funciones definidas dentro de una clase que...      10.4. Propiedades y M\u00e9todos Est\u00e1ticos en Clases de JavaScript        En JavaScript, las propiedades y m\u00e9todos est\u00e1ticos pertenecen a la clase misma, no a sus...      10.5. Expresiones de Clase en JavaScript        Las Class Expressions (Expresiones de Clase) en JavaScript son una forma alternativa de definir...      10.6. Nombres de Propiedad Computadas en Clases de JavaScript        Los nombres de propiedad computadas o Computed Property Names permiten definir...      10.7. Extensi\u00f3n de Clases (Herencia) en JavaScript        La herencia es un concepto fundamental en la programaci\u00f3n orientada a objetos que permite...      10.8. Uso de super en Clases de JavaScript        La palabra clave super en JavaScript se utiliza en clases derivadas para acceder al constructor o...      10.9. Encapsulaci\u00f3n con Propiedades Privadas en Clases de JavaScript        La encapsulaci\u00f3n es un concepto clave en la programaci\u00f3n orientada a objetos que permite...      10.10. Getters y Setters en Clases de JavaScript        Los getters y setters en JavaScript son funciones especiales que se utilizan para controlar el...      10.11. Mixins en JavaScript        Los Mixins en JavaScript son una t\u00e9cnica en la programaci\u00f3n orientada a objetos que permite..."},{"location":"programacion/javascript/#11-promesas-y-asyncawait","title":"11. Promesas y Async/Await","text":"<p>En el \u00e1mbito de JavaScript, dominar las promesas y Async/Await puede mejorar significativamente tus habilidades de codificaci\u00f3n. Estas t\u00e9cnicas avanzadas proporcionan una forma m\u00e1s eficaz de manejar las operaciones as\u00edncronas, permitiendo una ejecuci\u00f3n m\u00e1s fluida de las funciones.</p> 11.1. Introducci\u00f3n a la Programaci\u00f3n As\u00edncrona en JavaScript        La programaci\u00f3n as\u00edncrona es una t\u00e9cnica que permite que los programas realicen m\u00faltiples...      11.2. Promesas en JavaScript        Las promesas en JavaScript son una herramienta esencial para manejar operaciones as\u00edncronas...      11.3. Encadenamiento de Promesas en JavaScript        El encadenamiento de promesas es una t\u00e9cnica que permite ejecutar operaciones as\u00edncronas...      11.4. Promise.all en JavaScript: Promesas en Paralelo        El m\u00e9todo Promise.all en JavaScript es una herramienta poderosa para manejar m\u00faltiples...              Promise.all      11.5. Promise.race en JavaScript: Resolviendo la Promesa M\u00e1s R\u00e1pida        El m\u00e9todo Promise.race en JavaScript permite manejar varias promesas ejecutadas en paralelo y...              Promise.race      11.6. Promise.allSettled en JavaScript: Manejo Completo de Promesas        El m\u00e9todo Promise.allSettled en JavaScript es una herramienta dise\u00f1ada para manejar m\u00faltiples...              Promise.allSettled      11.7. Promise.any: Esperando la Primera Promesa Resuelta con \u00c9xito        Promise.any es un m\u00e9todo en JavaScript que devuelve la primera promesa que se resuelve con \u00e9xito...              Promise.any      11.8. Manejo de Errores en Promesas en JavaScript        Trabajar con promesas en JavaScript permite manejar operaciones as\u00edncronas de manera fluida, pero...              catch() \u00a0 finally()      11.9. Async/Await en JavaScript        La introducci\u00f3n de async/await en JavaScript transform\u00f3 la manera de manejar el c\u00f3digo...      11.10. Manejo de Errores con Async/Await        El uso de async y await ha hecho que trabajar con c\u00f3digo as\u00edncrono sea m\u00e1s claro y legible..."},{"location":"programacion/javascript/#12-iteradores-y-generadores","title":"12. Iteradores y Generadores","text":"<p>Los Iteradores y Generadores desempe\u00f1an un papel importante en JavaScript, estos proporcionan un enfoque optimizado para recorrer y manejar estructuras de datos. Estas estructuras facilitan la iteraci\u00f3n de manera m\u00e1s controlada y eficiente, mejorando tanto la legibilidad como el mantenimiento del c\u00f3digo y simplificando tareas complejas de procesamiento secuencial.</p> 12.1. Introducci\u00f3n a los Iteradores en JavaScript        Los iteradores en JavaScript proporcionan una manera eficiente y controlada de recorrer...      12.2. Iterables y el Bucle for\u2026of en JavaScript        Los iterables en JavaScript son estructuras que permiten recorrer sus elementos de manera...      12.3. Generadores en JavaScript        Los generadores en JavaScript son un tipo especial de funci\u00f3n que permite pausar y reanudar su...              function* \u00a0 next() \u00a0 yield      12.4. Iteradores As\u00edncronos en JavaScript        Con el auge de aplicaciones que manejan datos en tiempo real y operaciones as\u00edncronas como...      12.5. Generadores As\u00edncronos en JavaScript        Los generadores as\u00edncronos en JavaScript permiten producir y consumir valores de..."},{"location":"programacion/javascript/#13-modulos","title":"13. M\u00f3dulos","text":"<p>Los m\u00f3dulos desempe\u00f1an un papel importante en la organizaci\u00f3n y estructuraci\u00f3n del c\u00f3digo JavaScript, permitiendo a los desarrolladores dividir sus programas en piezas m\u00e1s peque\u00f1as y reutilizables. Al encapsular funciones, variables y objetos relacionados dentro de m\u00f3dulos, el c\u00f3digo es m\u00e1s f\u00e1cil de mantener y gestionar.</p> 13.1. Introducci\u00f3n a los M\u00f3dulos en JavaScript        Los m\u00f3dulos en JavaScript son fundamentales para organizar y estructurar c\u00f3digo de manera...      13.2. Exportaci\u00f3n en JavaScript        La exportaci\u00f3n en JavaScript permite compartir variables, funciones y clases entre m\u00f3dulos...      13.3. Importaci\u00f3n en JavaScript        La importaci\u00f3n en JavaScript permite que un m\u00f3dulo use funciones, variables o clases de...      13.4. Reexportaci\u00f3n de M\u00f3dulos en JavaScript        La reexportaci\u00f3n en JavaScript permite agrupar y redistribuir m\u00f3dulos desde un solo punto de...      13.5. M\u00f3dulos Din\u00e1micos en JavaScript        Los m\u00f3dulos din\u00e1micos en JavaScript permiten cargar c\u00f3digo de manera as\u00edncrona durante la..."},{"location":"programacion/javascript/#14-colecciones","title":"14. Colecciones","text":"<p>En el \u00e1mbito de la programaci\u00f3n en JavaScript comprender las colecciones es un aspecto fundamental. Estas son una estructura de datos que permite almacenar y organizar m\u00faltiples elementos. Al profundizar en las colecciones, los desarrolladores pueden manipular y gestionar los datos de manera eficiente, mejorando la funcionalidad y el rendimiento general de sus aplicaciones web.</p> 14.1. Map en JavaScript        El objeto Map en JavaScript, introducido en ES6, es una estructura de datos dise\u00f1ada para...      14.2. Set en JavaScript        El objeto Set es una estructura de datos que permite almacenar valores \u00fanicos de cualquier..."},{"location":"programacion/javascript/#15-gestion-de-errores","title":"15. Gesti\u00f3n de errores","text":"<p>La gesti\u00f3n de errores en JavaScript es un aspecto crucial de la programaci\u00f3n para garantizar el buen funcionamiento de tu c\u00f3digo. Cuando se producen errores durante la ejecuci\u00f3n de un programa, los mecanismos de gesti\u00f3n adecuados pueden evitar que la aplicaci\u00f3n se bloquee y proporcionar a los usuarios informaci\u00f3n significativa.</p> 15.1. try catch en JavaScript        El manejo de errores en JavaScript es importante al momento de construir aplicaciones confiable...      15.2. try catch finally en JavaScript        El bloque try catch finally en JavaScript ampl\u00eda la funcionalidad de la estructura...      15.3. Lanzar Excepciones con throw        El manejo de errores en JavaScript no solo implica capturar problemas con try\u2026catch, sino...      15.4. Optional Catch Binding en JavaScript        La introducci\u00f3n del optional catch binding (Manejo Opcional del Error en Catch) en..."},{"location":"programacion/javascript/#16-javascript-runtime-tiempo-de-ejecucion","title":"16. JavaScript Runtime (tiempo de ejecuci\u00f3n)","text":"<p>El JavaScript Runtime es el entorno en el cual se ejecuta el c\u00f3digo JavaScript. Es el \u201cescenario\u201d donde ocurren todas las acciones de nuestro c\u00f3digo. Durante la ejecuci\u00f3n, el tiempo de ejecuci\u00f3n se encarga de interpretar y ejecutar el c\u00f3digo JavaScript l\u00ednea por l\u00ednea, gestionando tareas como la asignaci\u00f3n de memoria, la ejecuci\u00f3n de funciones, la manipulaci\u00f3n de objetos, y la interacci\u00f3n con el entorno donde se est\u00e9 ejecutando.</p> 16.1. Contexto de Ejecuci\u00f3n en JavaScript        El contexto de ejecuci\u00f3n es uno de los conceptos clave para entender c\u00f3mo JavaScript procesa y...      16.2. JavaScript Call Stack: Entendiendo la Pila de Llamadas        La pila de llamadas o call stack es un mecanismo en el cual se utiliza el motor de JavaScript para...      16.3. Event Loop en JavaScript        El event loop (bucle de eventos) es un componente fundamental del tiempo de...      16.4. JavaScript Hoisting: Entendiendo la Elevaci\u00f3n en el C\u00f3digo        El hoisting (o elevaci\u00f3n) es un comportamiento en JavaScript que ocurre durante la fase de...      16.5. JavaScript Variable Scope: Alcances de las Variables        El alcance (scope) de una variable en JavaScript define d\u00f3nde es visible y accesible dentro del..."},{"location":"programacion/javascript/#17-tipos-de-envoltura-primitivos","title":"17. Tipos de Envoltura Primitivos","text":"<p>Los (Primitive Wrapper Types) en JavaScript son objetos especiales que envuelven los tipos de datos primitivos (como n\u00fameros, cadenas, booleanos y s\u00edmbolos) para permitirles comportarse como objetos. Estos tipos de envoltura proporcionan m\u00e9todos y propiedades adicionales que no est\u00e1n presentes en los tipos primitivos, permitiendo que trabajemos con ellos como si fueran objetos.</p> <p></p> <p>Aprende JavaScript </p> <p>Programiz - JavaScript Online Compiler </p> <p></p>"},{"location":"tutoriales/","title":"Tutoriales","text":"Tutoriales <p>PT Full Stack Development with JavaScript, Python, React</p> <p>\u00cdNDICE DE CONTENIDOS</p> <ol> <li>Ruta de aprendizaje:<ul> <li>Desarrollador Full Stack</li> </ul> </li> <li>Control de versiones:<ul> <li>Comandos GIT</li> </ul> </li> <li>Instalaci\u00f3n de librerias:<ul> <li>MkDocs + virtualenv</li> <li>Despliegue a GitHub Pages</li> </ul> </li> <li>Desarrollo web:<ul> <li>Optimizar el SEO</li> </ul> </li> </ol> <p> </p>"},{"location":"tutoriales/control-versiones/comandos-git/","title":"GIT desde la l\u00ednea de comandos","text":""},{"location":"tutoriales/control-versiones/comandos-git/#comandos-basicos-para-trabajar-en-localhost","title":"Comandos b\u00e1sicos para trabajar en localhost:","text":"<ul> <li>git init Iniciar GIT</li> <li>git add . Agrega todos los archivos al GIT</li> <li>git commit -m \"primer commit\" Agrega un commit al GIT</li> </ul>"},{"location":"tutoriales/control-versiones/comandos-git/#comandos-para-sincrinizar-por-primera-vez-git-con-github-desde-terminal-de-vscode","title":"Comandos para sincrinizar por primera vez GIT con GitHub desde terminal de VSCode:","text":"<ul> <li>git init Iniciar GIT</li> <li>git config --global user.name \"nombre_usuario\" Usuario de GitHub</li> <li>git config --global user.email \"micorreo@ejemplo.com\" Email de GitHub</li> </ul>"},{"location":"tutoriales/control-versiones/comandos-git/#comandos-basicos-para-subir-nuestro-proyecto-localhost-al-repositorio-de-github","title":"Comandos basicos para subir nuestro proyecto localhost al repositorio de GitHub:","text":"<ul> <li>git init Iniciar GIT</li> <li>git add . Agrega todos los archivos al GIT</li> <li>git commit -m \"primer commit\" Agrega un commit al GIT</li> <li>git branch -M main Fuerza a renombrar la rama local actual por (main) actual main</li> <li>git remote add origin https://github.com/usuario/mi_repositorio.git Crea una conexi\u00f3n remota llamada origin con el repositorio de GitHub</li> <li>git remote -v Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>git status Muestra el estado de los procesos GIT</li> <li>git push -u origin main Sube los archivos a la rama main remoto de GitHub</li> </ul>"},{"location":"tutoriales/control-versiones/comandos-git/#comandos-utiles","title":"Comandos \u00fatiles:","text":"<ul> <li>git status Muestra el estado de los procesos GIT</li> <li>git add ejemplo.html Agrega los archivos indibidualmente al GIT</li> <li>git remote -v Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>git log Muestra el hist\u00f3rico de commits</li> <li>git log -n 2 Muestra los \u00faltimos 2 commits</li> <li>git log prueba.html Muestra los commits del archivo (prueba.html)</li> <li>git switch main Cambia de la rama actual a la rama (main)</li> <li>git branch branch-test Crea una nueva rama (branch-test) a partir de la rama actual</li> <li>git branch -m branch-test Renombra la rama local actual por (branch-test) actual branch-test</li> <li>git branch -M branch-test Fuerza a renombrar la rama local actual por (branch-test) actual branch-test</li> <li>git branch Muestra todas las ramas locales y distingue con un (*) la rama actual</li> <li>git branch --list Muestra todas las ramas locales y distingue con un (*) la rama actual</li> <li>git branch -r Muestra todas las ramas del repositorio remoto</li> <li>git branch -a Muestra todas las ramas, tanto locales como remotas y distingue con un (*) la rama actual</li> <li>git branch --show-current Muestra la rama actual</li> <li>git branch -d branch-test Elimina la rama (branch-test) del repositorio local si esta fusionado con (main)</li> <li>git branch -D branch-test Fuerza a eliminar la rama (branch-test) del repositorio local este o no fusionado con (main)</li> <li>git branch --no-merged Muestra las ramas que estan sin fusionar con (main)</li> <li>git remote add origin https://github.com/usuario/mi_repositorio.git Crea una conexi\u00f3n remota llamada origin con el repositorio de GitHub</li> <li>git clone https://github.com/usuario/mi_repositorio.git Copia el repositorio remoto completo al local y se crea autom\u00e1ticamente una conexi\u00f3n remota llamada origin</li> <li>git pull origin main Actualiza la rama actual del repositorio local con los nuevos cambios efectuados en la rama (main) del repositorio remoto</li> <li>git merge branch-test Fusiona la rama (branch-test) a la rama actual del repositorio local</li> <li>git push origin --delete branch-test Elimina la rama (branch-test) del repositorio remoto</li> <li>git fetch --prune Elimina todas las referencias de seguimiento obsoletas del repositorio remoto</li> <li>git prune Elimina todas las referencias de seguimiento obsoletas del repositorio local</li> <li>git prune --verbose Elimina y muestra todas las referencias de seguimiento obsoletas que a eliminado del repositorio local</li> <li>git commit --amend -m \"texto corregido\" Edita el commit mas reciente y lo sustituye por uno nuevo</li> </ul>"},{"location":"tutoriales/control-versiones/comandos-git/#comandos-para-restaurar-o-resetear-a-un-commit-anterior-especifico","title":"Comandos para restaurar o resetear a un commit anterior espec\u00edfico:","text":"<ol> <li> <p>El m\u00e9todo (git restore): </p> <ul> <li>git log --oneline Muestra informaci\u00f3n simplificada de commits donde sale el hash de cada uno</li> <li>git restore --source 20cf9cb prueba.html Restaura el archivo (prueba.html) al commit mediante hash (20cf9cb)</li> </ul> </li> <li> <p>El m\u00e9todo (git reset):</p> <ul> <li>git log --oneline Muestra informaci\u00f3n simplificada de commits donde sale el hash de cada uno</li> <li>git reset 20cf9cb Regresa al commit mediante hash (20cf9cb)</li> </ul> <p>NOTA</p> <p>A pesar de que los commits ya no aparecen en el log, no se eliminan de GIT</p> <p></p> </li> </ol> <p>NOTA</p> <ul> <li>Para detener el servidor de \"mkdocs\" pulsa (ctrl + c)</li> <li>Para limpiar la consola utiliza el comando (cls) o (clear)</li> <li>Para salir de algun comando GIT pulsa (q)</li> </ul> <p>MALAS PR\u00c1CTICAS</p> <p>Est\u00e1 totalmente desaconsejado alterar el historial de commits, esto podria generar conflictos con los commits del repositorio remoto cuando se vaya hacer push o pull por cualquiera de los miembros, intenta siempre trabajar hacia adelante. Por lo general, est\u00e1 bien hacer este tipo de cambios en su propio repositorio local.</p> <p>BUENAS PR\u00c1CTICAS</p> <p>El mensaje del commit se escribe en presente, debe ser corto y conciso, no utilizar puntos ni puntos suspensivos al final.</p> <ol> <li>Ejemplo commit: <code>remove a random notification</code> </li> <li>Ejemplo commit: <code>add a new search feature</code></li> <li>Ejemplo commit: <code>change the default system color</code></li> <li>Ejemplo commit: <code>fix a problem with the topbar</code></li> </ol> <p></p> <p>Fuente: Sitio web oficial </p>"},{"location":"tutoriales/desarrollo-web/optimizar-seo/","title":"Optimizar el SEO","text":"<p>Antes de subir cualquier proyecto a producci\u00f3n, es importante comprobar que el SEO (Search Engine Optimization) este correctamente construido. Mencionare una herramienta gratuita que nos ayudara a testear nuestro SEO.</p>"},{"location":"tutoriales/desarrollo-web/optimizar-seo/#herramientas-online","title":"Herramientas online:","text":"<ul> <li>Open Graph es una herramienta que nos permitira ver la vista previa de la url compartida</li> <li>Squoosh es una herramienta de Google para editar y optimizar im\u00e1genes </li> </ul>"},{"location":"tutoriales/desarrollo-web/optimizar-seo/#la-importancia-del-orden","title":"La importancia del orden:","text":"<p>Para optimizar el SEO, es necesario seguir un orden espec\u00edfico dentro del head. Harry Roberts fue el creador de este orden. <pre><code>&lt;head&gt;\n  &lt;meta charset | http-equiv \\ viewport/&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script src=\"\" async&gt;&lt;/script&gt;\n  CSS that icludes @import\n  Synchronous JS\n  Synchronous CSS\n  preload\n  &lt;script src=\"\" defer&gt;&lt;/script&gt;\n  prefetch / prerender\n  Everything else ('SEO' meta tags, icons, Open Graph, etc.)\n&lt;/head&gt;\n</code></pre></p>"},{"location":"tutoriales/desarrollo-web/optimizar-seo/#construccion-basica-del-head-con-el-seo-optimizado","title":"Construcci\u00f3n b\u00e1sica del head con el SEO optimizado:","text":"<ul> <li> <p>Aqu\u00ed la configuraci\u00f3n general del sitio web <pre><code>&lt;meta charset=\"UTF-8\"/&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\nmas...\n</code></pre></p> </li> <li> <p>Aqu\u00ed la informaci\u00f3n general del sitio web <pre><code>&lt;title&gt;Documentaci\u00f3n t\u00e9cnica&lt;/title&gt;\n&lt;link rel=\"icon\" type=\"image/png\" href=\"src/img/favicon.png\"/&gt;\n&lt;meta name=\"description\"  content=\"Documentaci\u00f3n de proyectos, tutoriales de programaci\u00f3n, gu\u00edas de instalaci\u00f3n, todo en un \u00fanico lugar.\"/&gt;\nmas...\n</code></pre></p> </li> <li> <p>Aqu\u00ed la fuente de css y js <pre><code>&lt;link rel=\"stylesheet\" href=\"src/css/custom.css\"/&gt;\n&lt;script src=\"src/js/custom.js\"&gt;&lt;/script&gt;\nmas...\n</code></pre></p> </li> <li> <p>Aqu\u00ed el protocolo general de Open Graph que genera vista previa del enlace cuando es compartido.     <pre><code>&lt;meta property=\"og:url\" content=\"https://zuluta.github.io\"/&gt; &lt;!-- url a compartir --&gt;\n&lt;meta property=\"og:type\" content=\"website\"/&gt; &lt;!-- tipo de url a compartir --&gt;\n&lt;meta property=\"og:title\" content=\"Documentaci\u00f3n t\u00e9cnica\"/&gt; &lt;!-- t\u00edtulo de url a compartir --&gt;\n&lt;meta property=\"og:description\" content=\"Documentaci\u00f3n de proyectos, tutoriales de programaci\u00f3n, gu\u00edas de instalaci\u00f3n, todo en un \u00fanico lugar.\"/&gt; &lt;!-- descripci\u00f3n de url a compartir --&gt;\n&lt;meta property=\"og:image\" content=\"https://zuluta.github.io/og.jpg\"/&gt; &lt;!-- imagen de url a compartir --&gt;\n&lt;meta property=\"og:locale\" content=\"es_ES\"/&gt;\nmas...\n</code></pre></p> </li> </ul> <p>Ejemplo b\u00e1sico con el SEO optimizado<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n\n  &lt;!-- informaci\u00f3n que lee el navegador --&gt;\n  &lt;head&gt;\n\n    &lt;!-- configuraci\u00f3n general del sitio web --&gt;\n    &lt;meta charset=\"UTF-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n\n    &lt;!-- informaci\u00f3n general del sitio web --&gt;\n    &lt;title&gt;Documentaci\u00f3n t\u00e9cnica&lt;/title&gt;\n    &lt;link rel=\"icon\" type=\"image/png\" href=\"src/img/favicon.png\"/&gt;\n    &lt;meta name=\"description\"  content=\"Documentaci\u00f3n de proyectos, tutoriales de programaci\u00f3n, gu\u00edas de instalaci\u00f3n, todo en un \u00fanico lugar.\"/&gt;\n\n    &lt;!-- fuente de css y js --&gt;\n    &lt;link rel=\"stylesheet\" href=\"src/css/custom.css\"/&gt;\n    &lt;script src=\"src/js/custom.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- protocolo open graph --&gt;\n    &lt;meta property=\"og:url\" content=\"https://zuluta.github.io\"/&gt; &lt;!-- url a compartir --&gt;\n    &lt;meta property=\"og:type\" content=\"website\"/&gt; &lt;!-- tipo de url a compartir --&gt;\n    &lt;meta property=\"og:title\" content=\"Documentaci\u00f3n t\u00e9cnica\"/&gt; &lt;!-- t\u00edtulo de url a compartir --&gt;\n    &lt;meta property=\"og:description\" content=\"Documentaci\u00f3n de proyectos, tutoriales de programaci\u00f3n, gu\u00edas de instalaci\u00f3n, todo en un \u00fanico lugar.\"/&gt; &lt;!-- descripci\u00f3n de url a compartir --&gt;\n    &lt;meta property=\"og:image\" content=\"https://zuluta.github.io/docs/assets/images/og.png\"/&gt; &lt;!-- imagen de url a compartir --&gt;\n    &lt;meta property=\"og:locale\" content=\"es_ES\"/&gt;\n\n  &lt;/head&gt;\n\n  &lt;!-- contenido que ve el usuario --&gt;\n  &lt;body&gt;\n\n    &lt;!-- Esto mejora el rendimiento de la p\u00e1gina, primero carga el contenido HTML y luego el c\u00f3digo JavaScript --&gt;\n    &lt;script src=\"src/js/dictionary-builder.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Lo m\u00e1s normal es colocar los scripts Javascript justo antes del cierre de la etiqueta &lt;body&gt;</p> <p> </p>"},{"location":"tutoriales/instalacion-librerias/gh-deploy/","title":"Despliegue de proyecto local a GitHub Pages","text":"<p>01. Accede a GitHub y crea un repositorio nuevo.</p> <p> </p> <p>02. Escribe el mismo nombre del proyecto local, deja en p\u00fablico y pulsa el bot\u00f3n crear repositorio.</p> <p> </p> <p>03. Muestra los comandos y la URL remota del repositorio creado.</p> <p> </p> <p>04. Comandos para sincrinizar por primera vez GIT con GitHub desde la terminal de VSCode.</p> <ul> <li>(git init) Inicia el GIT</li> <li>(git config --global user.name \"nombre-usuario\") Usuario de GitHub</li> <li>(git config --global user.email \"micorreo@ejemplo.com\") Email de GitHub </li> </ul> <p>05. Comandos de terminal mas utilizados en GIT.</p> <ul> <li>(git init) Inicia el GIT</li> <li>(git add .) Agrega todos los archivos al GIT</li> <li>(git add ejemplo.html) Agrega los archivos indibidualmente al GIT</li> <li>(git commit -m \"inserta el mensaje aqui\") Agrega un commit al GIT</li> <li>(git branch -M main) Fuerza a renombrar la rama local actual por (main) actual main</li> <li>(git remote add origin https://github.com/usuario/mi-repositorio.git) Agrega la url remota del repositorio GitHub</li> <li>(git remote -v) Verifica la comunicaci\u00f3n con el repositorio remoto</li> <li>(git status) Muestra el estado de los procesos GIT</li> <li>(git push -u origin main) Sube los archivos a la rama main del repositorio GitHub</li> </ul> <p>El orden de ejecuci\u00f3n</p> <p>El orden de ejecuci\u00f3n, variara en funci\u00f3n de lo que quieras hacer. Por l\u00f3gica, primero se inicia el GIT, se agregan los archivos, se envia un commit, la verificaci\u00f3n de estado y la comunicaci\u00f3n con el repositorio solo nos da informaci\u00f3n, no hace ningun cambio en el repositorio.</p> <p></p> <p>06. Entra en VSCode y abre una terminal nueva.</p> <ul> <li>Desde la carpeta de trabajo \"proyecto-docs\", activa el entorno virtual (.envscriptsactivate)</li> <li>Accede a la carpeta del proyecto \"docs\" y lanza el comando (mkdocs build) para compilar, \u00e9sto creara una nueva carpeta llamada site donde compilara todo el proyecto.</li> </ul> <p> </p> <p>07. Desde la carpeta del proyecto \"docs\", abre la terminal y prepara el repositorio GIT para subir al repositorio GitHub.</p> <ul> <li>Ejecuta el comando (git init)</li> <li>Ejecuta el comando (git add .)</li> <li>Ejecuta el comando (git commit -m \"despliegue\")</li> <li>Ejecuta el comando (git branch -M main)</li> <li>Ejecuta el comando (git remote add origin https://github.com/zuluta/docs.git)</li> <li>Ejecuta el comando (git remote -v)</li> <li>Ejecuta el comando (git status)</li> <li>Ejecuta el comando (git push -u origin main)</li> </ul> <p>NOTA</p> <p>La rama \"master\" y \"main\" son lo mismo. Hace unos a\u00f1os, la comunidad de software decidi\u00f3 cambiar el nombre de la rama principal de master a main. Verifica con el comando (git branch) las ramas existentes en tu repositorio local y si existe la rama master, pasa a la rama master con el comando (git switch master) y cambia el nombre de la rama con el comando (git branch -m main) o (git branch -M main) para forzarlo. De este modo, solo se dejara una rama principal con el nombre \"main\" por repositorio.</p> <p> </p> <p>08. Entra al repositorio y verifica si se subieron bien los archivos a GitHub en la rama main.</p> <p> </p> <p>09. GitHub permite crear una pagina web gratis desde el repositorio.</p> <ul> <li>Ejecuta el comando (mkdocs gh-deploy)</li> </ul> <p>Este comando es espec\u00edfico de mkdocs para GitHub. Este comando creara de forma autom\u00e1tica una nueva rama gh-pages en el mismo repositorio del proyecto para poder desplegar GitHub Pages.</p> <p>10. Entra al repositorio de GitHub y verifica si se creo la rama \"gh-pages\".</p> <p> </p> <p>11. Entra en Settings, luego en Pages, donde pone Branch, selecciona la rama \"gh-pages\" y la carpeta \"(root)\". Pulsa el bot\u00f3n de guardar y espera unos segundos a que se active la p\u00e1gina.</p> <p> </p> <p>12. Entra en Settings, luego en Pages, donde pone GitHub Pages, verifica que la p\u00e1gina este operativa.</p> <p> </p> <p>13. Si necesitas actualizar GitHub Pages por nuevos cambios, ejecuta lo siguiente.</p> <ul> <li>Desde la carpeta de trabajo \"proyecto-docs\", activa el entorno virtual (.envscriptsactivate)</li> <li>Accede a la carpeta del proyecto \"docs\" y lanza el comando (mkdocs build)</li> <li>Ejecuta el comando (git init)</li> <li>Ejecuta el comando (git add .)</li> <li>Ejecuta el comando (git commit -m \"actualizar contenido\")</li> <li>Ejecuta el comando (git branch)</li> <li>Ejecuta el comando (git switch main)</li> <li>Ejecuta el comando (git remote add origin https://github.com/zuluta/docs.git)</li> <li>Ejecuta el comando (git remote -v)</li> <li>Ejecuta el comando (git status)</li> <li>Ejecuta el comando (git push -u origin main) Se sube a la rama \"main\" del repositorio donde se guarda el proyecto</li> <li>Ejecuta el comando (mkdocs gh-deploy) Compila y despliega a la rama \"gh-pages\" del repositorio. \u00c9sta rama, va enlazado al sitio web de GitHub Pages</li> <li>Verifica los cambios en la p\u00e1gina  </li> </ul>"},{"location":"tutoriales/instalacion-librerias/mkdocs/","title":"Instalar MkDocs con Python y virtualenv","text":"<p>01. Verifica si Python y virtualenv est\u00e1n instalados de forma global y si no aparecen, instalalos.</p> <p> </p> <p>02. Entra en \u201cescritorio\u201d y crea una carpeta de trabajo que se llame (proyecto-docs) con el comando (mkdir proyecto-docs).</p> <p>03. Entra en \u201cproyecto-docs\u201d y crea una carpeta virtual que se llame (env).</p> <p>04. Act\u00edva la carpeta \u201cenv\u201d en modo virtual con el comando (.\\env\\scripts\\activate).</p> <p>05. Instala la librer\u00eda dentro de la carpeta \u201cenv\u201d con el comando (pip install mkdocs).</p> <p> </p> <p>06. Verifica si la librer\u00eda mkdocs se instal\u00f3 bien.</p> <p> </p> <p>07. Crea nuevo proyecto de mkdocs que se llame (mi-documentacion).</p> <p>08. Verifica si el proyecto se cre\u00f3 bien y desactiva el entorno virtual con el comando (deactivate). Cierra la terminal.</p> <p> </p> <p>09. Abre VSCode y carga la carpeta del escritorio \u201cproyecto-docs\u201d desde el menu superior (Archivo / Abrir carpeta\u2026).</p> <p> </p> <p>10. Dentro del proyecto \u201cmi-documentacion\u201d, abre el archivo que pone index.md.</p> <p>11. Abre una nueva terminal desde el menu superior (... / Terminal / Nuevo terminal) para ejecutar el servidor en local. Recordar que la librer\u00eda mkdocs se instal\u00f3 en un entorno virtual por lo que sera necesario primero activar el entorno virtual desde la carpeta de trabajo \u201cproyecto-docs\u201d con el comando (.\\env\\Scripts\\activate). Luego entra en la carpeta del proyecto \u201cmi-documentaci\u00f3n\u201d y desde ah\u00ed, ejecutar el siguiente comando (mkdocs serve), esto ejecutara el servidor local.</p> <p> </p> <p>12. Para verificar, copia la URL del servidor y abre en el navegador, le aparecer\u00e1 la p\u00e1gina de bienvenida por defecto.</p> <p> </p> <p>13. Con esto, ya tendrias instalado la librer\u00eda mkdocs en un entorno virtual y creado el proyecto para empezar a editar tu propia documentaci\u00f3n, porfolio, o lo que quieras de forma local.</p> <p>14. Ahora que ya tenemos mkdocs en marcha, toca instalar un tema desarrollado para mkdocs que le va dar un dise\u00f1o mucho mas moderno. Abre la terminal de VSCode, pulsa (ctrl + c) para detener el servidor, activa el entorno virtual, accede a la carpeta \u201cmi-documentaci\u00f3n\u201d y desde ah\u00ed ejecuta el comando (pip install mkdocs-material). Una vez terminada la instalaci\u00f3n, abre el archivo \u201cmkdocs.yml\u201d y modifica el nombre del tema. En este caso, se llama material. El tema que viene instalado por defecto se llama \u201creadthedocs\u201d.</p> <p> </p> <p>15. Para finalizar, recarga la p\u00e1gina y veras un aspecto mucho mas moderno de tu sitio web.</p> <p> </p>"},{"location":"tutoriales/ruta-aprendizaje/desarrollador-full-stack/","title":"Desarrollador Full Stack","text":"<p>El programador Full Stack es el profesional encargado de desarrollar p\u00e1ginas web, tanto en el FRONTEND como en el BACKEND. Para desempe\u00f1ar sus funciones, que incluyen desde el dise\u00f1o de interfaces hasta el desarrollo de arquitecturas y la optimizaci\u00f3n del sitio web, debe combinar una serie de conocimientos t\u00e9cnicos y creativos.</p>"},{"location":"tutoriales/ruta-aprendizaje/desarrollador-full-stack/#diagrama","title":"Diagrama","text":"<p>Creado con app.diagrams.net </p>"}]}